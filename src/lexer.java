// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexer.flex

// User Code (Import dependencies or declare variables)

// import java.util.List;
// import java.util.Arrays;

/*TODO.
  - Change the return values
   - Return the lexema found if the token has more than one lexema
   - Return the nothing if the token has only one lexema
   - Return the number of the identifier found (0),(1),(2),...
*/


@SuppressWarnings("fallthrough")
class lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\40\0\1\1\1\2\1\3\1\4\1\0\1\5\1\6"+
    "\1\7\2\10\1\11\1\12\1\10\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\23"+
    "\1\25\1\23\2\10\1\26\1\27\1\30\1\31\1\0"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\10\1\64\1\10\1\65\1\66\1\0"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\10\1\121\1\10\1\122\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\6\4\4\2\7\1\10\1\11\1\10\1\2\26\12"+
    "\1\5\22\12\2\5\1\10\1\0\1\13\1\11\1\2"+
    "\1\0\1\14\1\4\1\0\61\12\1\15\34\12\1\16"+
    "\11\12\1\17\10\12\1\20\1\12\1\21\1\22\5\12"+
    "\1\2\22\12\1\7\1\23\1\12\1\24\35\12\1\25"+
    "\4\12\1\26\12\12\1\27\13\12\1\30\1\4\14\12"+
    "\1\31\5\12\1\32\2\12\1\33\25\12\1\34\1\35"+
    "\10\12\1\17\4\12\1\36\1\0\3\12\1\37\1\12"+
    "\1\2\21\12\1\40\5\12\1\0\12\12\1\41\5\12"+
    "\1\42\6\12\1\17\12\12\1\43\5\12\1\44\1\45"+
    "\7\12\1\46\14\12\1\3\1\12\1\47\4\12\1\50"+
    "\6\12\1\36\10\12\1\51\1\52\5\12\1\53\10\12"+
    "\1\0\3\12\1\0\1\12\1\54\15\12\1\34\3\12"+
    "\1\0\1\55\2\12\1\16\3\12\1\56\11\12\1\57"+
    "\1\60\1\12\1\0\6\12\1\61\1\12\1\0\20\12"+
    "\1\62\1\12\1\63\5\12\1\64\1\12\1\65\1\12"+
    "\1\66\5\12\1\66\5\12\1\0\3\12\1\0\1\12"+
    "\1\67\11\12\1\57\2\12\1\70\1\0\3\12\1\71"+
    "\1\12\1\72\6\12\2\0\3\12\1\0\1\73\2\12"+
    "\1\27\7\12\1\74\1\0\10\12\1\75\3\12\1\22"+
    "\1\21\10\12\1\0\2\12\1\76\5\12\2\0\1\12"+
    "\1\77\1\0\6\12\1\0\1\12\1\100\3\12\1\101"+
    "\6\12\1\0\2\12\1\102\1\12\2\0\1\24\1\12"+
    "\1\0\6\12\1\0\1\103\5\12\1\0\2\12\2\0"+
    "\1\12\1\45\2\12\1\104\2\12\1\63\1\12\1\105"+
    "\1\12\3\0\3\12\1\106\1\12\1\0\1\56\3\12"+
    "\1\0\2\12\1\0\2\12\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[711];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\123\0\u014c\0\u019f\0\u01f2"+
    "\0\123\0\u0245\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437"+
    "\0\246\0\u048a\0\u04dd\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c"+
    "\0\u06cf\0\u0722\0\u0775\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914"+
    "\0\u0967\0\u09ba\0\u0a0d\0\u0a60\0\u0ab3\0\u0b06\0\u0b59\0\u0bac"+
    "\0\u0bff\0\u014c\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b\0\u0d9e\0\u0df1"+
    "\0\u0e44\0\u0e97\0\u0eea\0\u0f3d\0\u0f90\0\u0fe3\0\u1036\0\u1089"+
    "\0\u10dc\0\u112f\0\u1182\0\u11d5\0\u1228\0\123\0\123\0\371"+
    "\0\123\0\123\0\123\0\u127b\0\123\0\123\0\u12ce\0\u1321"+
    "\0\u1374\0\u13c7\0\u141a\0\u146d\0\u14c0\0\u1513\0\u1566\0\u15b9"+
    "\0\u160c\0\u165f\0\u16b2\0\u1705\0\u1758\0\u17ab\0\u17fe\0\u1851"+
    "\0\u18a4\0\u18f7\0\u194a\0\u199d\0\u19f0\0\u1a43\0\u1a96\0\u1ae9"+
    "\0\u1b3c\0\u1b8f\0\u1be2\0\u1c35\0\u1c88\0\u1cdb\0\u1d2e\0\u1d81"+
    "\0\u1dd4\0\u1e27\0\u1e7a\0\u1ecd\0\u1f20\0\u1f73\0\u1fc6\0\u2019"+
    "\0\u206c\0\u20bf\0\u2112\0\u2165\0\u21b8\0\u220b\0\u225e\0\u22b1"+
    "\0\u086e\0\u2304\0\u2357\0\u23aa\0\u23fd\0\u2450\0\u24a3\0\u24f6"+
    "\0\u2549\0\u259c\0\u25ef\0\u2642\0\u2695\0\u26e8\0\u273b\0\u278e"+
    "\0\u27e1\0\u2834\0\u2887\0\u28da\0\u292d\0\u2980\0\u29d3\0\u2a26"+
    "\0\u2a79\0\u2acc\0\u2b1f\0\u2b72\0\u2bc5\0\u2c18\0\u2c6b\0\u2cbe"+
    "\0\u2d11\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0\0\u2f03\0\u2f56"+
    "\0\u2fa9\0\u2ffc\0\u304f\0\u30a2\0\u30f5\0\u3148\0\u319b\0\u31ee"+
    "\0\u086e\0\u3241\0\u3294\0\u32e7\0\u333a\0\u338d\0\u33e0\0\u3433"+
    "\0\u3486\0\u086e\0\u34d9\0\u352c\0\u357f\0\u35d2\0\u3625\0\u3678"+
    "\0\u36cb\0\u371e\0\u3771\0\u37c4\0\u3817\0\u386a\0\u38bd\0\u3910"+
    "\0\u3963\0\u39b6\0\u3a09\0\u3a5c\0\u12ce\0\u3aaf\0\u3b02\0\u086e"+
    "\0\u3b55\0\u3ba8\0\u3bfb\0\u3c4e\0\u3ca1\0\u3cf4\0\u3d47\0\u3d9a"+
    "\0\u3ded\0\u3e40\0\u3e93\0\u3ee6\0\u3f39\0\u3f8c\0\u3fdf\0\u4032"+
    "\0\u4085\0\u40d8\0\u412b\0\u417e\0\u41d1\0\u4224\0\u4277\0\u42ca"+
    "\0\u431d\0\u4370\0\u43c3\0\u4416\0\u4469\0\u086e\0\u44bc\0\u450f"+
    "\0\u4562\0\u45b5\0\u086e\0\u4608\0\u465b\0\u46ae\0\u4701\0\u4754"+
    "\0\u47a7\0\u47fa\0\u484d\0\u48a0\0\u48f3\0\u4946\0\u4999\0\u49ec"+
    "\0\u4a3f\0\u4a92\0\u4ae5\0\u4b38\0\u4b8b\0\u4bde\0\u4c31\0\u4c84"+
    "\0\u4cd7\0\u086e\0\u4d2a\0\u4d7d\0\u4dd0\0\u4e23\0\u4e76\0\u4ec9"+
    "\0\u4f1c\0\u4f6f\0\u4fc2\0\u5015\0\u5068\0\u50bb\0\u510e\0\u086e"+
    "\0\u5161\0\u51b4\0\u5207\0\u525a\0\u52ad\0\u086e\0\u5300\0\u5353"+
    "\0\u086e\0\u53a6\0\u53f9\0\u544c\0\u549f\0\u54f2\0\u5545\0\u5598"+
    "\0\u55eb\0\u563e\0\u5691\0\u56e4\0\u5737\0\u578a\0\u57dd\0\u5830"+
    "\0\u5883\0\u58d6\0\u5929\0\u597c\0\u59cf\0\u5a22\0\u5a75\0\u086e"+
    "\0\u5ac8\0\u5b1b\0\u5b6e\0\u5bc1\0\u5c14\0\u5c67\0\u5cba\0\u5d0d"+
    "\0\u5d60\0\u5db3\0\u5e06\0\u5e59\0\u5eac\0\u5eff\0\u5f52\0\u5fa5"+
    "\0\u5ff8\0\u604b\0\u086e\0\u609e\0\u60f1\0\u6144\0\u6197\0\u61ea"+
    "\0\u623d\0\u6290\0\u62e3\0\u6336\0\u6389\0\u63dc\0\u642f\0\u6482"+
    "\0\u64d5\0\u6528\0\u657b\0\u65ce\0\u6621\0\u6674\0\u086e\0\u66c7"+
    "\0\u671a\0\u676d\0\u67c0\0\u6813\0\u6866\0\u68b9\0\u690c\0\u695f"+
    "\0\u69b2\0\u6a05\0\u6a58\0\u6aab\0\u6afe\0\u6b51\0\u6ba4\0\u086e"+
    "\0\u6bf7\0\u6c4a\0\u6c9d\0\u6cf0\0\u6d43\0\u086e\0\u6d96\0\u6de9"+
    "\0\u6e3c\0\u6e8f\0\u6ee2\0\u6f35\0\u086e\0\u6f88\0\u6fdb\0\u702e"+
    "\0\u7081\0\u70d4\0\u7127\0\u717a\0\u71cd\0\u7220\0\u7273\0\u086e"+
    "\0\u72c6\0\u7319\0\u736c\0\u73bf\0\u7412\0\u086e\0\u086e\0\u7465"+
    "\0\u74b8\0\u750b\0\u755e\0\u75b1\0\u7604\0\u7657\0\u086e\0\u76aa"+
    "\0\u76fd\0\u7750\0\u77a3\0\u77f6\0\u7849\0\u789c\0\u78ef\0\u7942"+
    "\0\u7995\0\u79e8\0\u7a3b\0\u086e\0\u7a8e\0\u086e\0\u7ae1\0\u7b34"+
    "\0\u7b87\0\u7bda\0\u086e\0\u7c2d\0\u7c80\0\u7cd3\0\u7d26\0\u7d79"+
    "\0\u7dcc\0\u086e\0\u7e1f\0\u7e72\0\u7ec5\0\u7f18\0\u7f6b\0\u7fbe"+
    "\0\u8011\0\u8064\0\u086e\0\u086e\0\u80b7\0\u810a\0\u815d\0\u81b0"+
    "\0\u8203\0\u086e\0\u8256\0\u82a9\0\u82fc\0\u834f\0\u83a2\0\u83f5"+
    "\0\u8448\0\u849b\0\u84ee\0\u8541\0\u8594\0\u85e7\0\u863a\0\u868d"+
    "\0\u086e\0\u86e0\0\u8733\0\u8786\0\u87d9\0\u882c\0\u887f\0\u88d2"+
    "\0\u8925\0\u8978\0\u89cb\0\u8a1e\0\u8a71\0\u8ac4\0\u086e\0\u8b17"+
    "\0\u8b6a\0\u8bbd\0\u8c10\0\u086e\0\u8c63\0\u8cb6\0\u086e\0\u8d09"+
    "\0\u8d5c\0\u8daf\0\u086e\0\u8e02\0\u8e55\0\u8ea8\0\u8efb\0\u8f4e"+
    "\0\u8fa1\0\u8ff4\0\u9047\0\u909a\0\u086e\0\u086e\0\u90ed\0\u9140"+
    "\0\u9193\0\u91e6\0\u9239\0\u928c\0\u92df\0\u9332\0\u086e\0\u9385"+
    "\0\u93d8\0\u942b\0\u947e\0\u94d1\0\u9524\0\u9577\0\u95ca\0\u961d"+
    "\0\u9670\0\u96c3\0\u9716\0\u9769\0\u97bc\0\u980f\0\u9862\0\u98b5"+
    "\0\u9908\0\u086e\0\u995b\0\u99ae\0\u9a01\0\u9a54\0\u9aa7\0\u9afa"+
    "\0\u9b4d\0\u086e\0\u9ba0\0\u086e\0\u9bf3\0\u086e\0\u9c46\0\u9c99"+
    "\0\u9cec\0\u9d3f\0\u9d92\0\u9de5\0\u9e38\0\u9e8b\0\u9ede\0\u9f31"+
    "\0\u9f84\0\u9fd7\0\ua02a\0\ua07d\0\ua0d0\0\ua123\0\ua176\0\u086e"+
    "\0\ua1c9\0\ua21c\0\ua26f\0\ua2c2\0\ua315\0\ua368\0\ua3bb\0\ua40e"+
    "\0\ua461\0\u65ce\0\ua4b4\0\ua507\0\u086e\0\ua55a\0\ua5ad\0\ua600"+
    "\0\ua653\0\u086e\0\ua6a6\0\u086e\0\ua6f9\0\ua74c\0\ua79f\0\ua7f2"+
    "\0\ua845\0\ua898\0\ua8eb\0\ua93e\0\ua991\0\ua9e4\0\uaa37\0\uaa8a"+
    "\0\u086e\0\uaadd\0\uab30\0\u086e\0\uab83\0\uabd6\0\uac29\0\uac7c"+
    "\0\uaccf\0\uad22\0\uad75\0\u086e\0\uadc8\0\uae1b\0\uae6e\0\uaec1"+
    "\0\uaf14\0\uaf67\0\uafba\0\ub00d\0\ub060\0\u086e\0\ub0b3\0\ub106"+
    "\0\ub159\0\123\0\123\0\ub1ac\0\ub1ff\0\ub252\0\ub2a5\0\ub2f8"+
    "\0\ub34b\0\ub39e\0\ub3f1\0\ub444\0\ub497\0\ub4ea\0\u086e\0\ub53d"+
    "\0\ub590\0\ub5e3\0\ub636\0\ub689\0\ub6dc\0\ub72f\0\ub782\0\u086e"+
    "\0\ub7d5\0\ub828\0\ub87b\0\ub8ce\0\ub921\0\ub974\0\ub9c7\0\uba1a"+
    "\0\uba6d\0\u086e\0\ubac0\0\ubb13\0\ubb66\0\u086e\0\ubbb9\0\ubc0c"+
    "\0\ubc5f\0\ubcb2\0\ubd05\0\ubd58\0\ubdab\0\ubdfe\0\ube51\0\u086e"+
    "\0\ubea4\0\ubef7\0\ubf4a\0\123\0\ubf9d\0\ubff0\0\uc043\0\uc096"+
    "\0\uc0e9\0\uc13c\0\uc18f\0\uc1e2\0\uc235\0\u086e\0\uc288\0\uc2db"+
    "\0\uc32e\0\uc381\0\uc3d4\0\uc427\0\uc47a\0\uc4cd\0\uc520\0\uc573"+
    "\0\uc5c6\0\123\0\uc619\0\uc66c\0\u086e\0\uc6bf\0\uc712\0\123"+
    "\0\uc765\0\u086e\0\uc7b8\0\uc80b\0\uc85e\0\uc8b1\0\uc904\0\uc957"+
    "\0\uc9aa\0\u086e\0\uc9fd\0\uca50\0\123\0\ucaa3\0\ucaf6\0\ucb49"+
    "\0\ucb9c\0\ucbef\0\ucc42\0\ucc95\0\ucce8\0\ucd3b\0\123";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[711];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\11\1\15\1\16\7\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\36\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\3\36\1\2\1\52\1\2\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\36\1\62\2\36"+
    "\1\63\1\36\1\64\1\65\1\66\1\36\1\67\1\70"+
    "\1\71\1\36\1\72\1\73\1\36\1\74\1\36\1\75"+
    "\1\76\152\0\1\77\73\0\3\100\1\101\3\100\1\0"+
    "\113\100\27\0\1\102\101\0\1\103\20\0\1\102\73\0"+
    "\3\104\1\0\3\104\1\105\54\104\1\0\36\104\11\0"+
    "\1\6\3\0\1\5\11\0\1\102\105\0\1\106\14\0"+
    "\1\102\106\0\1\106\13\0\1\102\104\0\1\5\3\0"+
    "\1\6\11\0\1\102\107\0\1\107\122\0\1\107\1\0"+
    "\10\17\123\0\1\52\1\77\122\0\1\77\1\52\123\0"+
    "\1\103\107\0\10\36\4\0\3\36\1\110\7\36\1\111"+
    "\1\36\1\112\4\36\1\113\7\36\2\0\4\36\1\114"+
    "\7\36\1\115\1\36\1\116\14\36\20\0\10\36\4\0"+
    "\1\117\3\36\1\120\25\36\2\0\31\36\1\121\1\36"+
    "\20\0\10\36\4\0\1\36\1\122\1\123\1\124\3\36"+
    "\1\125\1\126\2\36\1\127\2\36\1\130\2\36\1\131"+
    "\1\132\1\36\1\133\5\36\2\0\1\36\1\134\31\36"+
    "\20\0\10\36\4\0\1\135\3\36\1\136\3\36\1\137"+
    "\10\36\1\140\10\36\2\0\5\36\1\141\3\36\1\142"+
    "\21\36\20\0\10\36\4\0\27\36\1\143\2\36\2\0"+
    "\1\36\1\144\14\36\1\145\3\36\1\146\3\36\1\147"+
    "\1\36\1\150\2\36\20\0\10\36\4\0\10\36\1\151"+
    "\5\36\1\152\5\36\1\153\5\36\2\0\1\36\1\154"+
    "\20\36\1\155\10\36\20\0\10\36\4\0\21\36\1\156"+
    "\10\36\2\0\5\36\1\157\11\36\1\160\13\36\20\0"+
    "\10\36\4\0\1\161\31\36\2\0\1\36\1\162\31\36"+
    "\20\0\10\36\4\0\15\36\1\163\14\36\2\0\33\36"+
    "\20\0\10\36\4\0\16\36\1\164\13\36\2\0\33\36"+
    "\20\0\10\36\4\0\32\36\2\0\33\36\20\0\10\36"+
    "\4\0\4\36\1\165\3\36\1\166\21\36\2\0\5\36"+
    "\1\167\3\36\1\170\21\36\20\0\10\36\4\0\32\36"+
    "\2\0\5\36\1\171\11\36\1\172\5\36\1\173\3\36"+
    "\1\174\1\36\20\0\10\36\4\0\32\36\2\0\1\36"+
    "\1\175\3\36\1\176\11\36\1\177\5\36\1\200\5\36"+
    "\20\0\10\36\4\0\21\36\1\201\2\36\1\202\5\36"+
    "\2\0\2\36\1\203\15\36\1\204\1\36\1\205\2\36"+
    "\1\206\5\36\20\0\10\36\4\0\21\36\1\207\10\36"+
    "\2\0\33\36\20\0\10\36\4\0\10\36\1\210\5\36"+
    "\1\211\13\36\2\0\33\36\20\0\10\36\4\0\4\36"+
    "\1\212\25\36\2\0\33\36\20\0\10\36\4\0\1\213"+
    "\15\36\1\214\2\36\1\215\10\36\2\0\22\36\1\216"+
    "\10\36\20\0\10\36\4\0\15\36\1\217\1\36\1\220"+
    "\12\36\2\0\33\36\20\0\10\36\4\0\1\221\7\36"+
    "\1\222\21\36\2\0\33\36\20\0\10\36\4\0\7\36"+
    "\1\223\22\36\2\0\33\36\20\0\10\36\4\0\32\36"+
    "\2\0\2\36\1\224\13\36\1\225\4\36\1\226\3\36"+
    "\1\227\3\36\20\0\10\36\4\0\32\36\2\0\17\36"+
    "\1\230\2\36\1\231\6\36\1\232\1\36\20\0\10\36"+
    "\4\0\32\36\2\0\1\36\1\233\6\36\1\234\3\36"+
    "\1\235\2\36\1\236\13\36\20\0\10\36\4\0\32\36"+
    "\2\0\1\36\1\232\3\36\1\237\11\36\1\240\13\36"+
    "\20\0\10\36\4\0\32\36\2\0\14\36\1\241\1\36"+
    "\1\242\11\36\1\243\2\36\20\0\10\36\4\0\32\36"+
    "\2\0\1\36\1\154\7\36\1\244\2\36\1\245\2\36"+
    "\1\246\2\36\1\247\10\36\20\0\10\36\4\0\32\36"+
    "\2\0\14\36\1\250\16\36\20\0\10\36\4\0\32\36"+
    "\2\0\6\36\1\251\6\36\1\252\1\253\4\36\1\254"+
    "\7\36\20\0\10\36\4\0\32\36\2\0\1\36\1\255"+
    "\15\36\1\256\13\36\20\0\10\36\4\0\32\36\2\0"+
    "\1\36\1\257\3\36\1\260\11\36\1\261\5\36\1\200"+
    "\5\36\20\0\10\36\4\0\32\36\2\0\22\36\1\262"+
    "\10\36\20\0\10\36\4\0\32\36\2\0\1\36\1\263"+
    "\20\36\1\264\2\36\1\265\5\36\20\0\10\36\4\0"+
    "\32\36\2\0\1\36\1\266\3\36\1\267\25\36\20\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\270\2\36\1\271"+
    "\13\36\1\272\2\36\1\273\1\36\1\274\1\36\20\0"+
    "\10\36\4\0\32\36\2\0\10\36\1\275\1\276\10\36"+
    "\1\277\10\36\20\0\10\36\4\0\32\36\2\0\1\36"+
    "\1\300\15\36\1\301\13\36\20\0\10\36\4\0\32\36"+
    "\2\0\10\36\1\302\1\303\21\36\20\0\10\36\4\0"+
    "\32\36\2\0\11\36\1\304\21\36\31\0\1\102\71\0"+
    "\1\103\10\0\1\105\131\0\10\305\113\0\10\36\4\0"+
    "\3\36\1\306\26\36\2\0\33\36\20\0\10\36\4\0"+
    "\13\36\1\251\7\36\1\307\6\36\2\0\33\36\20\0"+
    "\10\36\4\0\30\36\1\251\1\36\2\0\33\36\20\0"+
    "\10\36\4\0\2\36\1\310\27\36\2\0\33\36\20\0"+
    "\10\36\4\0\32\36\2\0\4\36\1\311\26\36\20\0"+
    "\10\36\4\0\32\36\2\0\11\36\1\312\21\36\20\0"+
    "\10\36\4\0\32\36\2\0\4\36\1\313\26\36\20\0"+
    "\10\36\4\0\2\36\1\314\27\36\2\0\33\36\20\0"+
    "\10\36\4\0\23\36\1\315\6\36\2\0\33\36\20\0"+
    "\10\36\4\0\21\36\1\316\3\36\1\317\4\36\2\0"+
    "\33\36\20\0\10\36\4\0\32\36\2\0\17\36\1\320"+
    "\11\36\1\321\1\36\20\0\10\36\4\0\32\36\2\0"+
    "\10\36\1\322\22\36\20\0\10\36\4\0\32\36\2\0"+
    "\1\36\1\321\1\323\2\36\1\324\25\36\20\0\10\36"+
    "\4\0\4\36\1\325\25\36\2\0\33\36\20\0\10\36"+
    "\4\0\32\36\2\0\16\36\1\326\14\36\20\0\10\36"+
    "\4\0\32\36\2\0\16\36\1\327\14\36\20\0\10\36"+
    "\4\0\13\36\1\330\1\36\1\331\14\36\2\0\2\36"+
    "\1\332\30\36\20\0\10\36\4\0\4\36\1\333\25\36"+
    "\2\0\33\36\20\0\10\36\4\0\1\36\1\334\30\36"+
    "\2\0\10\36\1\335\5\36\1\327\5\36\1\336\6\36"+
    "\20\0\10\36\4\0\10\36\1\126\2\36\1\127\6\36"+
    "\1\337\7\36\2\0\33\36\20\0\10\36\4\0\32\36"+
    "\2\0\14\36\1\340\16\36\20\0\10\36\4\0\23\36"+
    "\1\341\6\36\2\0\33\36\20\0\10\36\4\0\13\36"+
    "\1\342\6\36\1\113\7\36\2\0\33\36\20\0\10\36"+
    "\4\0\22\36\1\343\7\36\2\0\33\36\20\0\10\36"+
    "\4\0\16\36\1\344\13\36\2\0\33\36\20\0\10\36"+
    "\4\0\32\36\2\0\14\36\1\345\16\36\20\0\10\36"+
    "\4\0\32\36\2\0\15\36\1\346\4\36\1\347\10\36"+
    "\20\0\10\36\4\0\4\36\1\350\3\36\1\351\21\36"+
    "\2\0\33\36\20\0\10\36\4\0\32\36\2\0\3\36"+
    "\1\352\27\36\20\0\10\36\4\0\32\36\2\0\4\36"+
    "\1\353\26\36\20\0\10\36\4\0\32\36\2\0\1\36"+
    "\1\354\20\36\1\355\10\36\20\0\10\36\4\0\32\36"+
    "\2\0\5\36\1\356\25\36\20\0\10\36\4\0\32\36"+
    "\2\0\11\36\1\357\21\36\20\0\10\36\4\0\27\36"+
    "\1\360\2\36\2\0\33\36\20\0\10\36\4\0\21\36"+
    "\1\361\10\36\2\0\33\36\20\0\10\36\4\0\13\36"+
    "\1\362\16\36\2\0\33\36\20\0\10\36\4\0\32\36"+
    "\2\0\14\36\1\363\16\36\20\0\10\36\4\0\32\36"+
    "\2\0\11\36\1\364\21\36\20\0\10\36\4\0\16\36"+
    "\1\365\13\36\2\0\33\36\20\0\10\36\4\0\32\36"+
    "\2\0\24\36\1\366\6\36\20\0\10\36\4\0\23\36"+
    "\1\367\6\36\2\0\33\36\20\0\10\36\4\0\25\36"+
    "\1\370\4\36\2\0\33\36\20\0\10\36\4\0\32\36"+
    "\2\0\16\36\1\371\14\36\20\0\10\36\4\0\3\36"+
    "\1\372\11\36\1\373\4\36\1\374\1\375\6\36\2\0"+
    "\33\36\20\0\10\36\4\0\10\36\1\376\21\36\2\0"+
    "\33\36\20\0\10\36\4\0\5\36\1\377\24\36\2\0"+
    "\33\36\20\0\10\36\4\0\12\36\1\u0100\1\36\1\u0101"+
    "\15\36\2\0\33\36\20\0\10\36\4\0\32\36\2\0"+
    "\24\36\1\u0102\6\36\20\0\10\36\4\0\32\36\2\0"+
    "\2\36\1\171\30\36\20\0\10\36\4\0\32\36\2\0"+
    "\4\36\1\u0103\26\36\20\0\10\36\4\0\32\36\2\0"+
    "\23\36\1\u0104\7\36\20\0\10\36\4\0\2\36\1\u0105"+
    "\27\36\2\0\33\36\20\0\10\36\4\0\32\36\2\0"+
    "\15\36\1\u0106\4\36\1\u0107\10\36\20\0\10\36\4\0"+
    "\32\36\2\0\30\36\1\u0108\2\36\20\0\10\36\4\0"+
    "\32\36\2\0\16\36\1\u0109\5\36\1\u010a\6\36\20\0"+
    "\10\36\4\0\32\36\2\0\14\36\1\u010b\16\36\20\0"+
    "\10\36\4\0\3\36\1\u010c\26\36\2\0\33\36\20\0"+
    "\10\36\4\0\23\36\1\373\6\36\2\0\33\36\20\0"+
    "\10\36\4\0\32\36\2\0\12\36\1\u010d\20\36\20\0"+
    "\10\36\4\0\32\36\2\0\24\36\1\u010e\6\36\20\0"+
    "\10\36\4\0\4\36\1\u010f\25\36\2\0\33\36\20\0"+
    "\10\36\4\0\32\36\2\0\24\36\1\u0110\6\36\20\0"+
    "\10\36\4\0\10\36\1\u0111\5\36\1\u0112\13\36\2\0"+
    "\33\36\20\0\10\36\4\0\6\36\1\u0113\23\36\2\0"+
    "\33\36\20\0\10\36\4\0\26\36\1\u0114\3\36\2\0"+
    "\33\36\20\0\10\36\4\0\13\36\1\u0115\7\36\1\u0116"+
    "\6\36\2\0\33\36\20\0\10\36\4\0\1\36\1\u0117"+
    "\30\36\2\0\33\36\20\0\10\36\4\0\3\36\1\u0118"+
    "\13\36\1\u0119\12\36\2\0\33\36\20\0\10\36\4\0"+
    "\24\36\1\u011a\5\36\2\0\33\36\20\0\10\36\4\0"+
    "\32\36\2\0\25\36\1\u011b\5\36\20\0\10\36\4\0"+
    "\10\36\1\u011c\21\36\2\0\33\36\20\0\10\36\4\0"+
    "\3\36\1\u011d\26\36\2\0\33\36\20\0\10\36\4\0"+
    "\13\36\1\u011e\16\36\2\0\33\36\20\0\10\36\4\0"+
    "\4\36\1\u011f\25\36\2\0\33\36\20\0\10\36\4\0"+
    "\4\36\1\u0120\25\36\2\0\33\36\20\0\10\36\4\0"+
    "\32\36\2\0\23\36\1\u0121\7\36\20\0\10\36\4\0"+
    "\32\36\2\0\4\36\1\262\26\36\20\0\10\36\4\0"+
    "\32\36\2\0\23\36\1\u0122\5\36\1\u0123\1\36\20\0"+
    "\10\36\4\0\32\36\2\0\1\36\1\u0124\31\36\20\0"+
    "\10\36\4\0\32\36\2\0\17\36\1\u0125\13\36\20\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\u0126\25\36\20\0"+
    "\10\36\4\0\32\36\2\0\24\36\1\u0127\6\36\20\0"+
    "\10\36\4\0\32\36\2\0\23\36\1\u0128\1\u0129\6\36"+
    "\20\0\10\36\4\0\32\36\2\0\1\36\1\u012a\31\36"+
    "\20\0\10\36\4\0\32\36\2\0\1\36\1\u012b\31\36"+
    "\20\0\10\36\4\0\32\36\2\0\15\36\1\u012c\1\u012d"+
    "\14\36\20\0\10\36\4\0\32\36\2\0\3\36\1\u012e"+
    "\2\36\1\u012f\5\36\1\u0130\16\36\20\0\10\36\4\0"+
    "\32\36\2\0\25\36\1\u0131\5\36\20\0\10\36\4\0"+
    "\32\36\2\0\11\36\1\u0132\11\36\1\u0133\7\36\20\0"+
    "\10\36\4\0\32\36\2\0\25\36\1\u0134\5\36\20\0"+
    "\10\36\4\0\32\36\2\0\3\36\1\u0135\20\36\1\u0136"+
    "\6\36\20\0\10\36\4\0\32\36\2\0\16\36\1\u0137"+
    "\14\36\20\0\10\36\4\0\32\36\2\0\17\36\1\u0138"+
    "\13\36\20\0\10\36\4\0\32\36\2\0\22\36\1\u0139"+
    "\10\36\20\0\10\36\4\0\32\36\2\0\17\36\1\u013a"+
    "\13\36\20\0\10\36\4\0\32\36\2\0\17\36\1\u013b"+
    "\13\36\20\0\10\36\4\0\32\36\2\0\20\36\1\u013c"+
    "\12\36\20\0\10\36\4\0\32\36\2\0\23\36\1\u013d"+
    "\1\u013e\6\36\3\0\1\u013f\14\0\10\36\4\0\32\36"+
    "\2\0\33\36\20\0\10\36\4\0\32\36\2\0\15\36"+
    "\1\u0140\15\36\20\0\10\36\4\0\32\36\2\0\16\36"+
    "\1\u0141\14\36\20\0\10\36\4\0\32\36\2\0\24\36"+
    "\1\u0142\6\36\20\0\10\36\4\0\32\36\2\0\27\36"+
    "\1\u0143\3\36\20\0\10\36\4\0\32\36\2\0\16\36"+
    "\1\u0144\5\36\1\u0145\6\36\20\0\10\36\4\0\32\36"+
    "\2\0\3\36\1\u0146\17\36\1\u0147\7\36\20\0\10\36"+
    "\4\0\32\36\2\0\11\36\1\u0148\5\36\1\u0149\13\36"+
    "\20\0\10\36\4\0\32\36\2\0\2\36\1\u014a\30\36"+
    "\20\0\10\36\4\0\32\36\2\0\11\36\1\u014b\21\36"+
    "\20\0\10\36\4\0\32\36\2\0\21\36\1\u014c\2\36"+
    "\1\u014d\6\36\20\0\10\36\4\0\32\36\2\0\14\36"+
    "\1\u014e\16\36\20\0\10\36\4\0\32\36\2\0\17\36"+
    "\1\u014f\13\36\20\0\10\36\4\0\32\36\2\0\1\36"+
    "\1\u0150\20\36\1\u0151\10\36\20\0\10\36\4\0\32\36"+
    "\2\0\11\36\1\u0152\21\36\20\0\10\36\4\0\32\36"+
    "\2\0\16\36\1\u0153\14\36\20\0\10\36\4\0\32\36"+
    "\2\0\11\36\1\u0154\10\36\1\u0155\10\36\20\0\10\36"+
    "\4\0\32\36\2\0\15\36\1\u0127\15\36\20\0\10\36"+
    "\4\0\32\36\2\0\1\36\1\u0156\23\36\1\u011b\3\36"+
    "\1\u0157\1\36\20\0\10\36\4\0\32\36\2\0\22\36"+
    "\1\u0102\10\36\20\0\10\36\4\0\32\36\2\0\11\36"+
    "\1\u0158\2\36\1\u0159\16\36\20\0\10\36\4\0\32\36"+
    "\2\0\11\36\1\u015a\21\36\20\0\10\36\4\0\32\36"+
    "\2\0\24\36\1\u015b\6\36\20\0\10\36\4\0\32\36"+
    "\2\0\5\36\1\u015c\25\36\3\0\1\u015d\14\0\10\36"+
    "\4\0\32\36\2\0\33\36\20\0\10\36\4\0\4\36"+
    "\1\u015e\25\36\2\0\33\36\20\0\10\36\4\0\7\36"+
    "\1\u015f\22\36\2\0\22\36\1\u0160\10\36\20\0\10\36"+
    "\4\0\32\36\2\0\1\36\1\u0161\31\36\20\0\10\36"+
    "\4\0\1\u0162\31\36\2\0\33\36\20\0\10\36\4\0"+
    "\12\36\1\u0163\17\36\2\0\33\36\20\0\10\36\4\0"+
    "\26\36\1\u0164\3\36\2\0\33\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u0165\25\36\20\0\10\36\4\0"+
    "\32\36\2\0\1\36\1\u0166\31\36\20\0\10\36\4\0"+
    "\32\36\2\0\17\36\1\323\13\36\20\0\10\36\4\0"+
    "\32\36\2\0\24\36\1\u0167\6\36\20\0\10\36\4\0"+
    "\32\36\2\0\1\36\1\336\31\36\20\0\10\36\4\0"+
    "\32\36\2\0\14\36\1\u0168\16\36\20\0\10\36\4\0"+
    "\32\36\2\0\3\36\1\u0168\27\36\20\0\10\36\4\0"+
    "\2\36\1\u0169\27\36\2\0\33\36\20\0\10\36\4\0"+
    "\32\36\2\0\24\36\1\u0168\6\36\20\0\10\36\4\0"+
    "\32\36\2\0\7\36\1\u0168\23\36\20\0\10\36\4\0"+
    "\24\36\1\u016a\5\36\2\0\33\36\20\0\10\36\4\0"+
    "\22\36\1\u016b\7\36\2\0\33\36\20\0\10\36\4\0"+
    "\32\36\2\0\12\36\1\u0168\20\36\20\0\10\36\4\0"+
    "\1\u016c\31\36\2\0\33\36\20\0\10\36\4\0\32\36"+
    "\2\0\31\36\1\321\1\36\20\0\10\36\4\0\32\36"+
    "\2\0\17\36\1\u016d\13\36\20\0\10\36\4\0\32\36"+
    "\2\0\22\36\1\u0168\10\36\20\0\10\36\4\0\32\36"+
    "\2\0\10\36\1\335\22\36\20\0\10\36\4\0\32\36"+
    "\2\0\14\36\1\u016e\16\36\20\0\10\36\4\0\1\u016f"+
    "\31\36\2\0\33\36\20\0\10\36\4\0\4\36\1\u0170"+
    "\25\36\2\0\33\36\20\0\10\36\4\0\23\36\1\u0171"+
    "\6\36\2\0\33\36\20\0\10\36\4\0\17\36\1\u0130"+
    "\12\36\2\0\33\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u0172\25\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u0173\25\36\20\0\10\36\4\0\2\36\1\u016e"+
    "\27\36\2\0\33\36\20\0\10\36\4\0\22\36\1\u0174"+
    "\7\36\2\0\33\36\20\0\10\36\4\0\32\36\2\0"+
    "\10\36\1\u0175\22\36\20\0\10\36\4\0\32\36\2\0"+
    "\23\36\1\u0176\7\36\20\0\10\36\4\0\32\36\2\0"+
    "\17\36\1\u0177\13\36\20\0\10\36\4\0\32\36\2\0"+
    "\16\36\1\u0178\14\36\20\0\10\36\4\0\32\36\2\0"+
    "\24\36\1\353\6\36\20\0\10\36\4\0\14\36\1\u0179"+
    "\15\36\2\0\33\36\20\0\10\36\4\0\4\36\1\u017a"+
    "\25\36\2\0\33\36\20\0\10\36\4\0\13\36\1\u017b"+
    "\16\36\2\0\33\36\20\0\10\36\4\0\32\36\2\0"+
    "\23\36\1\u011b\7\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u017c\25\36\20\0\10\36\4\0\24\36\1\u017d"+
    "\5\36\2\0\33\36\20\0\10\36\4\0\23\36\1\u017e"+
    "\3\36\1\u017f\2\36\2\0\33\36\20\0\10\36\4\0"+
    "\32\36\2\0\17\36\1\u0180\13\36\20\0\10\36\4\0"+
    "\10\36\1\u0181\21\36\2\0\33\36\20\0\10\36\4\0"+
    "\32\36\2\0\4\36\1\u0182\26\36\20\0\10\36\4\0"+
    "\4\36\1\u0183\25\36\2\0\33\36\20\0\10\36\4\0"+
    "\4\36\1\u0184\25\36\2\0\33\36\20\0\10\36\4\0"+
    "\4\36\1\u0185\25\36\2\0\33\36\20\0\10\36\4\0"+
    "\16\36\1\u0186\13\36\2\0\33\36\20\0\10\36\4\0"+
    "\15\36\1\u0187\14\36\2\0\33\36\20\0\10\36\4\0"+
    "\23\36\1\u0188\6\36\2\0\33\36\20\0\10\36\4\0"+
    "\4\36\1\251\25\36\2\0\33\36\20\0\10\36\4\0"+
    "\10\36\1\u0189\21\36\2\0\33\36\20\0\10\36\4\0"+
    "\32\36\2\0\25\36\1\u018a\5\36\20\0\10\36\4\0"+
    "\32\36\2\0\24\36\1\u018b\6\36\20\0\10\36\4\0"+
    "\32\36\2\0\14\36\1\u018c\16\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u018d\25\36\20\0\10\36\4\0"+
    "\32\36\2\0\22\36\1\u018e\10\36\20\0\10\36\4\0"+
    "\32\36\2\0\24\36\1\u0175\6\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u018f\25\36\20\0\10\36\4\0"+
    "\10\36\1\u0190\5\36\1\u0191\13\36\2\0\10\36\1\u0192"+
    "\22\36\20\0\10\36\4\0\32\36\2\0\14\36\1\u018f"+
    "\16\36\20\0\10\36\4\0\4\36\1\u0193\25\36\2\0"+
    "\33\36\20\0\10\36\4\0\32\36\2\0\5\36\1\u0194"+
    "\25\36\20\0\10\36\4\0\32\36\2\0\11\36\1\u0195"+
    "\21\36\20\0\10\36\4\0\32\36\2\0\14\36\1\u0196"+
    "\16\36\20\0\10\36\4\0\14\36\1\u0197\15\36\2\0"+
    "\33\36\20\0\10\36\4\0\2\36\1\u0198\27\36\2\0"+
    "\33\36\20\0\10\36\4\0\7\36\1\377\22\36\2\0"+
    "\33\36\20\0\10\36\4\0\15\36\1\u0199\14\36\2\0"+
    "\33\36\20\0\10\36\4\0\4\36\1\u019a\25\36\2\0"+
    "\33\36\20\0\10\36\4\0\13\36\1\u019b\16\36\2\0"+
    "\33\36\20\0\10\36\4\0\16\36\1\u019c\13\36\2\0"+
    "\33\36\20\0\10\36\4\0\15\36\1\u019d\14\36\2\0"+
    "\33\36\20\0\10\36\4\0\32\36\2\0\5\36\1\u019e"+
    "\25\36\20\0\10\36\4\0\16\36\1\u019f\1\36\1\u01a0"+
    "\11\36\2\0\33\36\20\0\10\36\4\0\1\u01a1\31\36"+
    "\2\0\33\36\20\0\10\36\4\0\24\36\1\u01a2\5\36"+
    "\2\0\33\36\20\0\10\36\4\0\26\36\1\u01a3\3\36"+
    "\2\0\33\36\20\0\10\36\4\0\21\36\1\u0100\10\36"+
    "\2\0\33\36\20\0\10\36\4\0\32\36\2\0\24\36"+
    "\1\u01a4\6\36\20\0\10\36\4\0\32\36\2\0\5\36"+
    "\1\u01a5\25\36\20\0\10\36\4\0\32\36\2\0\16\36"+
    "\1\u01a6\14\36\20\0\10\36\4\0\32\36\2\0\11\36"+
    "\1\u01a7\21\36\20\0\10\36\4\0\32\36\2\0\14\36"+
    "\1\u01a8\16\36\20\0\10\36\4\0\32\36\2\0\1\36"+
    "\1\u01a9\31\36\20\0\10\36\4\0\32\36\2\0\5\36"+
    "\1\u01aa\25\36\20\0\10\36\4\0\32\36\2\0\5\36"+
    "\1\251\25\36\20\0\10\36\4\0\32\36\2\0\3\36"+
    "\1\u01ab\27\36\20\0\10\36\4\0\32\36\2\0\22\36"+
    "\1\u01aa\10\36\20\0\10\36\4\0\32\36\2\0\23\36"+
    "\1\u01ac\7\36\20\0\10\36\4\0\32\36\2\0\20\36"+
    "\1\u01ad\12\36\20\0\10\36\4\0\32\36\2\0\23\36"+
    "\1\u01ae\1\u01af\6\36\20\0\10\36\4\0\32\36\2\0"+
    "\11\36\1\u01b0\21\36\20\0\10\36\4\0\32\36\2\0"+
    "\1\36\1\u01b1\31\36\20\0\10\36\4\0\32\36\2\0"+
    "\2\36\1\u01b2\30\36\20\0\10\36\4\0\32\36\2\0"+
    "\6\36\1\251\24\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u01b3\25\36\20\0\10\36\4\0\32\36\2\0"+
    "\15\36\1\u01b4\15\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u01b5\25\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u01b6\25\36\20\0\10\36\4\0\32\36\2\0"+
    "\1\36\1\u01b7\31\36\20\0\10\36\4\0\32\36\2\0"+
    "\1\36\1\u01b8\31\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u01b9\25\36\20\0\10\36\4\0\32\36\2\0"+
    "\15\36\1\u01ba\15\36\20\0\10\36\4\0\32\36\2\0"+
    "\2\36\1\u01bb\30\36\20\0\10\36\4\0\32\36\2\0"+
    "\14\36\1\u01bc\2\36\1\u01bd\13\36\20\0\10\36\4\0"+
    "\32\36\2\0\24\36\1\u01be\6\36\20\0\1\36\1\u01bf"+
    "\1\36\1\u01c0\2\36\1\u01c1\1\u01aa\4\0\32\36\2\0"+
    "\5\36\1\u01c2\25\36\106\0\1\u01c3\34\0\10\36\4\0"+
    "\32\36\2\0\2\36\1\u01c4\30\36\20\0\10\36\4\0"+
    "\32\36\2\0\7\36\1\u01aa\23\36\20\0\10\36\4\0"+
    "\32\36\2\0\11\36\1\u01c5\21\36\20\0\10\36\4\0"+
    "\32\36\2\0\14\36\1\u01c6\16\36\3\0\1\u01c7\14\0"+
    "\10\36\4\0\32\36\2\0\33\36\20\0\10\36\4\0"+
    "\32\36\2\0\13\36\1\u01c8\17\36\20\0\10\36\4\0"+
    "\32\36\2\0\23\36\1\u01c9\7\36\20\0\10\36\4\0"+
    "\32\36\2\0\16\36\1\u01ca\7\36\1\u01cb\4\36\20\0"+
    "\10\36\4\0\32\36\2\0\24\36\1\u01cc\6\36\20\0"+
    "\10\36\4\0\32\36\2\0\14\36\1\u01cd\16\36\20\0"+
    "\10\36\4\0\32\36\2\0\23\36\1\u01ce\7\36\20\0"+
    "\10\36\4\0\32\36\2\0\25\36\1\u01cf\5\36\20\0"+
    "\10\36\4\0\32\36\2\0\25\36\1\u01d0\5\36\20\0"+
    "\10\36\4\0\32\36\2\0\6\36\1\171\24\36\20\0"+
    "\10\36\4\0\32\36\2\0\22\36\1\u01b8\10\36\20\0"+
    "\10\36\4\0\32\36\2\0\24\36\1\u01d1\6\36\20\0"+
    "\10\36\4\0\32\36\2\0\11\36\1\u01d2\21\36\20\0"+
    "\10\36\4\0\32\36\2\0\24\36\1\u01d3\6\36\20\0"+
    "\10\36\4\0\32\36\2\0\3\36\1\u01d4\27\36\20\0"+
    "\10\36\4\0\32\36\2\0\23\36\1\171\7\36\20\0"+
    "\10\36\4\0\32\36\2\0\17\36\1\u01d5\13\36\20\0"+
    "\10\36\4\0\32\36\2\0\16\36\1\u01d6\14\36\20\0"+
    "\10\36\4\0\32\36\2\0\4\36\1\u01d7\26\36\20\0"+
    "\10\36\4\0\32\36\2\0\1\36\1\u01d8\31\36\20\0"+
    "\10\36\4\0\32\36\2\0\14\36\1\u01d9\16\36\20\0"+
    "\10\36\4\0\32\36\2\0\10\36\1\u0157\22\36\20\0"+
    "\10\36\4\0\32\36\2\0\14\36\1\u01da\16\36\36\0"+
    "\1\u01db\104\0\10\36\4\0\21\36\1\u01dc\10\36\2\0"+
    "\33\36\20\0\10\36\4\0\32\36\2\0\1\36\1\u01dd"+
    "\31\36\20\0\10\36\4\0\32\36\2\0\5\36\1\u01de"+
    "\25\36\20\0\10\36\4\0\32\36\2\0\23\36\1\u01df"+
    "\7\36\20\0\10\36\4\0\32\36\2\0\14\36\1\u01e0"+
    "\16\36\20\0\10\36\4\0\24\36\1\u01e1\5\36\2\0"+
    "\33\36\20\0\10\36\4\0\4\36\1\u01e2\25\36\2\0"+
    "\33\36\20\0\10\36\4\0\32\36\2\0\6\36\1\u0110"+
    "\24\36\20\0\10\36\4\0\32\36\2\0\14\36\1\u0110"+
    "\16\36\20\0\10\36\4\0\32\36\2\0\5\36\1\u0168"+
    "\25\36\20\0\10\36\4\0\12\36\1\u01e3\17\36\2\0"+
    "\33\36\20\0\10\36\4\0\14\36\1\u01e4\15\36\2\0"+
    "\33\36\20\0\10\36\4\0\23\36\1\u01e5\6\36\2\0"+
    "\33\36\20\0\10\36\4\0\23\36\1\u01e6\6\36\2\0"+
    "\33\36\20\0\10\36\4\0\32\36\2\0\22\36\1\326"+
    "\10\36\20\0\10\36\4\0\1\36\1\u01e7\30\36\2\0"+
    "\33\36\20\0\10\36\4\0\23\36\1\u01e8\6\36\2\0"+
    "\33\36\20\0\10\36\4\0\10\36\1\u01e9\21\36\2\0"+
    "\33\36\20\0\10\36\4\0\32\36\2\0\7\36\1\u01ea"+
    "\23\36\20\0\10\36\4\0\32\36\2\0\3\36\1\u01eb"+
    "\27\36\20\0\10\36\4\0\23\36\1\u01ec\6\36\2\0"+
    "\33\36\20\0\10\36\4\0\32\36\2\0\5\36\1\u0130"+
    "\25\36\20\0\10\36\4\0\32\36\2\0\22\36\1\u01ed"+
    "\10\36\20\0\10\36\4\0\32\36\2\0\24\36\1\u01ee"+
    "\6\36\20\0\10\36\4\0\4\36\1\u019c\25\36\2\0"+
    "\33\36\20\0\10\36\4\0\10\36\1\u01ef\21\36\2\0"+
    "\33\36\3\0\1\u01f0\14\0\10\36\4\0\32\36\2\0"+
    "\33\36\20\0\10\36\4\0\32\36\2\0\16\36\1\u01f1"+
    "\14\36\20\0\10\36\4\0\17\36\1\u01f2\12\36\2\0"+
    "\33\36\20\0\10\36\4\0\32\36\2\0\31\36\1\u01f3"+
    "\1\36\20\0\10\36\4\0\32\36\2\0\15\36\1\u01f4"+
    "\15\36\20\0\10\36\4\0\15\36\1\u01f5\14\36\2\0"+
    "\33\36\20\0\10\36\4\0\32\36\2\0\14\36\1\u01f6"+
    "\16\36\20\0\10\36\4\0\27\36\1\u01f7\2\36\2\0"+
    "\33\36\20\0\10\36\4\0\21\36\1\u0188\10\36\2\0"+
    "\33\36\20\0\10\36\4\0\21\36\1\u01f8\10\36\2\0"+
    "\33\36\3\0\1\u01f9\14\0\10\36\4\0\32\36\2\0"+
    "\33\36\20\0\10\36\4\0\23\36\1\u0119\6\36\2\0"+
    "\33\36\20\0\10\36\4\0\32\36\2\0\14\36\1\u01fa"+
    "\16\36\20\0\10\36\4\0\10\36\1\u01fb\5\36\1\u01fc"+
    "\13\36\2\0\33\36\20\0\10\36\4\0\32\36\2\0"+
    "\1\36\1\u01fd\31\36\20\0\10\36\4\0\16\36\1\u01fe"+
    "\13\36\2\0\23\36\1\u01ff\7\36\20\0\10\36\4\0"+
    "\32\36\2\0\17\36\1\u0200\13\36\20\0\10\36\4\0"+
    "\32\36\2\0\16\36\1\u0201\14\36\20\0\10\36\4\0"+
    "\32\36\2\0\26\36\1\u0202\4\36\20\0\10\36\4\0"+
    "\32\36\2\0\11\36\1\u0203\21\36\20\0\10\36\4\0"+
    "\21\36\1\u01f2\10\36\2\0\33\36\20\0\10\36\4\0"+
    "\32\36\2\0\3\36\1\u01b8\27\36\20\0\10\36\4\0"+
    "\32\36\2\0\17\36\1\u0204\13\36\20\0\10\36\4\0"+
    "\32\36\2\0\23\36\1\u0205\7\36\20\0\10\36\4\0"+
    "\1\u0206\31\36\2\0\33\36\20\0\10\36\4\0\4\36"+
    "\1\u0207\25\36\2\0\33\36\20\0\10\36\4\0\24\36"+
    "\1\u0208\5\36\2\0\33\36\20\0\10\36\4\0\2\36"+
    "\1\u0209\27\36\2\0\33\36\20\0\10\36\4\0\4\36"+
    "\1\u020a\25\36\2\0\33\36\20\0\10\36\4\0\2\36"+
    "\1\u020b\27\36\2\0\33\36\20\0\10\36\4\0\15\36"+
    "\1\u020c\14\36\2\0\33\36\20\0\10\36\4\0\24\36"+
    "\1\u020d\5\36\2\0\33\36\20\0\10\36\4\0\23\36"+
    "\1\u020e\6\36\2\0\33\36\20\0\10\36\4\0\4\36"+
    "\1\u020f\25\36\2\0\33\36\20\0\10\36\4\0\32\36"+
    "\2\0\22\36\1\u0210\10\36\20\0\10\36\4\0\32\36"+
    "\2\0\22\36\1\u0211\10\36\20\0\10\36\4\0\32\36"+
    "\2\0\3\36\1\u0212\27\36\20\0\10\36\4\0\32\36"+
    "\2\0\24\36\1\u0212\6\36\20\0\10\36\4\0\32\36"+
    "\2\0\5\36\1\u0213\25\36\20\0\10\36\4\0\32\36"+
    "\2\0\13\36\1\353\17\36\20\0\10\36\4\0\32\36"+
    "\2\0\10\36\1\u01ed\22\36\20\0\10\36\4\0\32\36"+
    "\2\0\23\36\1\u0214\7\36\20\0\10\36\4\0\32\36"+
    "\2\0\14\36\1\u0215\16\36\20\0\10\36\4\0\32\36"+
    "\2\0\24\36\1\u0216\6\36\20\0\10\36\4\0\32\36"+
    "\2\0\11\36\1\u0217\21\36\20\0\10\36\4\0\32\36"+
    "\2\0\15\36\1\u0218\15\36\20\0\10\36\4\0\32\36"+
    "\2\0\25\36\1\u0219\5\36\20\0\10\36\4\0\32\36"+
    "\2\0\14\36\1\u0127\16\36\20\0\10\36\4\0\32\36"+
    "\2\0\20\36\1\u021a\12\36\20\0\10\36\4\0\32\36"+
    "\2\0\16\36\1\u021b\14\36\20\0\10\36\4\0\32\36"+
    "\2\0\14\36\1\u021c\16\36\20\0\10\36\4\0\32\36"+
    "\2\0\24\36\1\u01aa\6\36\20\0\10\36\4\0\32\36"+
    "\2\0\1\36\1\144\31\36\20\0\10\36\4\0\32\36"+
    "\2\0\1\36\1\u021d\31\36\20\0\10\36\4\0\32\36"+
    "\2\0\5\36\1\u021e\25\36\20\0\10\36\4\0\32\36"+
    "\2\0\22\36\1\u021f\10\36\20\0\10\36\4\0\32\36"+
    "\2\0\1\36\1\u0220\31\36\20\0\6\36\1\u01aa\1\36"+
    "\4\0\32\36\2\0\33\36\20\0\2\36\1\u01aa\5\36"+
    "\4\0\32\36\2\0\33\36\20\0\4\36\1\u01aa\3\36"+
    "\4\0\32\36\2\0\33\36\20\0\10\36\4\0\32\36"+
    "\2\0\22\36\1\u0221\10\36\107\0\1\u0222\33\0\10\36"+
    "\4\0\32\36\2\0\4\36\1\u0223\26\36\20\0\10\36"+
    "\4\0\32\36\2\0\26\36\1\u0224\4\36\20\0\10\36"+
    "\4\0\32\36\2\0\17\36\1\u0225\13\36\101\0\1\u0226"+
    "\41\0\10\36\4\0\32\36\2\0\1\36\1\u0227\31\36"+
    "\20\0\10\36\4\0\32\36\2\0\24\36\1\u0228\6\36"+
    "\20\0\10\36\4\0\32\36\2\0\1\36\1\u0229\31\36"+
    "\20\0\10\36\4\0\32\36\2\0\5\36\1\u022a\25\36"+
    "\20\0\10\36\4\0\32\36\2\0\11\36\1\u022b\21\36"+
    "\20\0\10\36\4\0\32\36\2\0\5\36\1\u01ed\25\36"+
    "\20\0\10\36\4\0\32\36\2\0\11\36\1\u022c\21\36"+
    "\20\0\10\36\4\0\32\36\2\0\22\36\1\u022d\10\36"+
    "\20\0\10\36\4\0\32\36\2\0\11\36\1\u022e\21\36"+
    "\20\0\10\36\4\0\32\36\2\0\3\36\1\u022f\12\36"+
    "\1\u0141\14\36\20\0\10\36\4\0\32\36\2\0\3\36"+
    "\1\u0230\27\36\20\0\10\36\4\0\32\36\2\0\10\36"+
    "\1\u0231\22\36\20\0\10\36\4\0\32\36\2\0\27\36"+
    "\1\u0232\3\36\20\0\10\36\4\0\32\36\2\0\23\36"+
    "\1\u0233\7\36\20\0\10\36\4\0\32\36\2\0\24\36"+
    "\1\u0234\6\36\20\0\10\36\4\0\32\36\2\0\5\36"+
    "\1\u0175\25\36\20\0\10\36\4\0\32\36\2\0\4\36"+
    "\1\u0235\26\36\52\0\1\u0236\70\0\10\36\4\0\32\36"+
    "\2\0\16\36\1\u0237\14\36\20\0\10\36\4\0\32\36"+
    "\2\0\23\36\1\u0238\7\36\20\0\10\36\4\0\32\36"+
    "\2\0\23\36\1\u0239\7\36\20\0\10\36\4\0\17\36"+
    "\1\u023a\12\36\2\0\33\36\20\0\10\36\4\0\4\36"+
    "\1\u023b\25\36\2\0\33\36\20\0\10\36\4\0\15\36"+
    "\1\u023c\14\36\2\0\33\36\20\0\10\36\4\0\21\36"+
    "\1\u023d\10\36\2\0\33\36\20\0\10\36\4\0\4\36"+
    "\1\u0143\25\36\2\0\33\36\20\0\10\36\4\0\1\u023e"+
    "\31\36\2\0\33\36\20\0\10\36\4\0\4\36\1\u0130"+
    "\25\36\2\0\33\36\20\0\10\36\4\0\15\36\1\u023f"+
    "\14\36\2\0\33\36\20\0\10\36\4\0\32\36\2\0"+
    "\1\36\1\u0240\31\36\20\0\10\36\4\0\32\36\2\0"+
    "\24\36\1\u0241\6\36\20\0\10\36\4\0\22\36\1\251"+
    "\7\36\2\0\33\36\20\0\10\36\4\0\6\36\1\u0242"+
    "\23\36\2\0\33\36\52\0\1\u0243\70\0\10\36\4\0"+
    "\32\36\2\0\4\36\1\u0110\26\36\3\0\1\u0244\14\0"+
    "\10\36\4\0\32\36\2\0\33\36\20\0\10\36\4\0"+
    "\32\36\2\0\20\36\1\u0245\12\36\20\0\10\36\4\0"+
    "\32\36\2\0\14\36\1\u0246\16\36\20\0\10\36\4\0"+
    "\6\36\1\251\23\36\2\0\33\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u0247\25\36\20\0\10\36\4\0"+
    "\23\36\1\u0186\6\36\2\0\33\36\45\0\1\u0248\75\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\u0249\25\36\20\0"+
    "\10\36\4\0\32\36\2\0\16\36\1\u024a\14\36\20\0"+
    "\10\36\4\0\32\36\2\0\26\36\1\u024b\4\36\20\0"+
    "\10\36\4\0\32\36\2\0\23\36\1\u0154\7\36\20\0"+
    "\10\36\4\0\32\36\2\0\6\36\1\u024c\24\36\20\0"+
    "\10\36\4\0\32\36\2\0\20\36\1\u024d\12\36\20\0"+
    "\10\36\4\0\32\36\2\0\27\36\1\u024e\3\36\20\0"+
    "\10\36\4\0\32\36\2\0\10\36\1\u024f\22\36\20\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\u0250\25\36\20\0"+
    "\10\36\4\0\32\36\2\0\16\36\1\u0251\14\36\20\0"+
    "\10\36\4\0\32\36\2\0\16\36\1\317\14\36\20\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\262\25\36\20\0"+
    "\10\36\4\0\21\36\1\u0252\10\36\2\0\33\36\20\0"+
    "\10\36\4\0\3\36\1\u0253\26\36\2\0\33\36\20\0"+
    "\10\36\4\0\14\36\1\u0119\15\36\2\0\33\36\20\0"+
    "\10\36\4\0\23\36\1\u0254\6\36\2\0\33\36\20\0"+
    "\10\36\4\0\1\u0170\31\36\2\0\33\36\3\0\1\u0255"+
    "\14\0\10\36\4\0\32\36\2\0\33\36\20\0\10\36"+
    "\4\0\4\36\1\u01e3\25\36\2\0\33\36\20\0\10\36"+
    "\4\0\4\36\1\u0116\25\36\2\0\33\36\20\0\10\36"+
    "\4\0\22\36\1\u0186\7\36\2\0\33\36\20\0\10\36"+
    "\4\0\32\36\2\0\1\36\1\u0256\31\36\20\0\10\36"+
    "\4\0\32\36\2\0\24\36\1\u0157\6\36\20\0\10\36"+
    "\4\0\32\36\2\0\1\36\1\u0257\31\36\20\0\10\36"+
    "\4\0\32\36\2\0\5\36\1\u0258\25\36\20\0\10\36"+
    "\4\0\32\36\2\0\16\36\1\u0259\14\36\20\0\10\36"+
    "\4\0\32\36\2\0\1\36\1\u025a\31\36\20\0\10\36"+
    "\4\0\32\36\2\0\14\36\1\u025b\16\36\20\0\10\36"+
    "\4\0\32\36\2\0\24\36\1\u01ed\6\36\20\0\10\36"+
    "\4\0\32\36\2\0\4\36\1\u025c\26\36\20\0\10\36"+
    "\4\0\32\36\2\0\14\36\1\u025d\16\36\20\0\10\36"+
    "\4\0\32\36\2\0\14\36\1\u025e\16\36\20\0\10\36"+
    "\4\0\32\36\2\0\15\36\1\u025f\15\36\20\0\10\36"+
    "\4\0\32\36\2\0\24\36\1\u01ba\6\36\20\0\10\36"+
    "\4\0\32\36\2\0\16\36\1\u0260\14\36\20\0\10\36"+
    "\4\0\32\36\2\0\6\36\1\u0261\24\36\114\0\1\u0262"+
    "\26\0\10\36\4\0\32\36\2\0\1\36\1\u01d7\31\36"+
    "\20\0\10\36\4\0\32\36\2\0\5\36\1\u01ba\25\36"+
    "\20\0\10\36\4\0\32\36\2\0\3\36\1\u01bb\27\36"+
    "\106\0\1\u0263\34\0\10\36\4\0\32\36\2\0\7\36"+
    "\1\u0264\23\36\20\0\10\36\4\0\32\36\2\0\24\36"+
    "\1\u0265\6\36\20\0\10\36\4\0\32\36\2\0\3\36"+
    "\1\u0266\27\36\20\0\10\36\4\0\32\36\2\0\3\36"+
    "\1\u025e\27\36\20\0\10\36\4\0\32\36\2\0\22\36"+
    "\1\u0267\10\36\20\0\10\36\4\0\32\36\2\0\16\36"+
    "\1\u0235\14\36\20\0\10\36\4\0\32\36\2\0\3\36"+
    "\1\u0216\27\36\20\0\10\36\4\0\32\36\2\0\24\36"+
    "\1\u0268\6\36\20\0\10\36\4\0\32\36\2\0\10\36"+
    "\1\251\22\36\20\0\10\36\4\0\32\36\2\0\22\36"+
    "\1\u0269\10\36\20\0\10\36\4\0\32\36\2\0\11\36"+
    "\1\u026a\21\36\20\0\10\36\4\0\32\36\2\0\11\36"+
    "\1\u026b\21\36\51\0\1\u026c\71\0\10\36\4\0\32\36"+
    "\2\0\4\36\1\u026d\26\36\20\0\10\36\4\0\32\36"+
    "\2\0\23\36\1\u026e\7\36\20\0\10\36\4\0\32\36"+
    "\2\0\17\36\1\262\13\36\20\0\10\36\4\0\15\36"+
    "\1\u026f\14\36\2\0\33\36\20\0\10\36\4\0\1\u0270"+
    "\31\36\2\0\33\36\20\0\10\36\4\0\22\36\1\u0271"+
    "\7\36\2\0\33\36\20\0\10\36\4\0\2\36\1\u0189"+
    "\27\36\2\0\33\36\20\0\10\36\4\0\32\36\2\0"+
    "\24\36\1\u0272\6\36\20\0\10\36\4\0\2\36\1\u0273"+
    "\27\36\2\0\33\36\20\0\10\36\4\0\15\36\1\u0274"+
    "\14\36\2\0\33\36\60\0\1\u0275\77\0\1\u0276\105\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\u024c\25\36\20\0"+
    "\10\36\4\0\15\36\1\u0277\14\36\2\0\33\36\20\0"+
    "\10\36\4\0\32\36\2\0\23\36\1\u0278\7\36\52\0"+
    "\1\u0279\70\0\10\36\4\0\32\36\2\0\10\36\1\u027a"+
    "\22\36\20\0\10\36\4\0\32\36\2\0\5\36\1\u027b"+
    "\25\36\20\0\10\36\4\0\32\36\2\0\1\36\1\u027c"+
    "\31\36\20\0\10\36\4\0\32\36\2\0\11\36\1\127"+
    "\21\36\20\0\10\36\4\0\32\36\2\0\5\36\1\u027d"+
    "\25\36\20\0\10\36\4\0\32\36\2\0\22\36\1\u027e"+
    "\10\36\20\0\10\36\4\0\32\36\2\0\7\36\1\u018f"+
    "\23\36\20\0\10\36\4\0\30\36\1\u0274\1\36\2\0"+
    "\33\36\20\0\10\36\4\0\24\36\1\u027f\5\36\2\0"+
    "\33\36\34\0\1\u0280\106\0\10\36\4\0\32\36\2\0"+
    "\3\36\1\u01ae\27\36\20\0\10\36\4\0\32\36\2\0"+
    "\16\36\1\u01aa\14\36\20\0\10\36\4\0\32\36\2\0"+
    "\30\36\1\u01aa\2\36\20\0\10\36\4\0\32\36\2\0"+
    "\25\36\1\u0281\5\36\20\0\10\36\4\0\32\36\2\0"+
    "\14\36\1\u01aa\16\36\20\0\10\36\4\0\32\36\2\0"+
    "\24\36\1\u025e\6\36\20\0\10\36\4\0\32\36\2\0"+
    "\23\36\1\u0282\7\36\20\0\10\36\4\0\32\36\2\0"+
    "\31\36\1\u01b3\1\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u0283\25\36\20\0\10\36\4\0\32\36\2\0"+
    "\3\36\1\u0284\27\36\20\0\10\36\4\0\32\36\2\0"+
    "\1\36\1\u0285\31\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u0286\25\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u025e\25\36\20\0\10\36\4\0\32\36\2\0"+
    "\24\36\1\u0287\6\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u0288\25\36\20\0\10\36\4\0\32\36\2\0"+
    "\6\36\1\u0289\24\36\20\0\10\36\4\0\32\36\2\0"+
    "\17\36\1\u028a\13\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u028b\25\36\20\0\10\36\4\0\32\36\2\0"+
    "\14\36\1\u028c\16\36\56\0\1\u028d\64\0\10\36\4\0"+
    "\32\36\2\0\14\36\1\u028e\16\36\20\0\10\36\4\0"+
    "\16\36\1\u014e\13\36\2\0\33\36\20\0\10\36\4\0"+
    "\10\36\1\u028f\21\36\2\0\33\36\20\0\10\36\4\0"+
    "\4\36\1\u0290\25\36\2\0\33\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\171\25\36\20\0\10\36\4\0"+
    "\32\36\2\0\1\36\1\u0291\31\36\3\0\1\u0292\14\0"+
    "\10\36\4\0\32\36\2\0\33\36\57\0\1\u0293\127\0"+
    "\1\u0294\56\0\10\36\4\0\32\36\2\0\1\36\1\u0295"+
    "\31\36\44\0\1\u0296\76\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u0297\25\36\20\0\10\36\4\0\32\36\2\0"+
    "\22\36\1\u0298\10\36\20\0\10\36\4\0\32\36\2\0"+
    "\3\36\1\u0299\27\36\20\0\10\36\4\0\32\36\2\0"+
    "\22\36\1\u029a\10\36\20\0\10\36\4\0\32\36\2\0"+
    "\22\36\1\u029b\10\36\20\0\10\36\4\0\21\36\1\u029c"+
    "\10\36\2\0\33\36\47\0\1\u029d\73\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u029e\25\36\20\0\10\36\4\0"+
    "\32\36\2\0\16\36\1\u029f\14\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u02a0\25\36\20\0\10\36\4\0"+
    "\32\36\2\0\3\36\1\u02a1\27\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u02a2\25\36\20\0\10\36\4\0"+
    "\32\36\2\0\23\36\1\u01ba\7\36\20\0\10\36\4\0"+
    "\32\36\2\0\20\36\1\u0110\12\36\20\0\10\36\4\0"+
    "\32\36\2\0\16\36\1\u02a3\14\36\20\0\10\36\4\0"+
    "\32\36\2\0\16\36\1\u01ae\14\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u0216\25\36\57\0\1\u02a4\63\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\u02a5\25\36\20\0"+
    "\10\36\4\0\15\36\1\u02a6\14\36\2\0\33\36\20\0"+
    "\10\36\4\0\32\36\2\0\23\36\1\326\7\36\46\0"+
    "\1\u02a7\114\0\1\u02a8\102\0\10\36\4\0\32\36\2\0"+
    "\15\36\1\u02a9\15\36\51\0\1\u02aa\71\0\10\36\4\0"+
    "\32\36\2\0\22\36\1\u02ab\10\36\20\0\10\36\4\0"+
    "\32\36\2\0\22\36\1\u02ac\10\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u02ad\25\36\20\0\10\36\4\0"+
    "\32\36\2\0\11\36\1\u02ae\21\36\20\0\10\36\4\0"+
    "\32\36\2\0\11\36\1\u02af\21\36\20\0\10\36\4\0"+
    "\4\36\1\u01d7\25\36\2\0\33\36\47\0\1\u02b0\73\0"+
    "\10\36\4\0\32\36\2\0\24\36\1\u025c\6\36\20\0"+
    "\10\36\4\0\32\36\2\0\17\36\1\u02b1\13\36\20\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\u02b2\25\36\20\0"+
    "\10\36\4\0\32\36\2\0\4\36\1\u025e\26\36\20\0"+
    "\10\36\4\0\32\36\2\0\11\36\1\u02b3\21\36\55\0"+
    "\1\u02b4\65\0\10\36\4\0\32\36\2\0\22\36\1\u0278"+
    "\10\36\20\0\10\36\4\0\23\36\1\u01e3\6\36\2\0"+
    "\33\36\40\0\1\u02b5\137\0\1\u02b6\65\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u02b7\25\36\20\0\10\36\4\0"+
    "\32\36\2\0\11\36\1\u01ae\21\36\20\0\10\36\4\0"+
    "\32\36\2\0\11\36\1\u02b8\21\36\20\0\10\36\4\0"+
    "\32\36\2\0\24\36\1\u02b9\6\36\20\0\10\36\4\0"+
    "\32\36\2\0\4\36\1\u02b9\26\36\20\0\10\36\4\0"+
    "\32\36\2\0\6\36\1\u02ba\24\36\20\0\10\36\4\0"+
    "\32\36\2\0\32\36\1\u02bb\34\0\1\u02bc\152\0\1\u02bd"+
    "\41\0\1\u01f9\137\0\10\36\4\0\32\36\2\0\23\36"+
    "\1\u02be\7\36\20\0\10\36\4\0\32\36\2\0\4\36"+
    "\1\u028c\26\36\20\0\10\36\4\0\32\36\2\0\1\36"+
    "\1\u02bf\31\36\20\0\10\36\4\0\32\36\2\0\5\36"+
    "\1\u02c0\25\36\44\0\1\u02c1\76\0\10\36\4\0\32\36"+
    "\2\0\20\36\1\u02c2\12\36\20\0\10\36\4\0\32\36"+
    "\2\0\2\36\1\u02c3\30\36\20\0\10\36\4\0\32\36"+
    "\2\0\4\36\1\u0216\26\36\51\0\1\u02c4\71\0\10\36"+
    "\4\0\32\36\2\0\1\36\1\u02c5\31\36\20\0\10\36"+
    "\4\0\32\36\2\0\14\36\1\u02c6\16\36\57\0\1\u02c7"+
    "\63\0\10\36\4\0\32\36\2\0\3\36\1\u0245\27\36"+
    "\20\0\10\36\4\0\32\36\2\0\5\36\1\u0110\25\36"+
    "\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[52622];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\64\1\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\367\1\1\0\35\1"+
    "\1\0\145\1\1\0\3\1\1\0\23\1\1\0\24\1"+
    "\1\0\10\1\1\0\50\1\1\0\3\1\1\0\17\1"+
    "\1\0\14\1\2\0\3\1\1\0\14\1\1\0\14\1"+
    "\2\11\10\1\1\0\10\1\2\0\2\1\1\0\6\1"+
    "\1\0\14\1\1\0\4\1\2\0\1\11\1\1\1\0"+
    "\6\1\1\0\6\1\1\0\2\1\2\0\1\1\1\11"+
    "\5\1\1\11\3\1\3\0\5\1\1\0\1\11\3\1"+
    "\1\0\2\1\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[711];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    int keywords = 0;
    //List<String> identifiers = new ArrayList<String>();
    
    void printResult(String token, String text, int line, int column){
        keywords++;
        if (text.length() >= 8)
            System.out.printf("%s\t<= %s (Linea: %d, Columna: %d)\n", text, token, line+1, column+1);
        else
            System.out.printf("%s\t\t<= %s (Linea: %d, Columna: %d)\n", text, token, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    System.out.printf("----------------------------------------\n");
    System.out.printf("Numero total de palabras: %d.\n",keywords);
    System.out.printf("----------------------------------------\n");
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignore unmatched characters */
            }
          // fall through
          case 71: break;
          case 2:
            { printResult("Operador Logico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 72: break;
          case 3:
            { printResult("Comentario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 73: break;
          case 4:
            { printResult("Operador Aritmetico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 74: break;
          case 5:
            { printResult("Operador de Bits", yytext(), yyline, yycolumn);
            }
          // fall through
          case 75: break;
          case 6:
            { printResult("Separador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 76: break;
          case 7:
            { printResult("Numero", yytext(), yyline, yycolumn);
            }
          // fall through
          case 77: break;
          case 8:
            { printResult("Comparador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 78: break;
          case 9:
            { printResult("Asignador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 79: break;
          case 10:
            { printResult("Identificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 80: break;
          case 11:
            { printResult("Cadena", yytext(), yyline, yycolumn);
            }
          // fall through
          case 81: break;
          case 12:
            { printResult("Caracter", yytext(), yyline, yycolumn);
            }
          // fall through
          case 82: break;
          case 13:
            { printResult("Referencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 83: break;
          case 14:
            { printResult("Renombrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 84: break;
          case 15:
            { printResult("Iterador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 85: break;
          case 16:
            { printResult("Condicional", yytext(), yyline, yycolumn);
            }
          // fall through
          case 86: break;
          case 17:
            { printResult("Operadot de Pertenencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 87: break;
          case 18:
            { printResult("Operador de identidad", yytext(), yyline, yycolumn);
            }
          // fall through
          case 88: break;
          case 19:
            { printResult("Añadir", yytext(), yyline, yycolumn);
            }
          // fall through
          case 89: break;
          case 20:
            { printResult("Ordenar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 90: break;
          case 21:
            { printResult("Almacenamiento", yytext(), yyline, yycolumn);
            }
          // fall through
          case 91: break;
          case 22:
            { printResult("Salida", yytext(), yyline, yycolumn);
            }
          // fall through
          case 92: break;
          case 23:
            { printResult("Get", yytext(), yyline, yycolumn);
            }
          // fall through
          case 93: break;
          case 24:
            { printResult("Variable", yytext(), yyline, yycolumn);
            }
          // fall through
          case 94: break;
          case 25:
            { printResult("Modificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 95: break;
          case 26:
            { printResult("Update", yytext(), yyline, yycolumn);
            }
          // fall through
          case 96: break;
          case 27:
            { printResult("Limite", yytext(), yyline, yycolumn);
            }
          // fall through
          case 97: break;
          case 28:
            { printResult("Funcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 98: break;
          case 29:
            { printResult("Borrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 99: break;
          case 30:
            { printResult("Tipo de dato", yytext(), yyline, yycolumn);
            }
          // fall through
          case 100: break;
          case 31:
            { printResult("Crear", yytext(), yyline, yycolumn);
            }
          // fall through
          case 101: break;
          case 32:
            { printResult("Intentar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 102: break;
          case 33:
            { printResult("Cast", yytext(), yyline, yycolumn);
            }
          // fall through
          case 103: break;
          case 34:
            { printResult("Ejecutar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 104: break;
          case 35:
            { printResult("GoTo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 105: break;
          case 36:
            { printResult("Insertar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 106: break;
          case 37:
            { printResult("Join", yytext(), yyline, yycolumn);
            }
          // fall through
          case 107: break;
          case 38:
            { printResult("Valor nulo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 108: break;
          case 39:
            { printResult("Booleano", yytext(), yyline, yycolumn);
            }
          // fall through
          case 109: break;
          case 40:
            { printResult("Vista", yytext(), yyline, yycolumn);
            }
          // fall through
          case 110: break;
          case 41:
            { printResult("Consequencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 111: break;
          case 42:
            { printResult("Enum", yytext(), yyline, yycolumn);
            }
          // fall through
          case 112: break;
          case 43:
            { printResult("Importar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 44:
            { printResult("Pasar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 114: break;
          case 45:
            { printResult("Alterar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 46:
            { printResult("Restriccion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 116: break;
          case 47:
            { printResult("Excepcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 117: break;
          case 48:
            { printResult("Evento", yytext(), yyline, yycolumn);
            }
          // fall through
          case 118: break;
          case 49:
            { printResult("Indice", yytext(), yyline, yycolumn);
            }
          // fall through
          case 119: break;
          case 50:
            { printResult("Tabla", yytext(), yyline, yycolumn);
            }
          // fall through
          case 120: break;
          case 51:
            { printResult("Union", yytext(), yyline, yycolumn);
            }
          // fall through
          case 121: break;
          case 52:
            { printResult("Asyncrono", yytext(), yyline, yycolumn);
            }
          // fall through
          case 122: break;
          case 53:
            { printResult("Clase", yytext(), yyline, yycolumn);
            }
          // fall through
          case 123: break;
          case 54:
            { printResult("Modificador de No Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 124: break;
          case 55:
            { printResult("Imprimir", yytext(), yyline, yycolumn);
            }
          // fall through
          case 125: break;
          case 56:
            { printResult("Regresar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 126: break;
          case 57:
            { printResult("Backup", yytext(), yyline, yycolumn);
            }
          // fall through
          case 127: break;
          case 58:
            { printResult("Columna", yytext(), yyline, yycolumn);
            }
          // fall through
          case 128: break;
          case 59:
            { printResult("Module", yytext(), yyline, yycolumn);
            }
          // fall through
          case 129: break;
          case 60:
            { printResult("Select", yytext(), yyline, yycolumn);
            }
          // fall through
          case 130: break;
          case 61:
            { printResult("Modificador de Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 131: break;
          case 62:
            { printResult("Rango", yytext(), yyline, yycolumn);
            }
          // fall through
          case 132: break;
          case 63:
            { printResult("AddHandler", yytext(), yyline, yycolumn);
            }
          // fall through
          case 133: break;
          case 64:
            { printResult("Erencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 134: break;
          case 65:
            { printResult("Paquete", yytext(), yyline, yycolumn);
            }
          // fall through
          case 135: break;
          case 66:
            { printResult("Database", yytext(), yyline, yycolumn);
            }
          // fall through
          case 136: break;
          case 67:
            { printResult("Continuar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 137: break;
          case 68:
            { printResult("Namespace", yytext(), yyline, yycolumn);
            }
          // fall through
          case 138: break;
          case 69:
            { printResult("Interface", yytext(), yyline, yycolumn);
            }
          // fall through
          case 139: break;
          case 70:
            { printResult("Operador de instancia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        lexer scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
