// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexer.flex

// User Code (Import dependencies or declare variables)

// import java.util.List;
// import java.util.Arrays;

/*TODO.
  - Finish the .csv file
  - Add the identifier token
  - Change the return values
   - Return the lexema found if the token has more than one lexema
   - Return the nothing if the token has only one lexema
   - Return the number of the identifier found (0),(1),(2),...
*/


@SuppressWarnings("fallthrough")
class lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\40\0\1\1\1\2\1\3\1\4\1\0\1\5\1\6"+
    "\1\7\2\10\1\11\1\12\1\10\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\23"+
    "\1\25\1\23\2\10\1\26\1\27\1\30\1\31\1\0"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\10\1\64\1\10\1\65\1\66\1\0"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\63\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\10\1\120\1\10\1\121\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\6\4\4\2\7\1\10\1\11\1\10\1\2\25\12"+
    "\1\5\22\12\2\5\1\10\1\0\1\13\1\11\1\2"+
    "\1\0\1\14\1\4\1\0\63\12\1\15\11\12\1\16"+
    "\10\12\1\17\1\12\1\20\1\21\5\12\1\2\23\12"+
    "\1\7\1\22\1\12\1\23\21\12\1\24\32\12\1\25"+
    "\2\12\1\26\24\12\1\27\1\30\10\12\1\16\4\12"+
    "\1\31\1\0\3\12\1\32\1\12\1\2\22\12\1\33"+
    "\1\31\5\12\1\0\15\12\1\34\6\12\1\16\10\12"+
    "\1\35\1\36\2\12\1\37\6\12\1\3\1\12\1\40"+
    "\4\12\1\41\16\12\1\42\1\43\5\12\1\44\10\12"+
    "\1\0\3\12\1\0\1\12\1\45\7\12\1\46\7\12"+
    "\1\27\3\12\1\0\1\47\2\12\1\15\3\12\1\50"+
    "\1\51\12\12\1\0\2\12\1\52\1\12\1\0\4\12"+
    "\1\53\1\12\1\54\5\12\1\55\1\12\1\56\1\57"+
    "\1\60\1\12\1\61\5\12\1\61\5\12\1\0\3\12"+
    "\1\0\1\12\1\62\11\12\1\57\2\12\1\63\1\0"+
    "\3\12\1\64\1\12\1\65\6\12\3\0\2\12\1\66"+
    "\1\0\10\12\1\67\3\12\1\21\1\20\10\12\1\0"+
    "\2\12\1\70\5\12\3\0\1\12\1\0\1\12\1\71"+
    "\3\12\1\72\6\12\1\0\2\12\1\73\1\12\2\0"+
    "\1\23\1\0\1\12\1\0\1\74\5\12\1\0\3\12"+
    "\2\0\1\36\1\54\1\12\1\75\1\12\1\0\1\76"+
    "\1\77\2\0\1\100\1\12\1\0\1\51\1\12\2\0"+
    "\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[579];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\122\0\u0148\0\u019a\0\u01ec"+
    "\0\122\0\u023e\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a"+
    "\0\244\0\u047c\0\u04ce\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668"+
    "\0\u06ba\0\u070c\0\u075e\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8"+
    "\0\u094a\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0ae4\0\u0b36\0\u0b88"+
    "\0\u0148\0\u0bda\0\u0c2c\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74\0\u0dc6"+
    "\0\u0e18\0\u0e6a\0\u0ebc\0\u0f0e\0\u0f60\0\u0fb2\0\u1004\0\u1056"+
    "\0\u10a8\0\u10fa\0\u114c\0\u119e\0\122\0\122\0\366\0\122"+
    "\0\122\0\122\0\u11f0\0\122\0\122\0\u1242\0\u1294\0\u12e6"+
    "\0\u1338\0\u138a\0\u13dc\0\u142e\0\u1480\0\u14d2\0\u1524\0\u1576"+
    "\0\u15c8\0\u161a\0\u166c\0\u16be\0\u1710\0\u1762\0\u17b4\0\u1806"+
    "\0\u1858\0\u18aa\0\u18fc\0\u194e\0\u19a0\0\u19f2\0\u1a44\0\u1a96"+
    "\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30\0\u1c82\0\u1cd4\0\u1d26"+
    "\0\u1d78\0\u1dca\0\u1e1c\0\u1e6e\0\u1ec0\0\u1f12\0\u1f64\0\u1fb6"+
    "\0\u2008\0\u205a\0\u20ac\0\u20fe\0\u2150\0\u21a2\0\u21f4\0\u2246"+
    "\0\u2298\0\u22ea\0\u233c\0\u238e\0\u23e0\0\u2432\0\u2484\0\u24d6"+
    "\0\u2528\0\u257a\0\u25cc\0\u261e\0\u2670\0\u26c2\0\u2714\0\u2766"+
    "\0\u27b8\0\u280a\0\u285c\0\u28ae\0\u0854\0\u2900\0\u2952\0\u29a4"+
    "\0\u29f6\0\u2a48\0\u2a9a\0\u2aec\0\u2b3e\0\u0854\0\u2b90\0\u2be2"+
    "\0\u2c34\0\u2c86\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20\0\u2e72"+
    "\0\u2ec4\0\u2f16\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u30b0\0\u3102"+
    "\0\u3154\0\u1242\0\u31a6\0\u31f8\0\u0854\0\u324a\0\u329c\0\u32ee"+
    "\0\u3340\0\u3392\0\u33e4\0\u3436\0\u3488\0\u34da\0\u352c\0\u357e"+
    "\0\u35d0\0\u3622\0\u3674\0\u36c6\0\u3718\0\u376a\0\u0854\0\u37bc"+
    "\0\u380e\0\u3860\0\u38b2\0\u3904\0\u3956\0\u39a8\0\u39fa\0\u3a4c"+
    "\0\u3a9e\0\u3af0\0\u3b42\0\u3b94\0\u3be6\0\u3c38\0\u3c8a\0\u3cdc"+
    "\0\u3d2e\0\u3d80\0\u3dd2\0\u3e24\0\u3e76\0\u3ec8\0\u3f1a\0\u3f6c"+
    "\0\u3fbe\0\u0854\0\u4010\0\u4062\0\u0854\0\u40b4\0\u4106\0\u4158"+
    "\0\u41aa\0\u41fc\0\u424e\0\u42a0\0\u42f2\0\u4344\0\u4396\0\u43e8"+
    "\0\u443a\0\u448c\0\u44de\0\u4530\0\u4582\0\u45d4\0\u4626\0\u4678"+
    "\0\u46ca\0\u471c\0\u0854\0\u476e\0\u47c0\0\u4812\0\u4864\0\u48b6"+
    "\0\u4908\0\u495a\0\u49ac\0\u49fe\0\u4a50\0\u4aa2\0\u4af4\0\u4b46"+
    "\0\u4b98\0\u4bea\0\u4c3c\0\u4c8e\0\u4ce0\0\u0854\0\u4d32\0\u4d84"+
    "\0\u4dd6\0\u4e28\0\u4e7a\0\u4ecc\0\u4f1e\0\u4f70\0\u4fc2\0\u5014"+
    "\0\u5066\0\u50b8\0\u510a\0\u515c\0\u51ae\0\u5200\0\u5252\0\u52a4"+
    "\0\u52f6\0\u5348\0\u0854\0\u0854\0\u539a\0\u53ec\0\u543e\0\u5490"+
    "\0\u54e2\0\u5534\0\u5586\0\u55d8\0\u562a\0\u567c\0\u56ce\0\u5720"+
    "\0\u5772\0\u57c4\0\u5816\0\u5868\0\u58ba\0\u590c\0\u595e\0\u0854"+
    "\0\u59b0\0\u5a02\0\u5a54\0\u5aa6\0\u5af8\0\u5b4a\0\u0854\0\u5b9c"+
    "\0\u5bee\0\u5c40\0\u5c92\0\u5ce4\0\u5d36\0\u5d88\0\u5dda\0\u0854"+
    "\0\u0854\0\u5e2c\0\u5e7e\0\u0854\0\u5ed0\0\u5f22\0\u5f74\0\u5fc6"+
    "\0\u6018\0\u606a\0\u0854\0\u60bc\0\u0854\0\u610e\0\u6160\0\u61b2"+
    "\0\u6204\0\u0854\0\u6256\0\u62a8\0\u62fa\0\u634c\0\u639e\0\u63f0"+
    "\0\u6442\0\u6494\0\u64e6\0\u6538\0\u658a\0\u65dc\0\u662e\0\u6680"+
    "\0\u0854\0\u0854\0\u66d2\0\u6724\0\u6776\0\u67c8\0\u681a\0\u0854"+
    "\0\u686c\0\u68be\0\u6910\0\u6962\0\u69b4\0\u6a06\0\u6a58\0\u6aaa"+
    "\0\u6afc\0\u6b4e\0\u6ba0\0\u6bf2\0\u6c44\0\u6c96\0\u0854\0\u6ce8"+
    "\0\u6d3a\0\u6d8c\0\u6dde\0\u6e30\0\u6e82\0\u6ed4\0\u0854\0\u6f26"+
    "\0\u6f78\0\u6fca\0\u701c\0\u706e\0\u70c0\0\u7112\0\u0854\0\u7164"+
    "\0\u71b6\0\u7208\0\u725a\0\u0854\0\u72ac\0\u72fe\0\u0854\0\u7350"+
    "\0\u73a2\0\u73f4\0\u0854\0\u0854\0\u7446\0\u7498\0\u74ea\0\u753c"+
    "\0\u758e\0\u75e0\0\u7632\0\u7684\0\u76d6\0\u7728\0\u777a\0\u77cc"+
    "\0\u781e\0\u0854\0\u7870\0\u78c2\0\u7914\0\u7966\0\u79b8\0\u7a0a"+
    "\0\u0854\0\u7a5c\0\u7aae\0\u7b00\0\u7b52\0\u7ba4\0\u7bf6\0\u7c48"+
    "\0\u0854\0\u7c9a\0\u0854\0\u0854\0\u0854\0\u7cec\0\u0854\0\u7d3e"+
    "\0\u7d90\0\u7de2\0\u7e34\0\u7e86\0\u7ed8\0\u7f2a\0\u7f7c\0\u7fce"+
    "\0\u8020\0\u8072\0\u80c4\0\u8116\0\u8168\0\u81ba\0\u820c\0\u825e"+
    "\0\u0854\0\u82b0\0\u8302\0\u8354\0\u83a6\0\u83f8\0\u844a\0\u849c"+
    "\0\u84ee\0\u8540\0\u52a4\0\u8592\0\u85e4\0\u0854\0\u8636\0\u8688"+
    "\0\u86da\0\u872c\0\u0854\0\u877e\0\u0854\0\u87d0\0\u8822\0\u8874"+
    "\0\u88c6\0\u8918\0\u896a\0\u89bc\0\u8a0e\0\u8a60\0\u8ab2\0\u8b04"+
    "\0\u0854\0\u8b56\0\u8ba8\0\u8bfa\0\u8c4c\0\u8c9e\0\u8cf0\0\u8d42"+
    "\0\u8d94\0\u8de6\0\u0854\0\u8e38\0\u8e8a\0\u8edc\0\122\0\122"+
    "\0\u8f2e\0\u8f80\0\u8fd2\0\u9024\0\u9076\0\u90c8\0\u911a\0\u916c"+
    "\0\u91be\0\u9210\0\u9262\0\u0854\0\u92b4\0\u9306\0\u9358\0\u93aa"+
    "\0\u93fc\0\u944e\0\u94a0\0\u94f2\0\u9544\0\u9596\0\u95e8\0\u0854"+
    "\0\u963a\0\u968c\0\u96de\0\u0854\0\u9730\0\u9782\0\u97d4\0\u9826"+
    "\0\u9878\0\u98ca\0\u991c\0\u996e\0\u99c0\0\u0854\0\u9a12\0\u9a64"+
    "\0\u9ab6\0\122\0\u9b08\0\u9b5a\0\u9bac\0\u0854\0\u9bfe\0\u9c50"+
    "\0\u9ca2\0\u9cf4\0\u9d46\0\u9d98\0\u9dea\0\u9e3c\0\u9e8e\0\u9ee0"+
    "\0\u9f32\0\122\0\122\0\u9f84\0\u0854\0\u9fd6\0\ua028\0\u0854"+
    "\0\u0854\0\ua07a\0\ua0cc\0\u0854\0\ua11e\0\ua170\0\122\0\ua1c2"+
    "\0\ua214\0\ua266\0\122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[579];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\11\1\15\1\16\7\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\36"+
    "\1\40\1\41\1\42\1\36\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\3\36\1\2\1\51\1\2\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\36\1\61\1\36"+
    "\1\62\1\36\1\63\1\64\1\65\1\36\1\66\1\67"+
    "\1\70\1\36\1\71\1\72\1\36\1\73\1\36\1\74"+
    "\1\75\151\0\1\76\72\0\3\77\1\100\3\77\1\0"+
    "\112\77\27\0\1\101\100\0\1\102\20\0\1\101\72\0"+
    "\3\103\1\0\3\103\1\104\54\103\1\0\35\103\11\0"+
    "\1\6\3\0\1\5\11\0\1\101\104\0\1\105\14\0"+
    "\1\101\105\0\1\105\13\0\1\101\103\0\1\5\3\0"+
    "\1\6\11\0\1\101\106\0\1\106\121\0\1\106\1\0"+
    "\10\17\122\0\1\51\1\76\121\0\1\76\1\51\122\0"+
    "\1\102\106\0\10\36\4\0\3\36\1\107\7\36\1\110"+
    "\1\36\1\111\4\36\1\112\7\36\2\0\4\36\1\113"+
    "\6\36\1\114\1\36\1\115\14\36\20\0\10\36\4\0"+
    "\1\116\3\36\1\117\25\36\2\0\30\36\1\120\1\36"+
    "\20\0\10\36\4\0\7\36\1\121\6\36\1\122\2\36"+
    "\1\123\10\36\2\0\1\36\1\124\30\36\20\0\10\36"+
    "\4\0\1\125\3\36\1\126\3\36\1\127\10\36\1\130"+
    "\10\36\2\0\5\36\1\131\3\36\1\132\20\36\20\0"+
    "\10\36\4\0\27\36\1\133\2\36\2\0\1\36\1\134"+
    "\30\36\20\0\10\36\4\0\10\36\1\135\5\36\1\136"+
    "\5\36\1\137\5\36\2\0\1\36\1\140\30\36\20\0"+
    "\10\36\4\0\21\36\1\141\10\36\2\0\32\36\20\0"+
    "\10\36\4\0\1\142\31\36\2\0\32\36\20\0\10\36"+
    "\4\0\15\36\1\143\14\36\2\0\32\36\20\0\10\36"+
    "\4\0\16\36\1\144\13\36\2\0\32\36\20\0\10\36"+
    "\4\0\32\36\2\0\32\36\20\0\10\36\4\0\4\36"+
    "\1\145\3\36\1\146\21\36\2\0\32\36\20\0\10\36"+
    "\4\0\32\36\2\0\16\36\1\147\5\36\1\150\5\36"+
    "\20\0\10\36\4\0\21\36\1\151\2\36\1\152\5\36"+
    "\2\0\32\36\20\0\10\36\4\0\21\36\1\153\10\36"+
    "\2\0\32\36\20\0\10\36\4\0\10\36\1\154\5\36"+
    "\1\155\13\36\2\0\32\36\20\0\10\36\4\0\4\36"+
    "\1\156\25\36\2\0\32\36\20\0\10\36\4\0\1\157"+
    "\15\36\1\160\2\36\1\161\10\36\2\0\21\36\1\162"+
    "\10\36\20\0\10\36\4\0\15\36\1\163\1\36\1\164"+
    "\12\36\2\0\32\36\20\0\10\36\4\0\1\165\7\36"+
    "\1\166\21\36\2\0\32\36\20\0\10\36\4\0\7\36"+
    "\1\167\22\36\2\0\32\36\20\0\10\36\4\0\32\36"+
    "\2\0\2\36\1\170\12\36\1\171\4\36\1\172\3\36"+
    "\1\173\3\36\20\0\10\36\4\0\32\36\2\0\16\36"+
    "\1\174\2\36\1\175\6\36\1\176\1\36\20\0\10\36"+
    "\4\0\32\36\2\0\1\36\1\177\6\36\1\200\2\36"+
    "\1\201\2\36\1\202\13\36\20\0\10\36\4\0\32\36"+
    "\2\0\1\36\1\176\3\36\1\203\10\36\1\204\13\36"+
    "\20\0\10\36\4\0\32\36\2\0\13\36\1\205\1\36"+
    "\1\206\11\36\1\207\2\36\20\0\10\36\4\0\32\36"+
    "\2\0\1\36\1\140\7\36\1\210\1\36\1\211\2\36"+
    "\1\212\2\36\1\213\10\36\20\0\10\36\4\0\32\36"+
    "\2\0\13\36\1\214\16\36\20\0\10\36\4\0\32\36"+
    "\2\0\6\36\1\215\5\36\1\216\1\217\4\36\1\220"+
    "\7\36\20\0\10\36\4\0\32\36\2\0\1\36\1\221"+
    "\14\36\1\222\13\36\20\0\10\36\4\0\32\36\2\0"+
    "\1\36\1\223\3\36\1\224\10\36\1\225\5\36\1\150"+
    "\5\36\20\0\10\36\4\0\32\36\2\0\21\36\1\226"+
    "\10\36\20\0\10\36\4\0\32\36\2\0\1\36\1\227"+
    "\17\36\1\230\2\36\1\231\5\36\20\0\10\36\4\0"+
    "\32\36\2\0\1\36\1\232\3\36\1\233\24\36\20\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\234\2\36\1\235"+
    "\12\36\1\236\1\237\1\36\1\240\1\36\1\241\1\36"+
    "\20\0\10\36\4\0\32\36\2\0\10\36\1\242\1\243"+
    "\7\36\1\244\10\36\20\0\10\36\4\0\32\36\2\0"+
    "\1\36\1\245\14\36\1\246\13\36\20\0\10\36\4\0"+
    "\32\36\2\0\10\36\1\247\1\250\20\36\20\0\10\36"+
    "\4\0\32\36\2\0\11\36\1\251\20\36\31\0\1\101"+
    "\70\0\1\102\10\0\1\104\130\0\10\252\112\0\10\36"+
    "\4\0\3\36\1\253\26\36\2\0\32\36\20\0\10\36"+
    "\4\0\13\36\1\215\7\36\1\254\6\36\2\0\32\36"+
    "\20\0\10\36\4\0\30\36\1\215\1\36\2\0\32\36"+
    "\20\0\10\36\4\0\2\36\1\255\27\36\2\0\32\36"+
    "\20\0\10\36\4\0\32\36\2\0\4\36\1\256\25\36"+
    "\20\0\10\36\4\0\32\36\2\0\11\36\1\257\20\36"+
    "\20\0\10\36\4\0\32\36\2\0\4\36\1\260\25\36"+
    "\20\0\10\36\4\0\2\36\1\261\27\36\2\0\32\36"+
    "\20\0\10\36\4\0\23\36\1\262\6\36\2\0\32\36"+
    "\20\0\10\36\4\0\21\36\1\263\3\36\1\264\4\36"+
    "\2\0\32\36\20\0\10\36\4\0\4\36\1\265\25\36"+
    "\2\0\32\36\20\0\10\36\4\0\13\36\1\266\1\36"+
    "\1\267\14\36\2\0\32\36\20\0\10\36\4\0\4\36"+
    "\1\270\25\36\2\0\32\36\20\0\10\36\4\0\32\36"+
    "\2\0\13\36\1\271\16\36\20\0\10\36\4\0\23\36"+
    "\1\272\6\36\2\0\32\36\20\0\10\36\4\0\13\36"+
    "\1\273\6\36\1\112\7\36\2\0\32\36\20\0\10\36"+
    "\4\0\22\36\1\274\7\36\2\0\32\36\20\0\10\36"+
    "\4\0\16\36\1\275\13\36\2\0\32\36\20\0\10\36"+
    "\4\0\32\36\2\0\13\36\1\276\16\36\20\0\10\36"+
    "\4\0\32\36\2\0\14\36\1\277\4\36\1\300\10\36"+
    "\20\0\10\36\4\0\4\36\1\301\3\36\1\302\21\36"+
    "\2\0\32\36\20\0\10\36\4\0\32\36\2\0\3\36"+
    "\1\303\26\36\20\0\10\36\4\0\27\36\1\304\2\36"+
    "\2\0\32\36\20\0\10\36\4\0\21\36\1\305\10\36"+
    "\2\0\32\36\20\0\10\36\4\0\13\36\1\306\16\36"+
    "\2\0\32\36\20\0\10\36\4\0\32\36\2\0\13\36"+
    "\1\307\16\36\20\0\10\36\4\0\16\36\1\310\13\36"+
    "\2\0\32\36\20\0\10\36\4\0\25\36\1\311\4\36"+
    "\2\0\32\36\20\0\10\36\4\0\3\36\1\312\11\36"+
    "\1\313\4\36\1\314\1\315\6\36\2\0\32\36\20\0"+
    "\10\36\4\0\10\36\1\316\21\36\2\0\32\36\20\0"+
    "\10\36\4\0\5\36\1\317\24\36\2\0\32\36\20\0"+
    "\10\36\4\0\12\36\1\320\1\36\1\321\15\36\2\0"+
    "\32\36\20\0\10\36\4\0\32\36\2\0\15\36\1\322"+
    "\14\36\20\0\10\36\4\0\32\36\2\0\13\36\1\323"+
    "\16\36\20\0\10\36\4\0\3\36\1\324\26\36\2\0"+
    "\32\36\20\0\10\36\4\0\23\36\1\313\6\36\2\0"+
    "\32\36\20\0\10\36\4\0\10\36\1\325\5\36\1\326"+
    "\13\36\2\0\32\36\20\0\10\36\4\0\6\36\1\327"+
    "\23\36\2\0\32\36\20\0\10\36\4\0\26\36\1\330"+
    "\3\36\2\0\32\36\20\0\10\36\4\0\13\36\1\331"+
    "\7\36\1\332\6\36\2\0\32\36\20\0\10\36\4\0"+
    "\1\36\1\333\30\36\2\0\32\36\20\0\10\36\4\0"+
    "\3\36\1\334\13\36\1\335\12\36\2\0\32\36\20\0"+
    "\10\36\4\0\24\36\1\336\5\36\2\0\32\36\20\0"+
    "\10\36\4\0\32\36\2\0\24\36\1\337\5\36\20\0"+
    "\10\36\4\0\10\36\1\340\21\36\2\0\32\36\20\0"+
    "\10\36\4\0\3\36\1\341\26\36\2\0\32\36\20\0"+
    "\10\36\4\0\13\36\1\342\16\36\2\0\32\36\20\0"+
    "\10\36\4\0\4\36\1\343\25\36\2\0\32\36\20\0"+
    "\10\36\4\0\4\36\1\344\25\36\2\0\32\36\20\0"+
    "\10\36\4\0\32\36\2\0\22\36\1\345\7\36\20\0"+
    "\10\36\4\0\32\36\2\0\4\36\1\226\25\36\20\0"+
    "\10\36\4\0\32\36\2\0\22\36\1\346\5\36\1\347"+
    "\1\36\20\0\10\36\4\0\32\36\2\0\1\36\1\350"+
    "\30\36\20\0\10\36\4\0\32\36\2\0\16\36\1\351"+
    "\13\36\20\0\10\36\4\0\32\36\2\0\5\36\1\352"+
    "\24\36\20\0\10\36\4\0\32\36\2\0\23\36\1\353"+
    "\6\36\20\0\10\36\4\0\32\36\2\0\22\36\1\354"+
    "\1\355\6\36\20\0\10\36\4\0\32\36\2\0\1\36"+
    "\1\245\30\36\20\0\10\36\4\0\32\36\2\0\1\36"+
    "\1\356\30\36\20\0\10\36\4\0\32\36\2\0\14\36"+
    "\1\357\1\360\14\36\20\0\10\36\4\0\32\36\2\0"+
    "\3\36\1\361\2\36\1\362\4\36\1\363\16\36\20\0"+
    "\10\36\4\0\32\36\2\0\24\36\1\364\5\36\20\0"+
    "\10\36\4\0\32\36\2\0\11\36\1\365\10\36\1\366"+
    "\7\36\20\0\10\36\4\0\32\36\2\0\24\36\1\367"+
    "\5\36\20\0\10\36\4\0\32\36\2\0\3\36\1\370"+
    "\17\36\1\371\6\36\20\0\10\36\4\0\32\36\2\0"+
    "\15\36\1\372\14\36\20\0\10\36\4\0\32\36\2\0"+
    "\16\36\1\373\13\36\20\0\10\36\4\0\32\36\2\0"+
    "\21\36\1\374\10\36\20\0\10\36\4\0\32\36\2\0"+
    "\16\36\1\375\13\36\20\0\10\36\4\0\32\36\2\0"+
    "\16\36\1\376\13\36\20\0\10\36\4\0\32\36\2\0"+
    "\17\36\1\377\12\36\20\0\10\36\4\0\32\36\2\0"+
    "\22\36\1\u0100\1\u0101\6\36\3\0\1\u0102\14\0\10\36"+
    "\4\0\32\36\2\0\32\36\20\0\10\36\4\0\32\36"+
    "\2\0\14\36\1\u0103\15\36\20\0\10\36\4\0\32\36"+
    "\2\0\15\36\1\u0104\14\36\20\0\10\36\4\0\32\36"+
    "\2\0\23\36\1\u0105\6\36\20\0\10\36\4\0\32\36"+
    "\2\0\26\36\1\u0106\3\36\20\0\10\36\4\0\32\36"+
    "\2\0\15\36\1\u0107\5\36\1\u0108\6\36\20\0\10\36"+
    "\4\0\32\36\2\0\3\36\1\u0109\16\36\1\u010a\7\36"+
    "\20\0\10\36\4\0\32\36\2\0\11\36\1\u010b\4\36"+
    "\1\u010c\13\36\20\0\10\36\4\0\32\36\2\0\2\36"+
    "\1\u010d\27\36\20\0\10\36\4\0\32\36\2\0\11\36"+
    "\1\u010e\20\36\20\0\10\36\4\0\32\36\2\0\20\36"+
    "\1\u010f\2\36\1\u0110\6\36\20\0\10\36\4\0\32\36"+
    "\2\0\13\36\1\u0111\16\36\20\0\10\36\4\0\32\36"+
    "\2\0\16\36\1\u0112\13\36\20\0\10\36\4\0\32\36"+
    "\2\0\1\36\1\u0113\17\36\1\u0114\10\36\20\0\10\36"+
    "\4\0\32\36\2\0\17\36\1\u0115\12\36\20\0\10\36"+
    "\4\0\32\36\2\0\11\36\1\u0116\20\36\20\0\10\36"+
    "\4\0\32\36\2\0\15\36\1\u0117\14\36\20\0\10\36"+
    "\4\0\32\36\2\0\11\36\1\u0118\7\36\1\u0119\10\36"+
    "\20\0\10\36\4\0\32\36\2\0\14\36\1\353\15\36"+
    "\20\0\10\36\4\0\32\36\2\0\1\36\1\u011a\22\36"+
    "\1\337\3\36\1\u011b\1\36\20\0\10\36\4\0\32\36"+
    "\2\0\21\36\1\u011c\10\36\20\0\10\36\4\0\32\36"+
    "\2\0\11\36\1\u011d\1\36\1\u011e\16\36\20\0\10\36"+
    "\4\0\32\36\2\0\11\36\1\u011f\20\36\20\0\10\36"+
    "\4\0\32\36\2\0\23\36\1\u0120\6\36\20\0\10\36"+
    "\4\0\32\36\2\0\5\36\1\u0121\24\36\3\0\1\u0122"+
    "\14\0\10\36\4\0\32\36\2\0\32\36\20\0\10\36"+
    "\4\0\4\36\1\u0123\25\36\2\0\32\36\20\0\10\36"+
    "\4\0\7\36\1\u0124\22\36\2\0\21\36\1\u0125\10\36"+
    "\20\0\10\36\4\0\32\36\2\0\1\36\1\u0126\30\36"+
    "\20\0\10\36\4\0\1\u0127\31\36\2\0\32\36\20\0"+
    "\10\36\4\0\12\36\1\u0128\17\36\2\0\32\36\20\0"+
    "\10\36\4\0\26\36\1\u0129\3\36\2\0\32\36\20\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\u012a\24\36\20\0"+
    "\10\36\4\0\32\36\2\0\1\36\1\u012b\30\36\20\0"+
    "\10\36\4\0\2\36\1\u012c\27\36\2\0\32\36\20\0"+
    "\10\36\4\0\24\36\1\u012d\5\36\2\0\32\36\20\0"+
    "\10\36\4\0\22\36\1\u012e\7\36\2\0\32\36\20\0"+
    "\10\36\4\0\1\u012f\31\36\2\0\32\36\20\0\10\36"+
    "\4\0\32\36\2\0\13\36\1\u0130\16\36\20\0\10\36"+
    "\4\0\1\u0131\31\36\2\0\32\36\20\0\10\36\4\0"+
    "\4\36\1\u0132\25\36\2\0\32\36\20\0\10\36\4\0"+
    "\23\36\1\u0133\6\36\2\0\32\36\20\0\10\36\4\0"+
    "\17\36\1\363\12\36\2\0\32\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u0134\24\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u0135\24\36\20\0\10\36\4\0"+
    "\2\36\1\u0130\27\36\2\0\32\36\20\0\10\36\4\0"+
    "\22\36\1\u0136\7\36\2\0\32\36\20\0\10\36\4\0"+
    "\32\36\2\0\10\36\1\u0137\21\36\20\0\10\36\4\0"+
    "\14\36\1\u0138\15\36\2\0\32\36\20\0\10\36\4\0"+
    "\4\36\1\u0139\25\36\2\0\32\36\20\0\10\36\4\0"+
    "\13\36\1\u013a\16\36\2\0\32\36\20\0\10\36\4\0"+
    "\32\36\2\0\22\36\1\337\7\36\20\0\10\36\4\0"+
    "\24\36\1\u013b\5\36\2\0\32\36\20\0\10\36\4\0"+
    "\10\36\1\u013c\21\36\2\0\32\36\20\0\10\36\4\0"+
    "\4\36\1\u013d\25\36\2\0\32\36\20\0\10\36\4\0"+
    "\4\36\1\u013e\25\36\2\0\32\36\20\0\10\36\4\0"+
    "\4\36\1\u013f\25\36\2\0\32\36\20\0\10\36\4\0"+
    "\16\36\1\u0140\13\36\2\0\32\36\20\0\10\36\4\0"+
    "\15\36\1\u0141\14\36\2\0\32\36\20\0\10\36\4\0"+
    "\23\36\1\u0142\6\36\2\0\32\36\20\0\10\36\4\0"+
    "\4\36\1\215\25\36\2\0\32\36\20\0\10\36\4\0"+
    "\10\36\1\u0143\21\36\2\0\32\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u0144\24\36\20\0\10\36\4\0"+
    "\32\36\2\0\13\36\1\u0144\16\36\20\0\10\36\4\0"+
    "\4\36\1\u0145\25\36\2\0\32\36\20\0\10\36\4\0"+
    "\14\36\1\u0146\15\36\2\0\32\36\20\0\10\36\4\0"+
    "\2\36\1\u0147\27\36\2\0\32\36\20\0\10\36\4\0"+
    "\7\36\1\317\22\36\2\0\32\36\20\0\10\36\4\0"+
    "\15\36\1\u0148\14\36\2\0\32\36\20\0\10\36\4\0"+
    "\4\36\1\u0149\25\36\2\0\32\36\20\0\10\36\4\0"+
    "\13\36\1\u014a\16\36\2\0\32\36\20\0\10\36\4\0"+
    "\16\36\1\u014b\13\36\2\0\32\36\20\0\10\36\4\0"+
    "\15\36\1\u014c\14\36\2\0\32\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u014d\24\36\20\0\10\36\4\0"+
    "\16\36\1\u014e\1\36\1\u014f\11\36\2\0\32\36\20\0"+
    "\10\36\4\0\1\u0150\31\36\2\0\32\36\20\0\10\36"+
    "\4\0\24\36\1\u0151\5\36\2\0\32\36\20\0\10\36"+
    "\4\0\26\36\1\u0152\3\36\2\0\32\36\20\0\10\36"+
    "\4\0\21\36\1\320\10\36\2\0\32\36\20\0\10\36"+
    "\4\0\32\36\2\0\23\36\1\u0153\6\36\20\0\10\36"+
    "\4\0\32\36\2\0\5\36\1\u0154\24\36\20\0\10\36"+
    "\4\0\32\36\2\0\15\36\1\u0155\14\36\20\0\10\36"+
    "\4\0\32\36\2\0\11\36\1\u0156\20\36\20\0\10\36"+
    "\4\0\32\36\2\0\13\36\1\u0157\16\36\20\0\10\36"+
    "\4\0\32\36\2\0\1\36\1\u0158\30\36\20\0\10\36"+
    "\4\0\32\36\2\0\5\36\1\u011c\24\36\20\0\10\36"+
    "\4\0\32\36\2\0\5\36\1\215\24\36\20\0\10\36"+
    "\4\0\32\36\2\0\3\36\1\u0159\26\36\20\0\10\36"+
    "\4\0\32\36\2\0\22\36\1\u015a\7\36\20\0\10\36"+
    "\4\0\32\36\2\0\17\36\1\u015b\12\36\20\0\10\36"+
    "\4\0\32\36\2\0\22\36\1\u015c\1\u015d\6\36\20\0"+
    "\10\36\4\0\32\36\2\0\11\36\1\u015e\20\36\20\0"+
    "\10\36\4\0\32\36\2\0\1\36\1\u015f\30\36\20\0"+
    "\10\36\4\0\32\36\2\0\2\36\1\u0160\27\36\20\0"+
    "\10\36\4\0\32\36\2\0\6\36\1\215\23\36\20\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\u0161\24\36\20\0"+
    "\10\36\4\0\32\36\2\0\14\36\1\u0162\15\36\20\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\u0163\24\36\20\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\u0164\24\36\20\0"+
    "\10\36\4\0\32\36\2\0\1\36\1\u0165\30\36\20\0"+
    "\10\36\4\0\32\36\2\0\1\36\1\u0166\30\36\20\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\u0167\24\36\20\0"+
    "\10\36\4\0\32\36\2\0\14\36\1\u0168\15\36\20\0"+
    "\10\36\4\0\32\36\2\0\2\36\1\u0169\27\36\20\0"+
    "\10\36\4\0\32\36\2\0\13\36\1\u016a\2\36\1\u016b"+
    "\13\36\20\0\10\36\4\0\32\36\2\0\23\36\1\u016c"+
    "\6\36\20\0\1\36\1\u016d\1\36\1\u016e\2\36\1\u016f"+
    "\1\u011c\4\0\32\36\2\0\5\36\1\u0170\24\36\105\0"+
    "\1\u0171\34\0\10\36\4\0\32\36\2\0\2\36\1\u0172"+
    "\27\36\20\0\10\36\4\0\32\36\2\0\7\36\1\u011c"+
    "\22\36\20\0\10\36\4\0\32\36\2\0\11\36\1\u0173"+
    "\20\36\20\0\10\36\4\0\32\36\2\0\13\36\1\u0174"+
    "\16\36\3\0\1\u0175\14\0\10\36\4\0\32\36\2\0"+
    "\32\36\20\0\10\36\4\0\32\36\2\0\12\36\1\u0176"+
    "\17\36\20\0\10\36\4\0\32\36\2\0\22\36\1\u0177"+
    "\7\36\20\0\10\36\4\0\32\36\2\0\15\36\1\u0178"+
    "\7\36\1\u0179\4\36\20\0\10\36\4\0\32\36\2\0"+
    "\23\36\1\u017a\6\36\20\0\10\36\4\0\32\36\2\0"+
    "\13\36\1\u017b\16\36\20\0\10\36\4\0\32\36\2\0"+
    "\22\36\1\u017c\7\36\20\0\10\36\4\0\32\36\2\0"+
    "\24\36\1\u017d\5\36\20\0\10\36\4\0\32\36\2\0"+
    "\24\36\1\u017e\5\36\20\0\10\36\4\0\32\36\2\0"+
    "\6\36\1\u017f\23\36\20\0\10\36\4\0\32\36\2\0"+
    "\21\36\1\u0166\10\36\20\0\10\36\4\0\32\36\2\0"+
    "\23\36\1\u0180\6\36\20\0\10\36\4\0\32\36\2\0"+
    "\11\36\1\u0181\20\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u0182\24\36\20\0\10\36\4\0\32\36\2\0"+
    "\23\36\1\u0183\6\36\20\0\10\36\4\0\32\36\2\0"+
    "\3\36\1\u0184\26\36\20\0\10\36\4\0\32\36\2\0"+
    "\22\36\1\u017f\7\36\20\0\10\36\4\0\32\36\2\0"+
    "\16\36\1\u0185\13\36\20\0\10\36\4\0\32\36\2\0"+
    "\15\36\1\u0186\14\36\20\0\10\36\4\0\32\36\2\0"+
    "\4\36\1\u0187\25\36\20\0\10\36\4\0\32\36\2\0"+
    "\1\36\1\u0188\30\36\20\0\10\36\4\0\32\36\2\0"+
    "\13\36\1\u0189\16\36\20\0\10\36\4\0\32\36\2\0"+
    "\10\36\1\u011b\21\36\20\0\10\36\4\0\32\36\2\0"+
    "\13\36\1\u018a\16\36\36\0\1\u018b\103\0\10\36\4\0"+
    "\21\36\1\u018c\10\36\2\0\32\36\20\0\10\36\4\0"+
    "\32\36\2\0\1\36\1\u018d\30\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u018e\24\36\20\0\10\36\4\0"+
    "\32\36\2\0\22\36\1\u018f\7\36\20\0\10\36\4\0"+
    "\32\36\2\0\13\36\1\u0190\16\36\20\0\10\36\4\0"+
    "\24\36\1\u0191\5\36\2\0\32\36\20\0\10\36\4\0"+
    "\4\36\1\u0192\25\36\2\0\32\36\20\0\10\36\4\0"+
    "\32\36\2\0\6\36\1\u0193\23\36\20\0\10\36\4\0"+
    "\32\36\2\0\13\36\1\u0193\16\36\20\0\10\36\4\0"+
    "\12\36\1\u0194\17\36\2\0\32\36\20\0\10\36\4\0"+
    "\14\36\1\u0195\15\36\2\0\32\36\20\0\10\36\4\0"+
    "\23\36\1\u0196\6\36\2\0\32\36\20\0\10\36\4\0"+
    "\23\36\1\u0197\6\36\2\0\32\36\20\0\10\36\4\0"+
    "\1\36\1\u0198\30\36\2\0\32\36\20\0\10\36\4\0"+
    "\23\36\1\u0199\6\36\2\0\32\36\20\0\10\36\4\0"+
    "\10\36\1\u019a\21\36\2\0\32\36\20\0\10\36\4\0"+
    "\32\36\2\0\7\36\1\u019b\22\36\20\0\10\36\4\0"+
    "\32\36\2\0\3\36\1\u019c\26\36\20\0\10\36\4\0"+
    "\23\36\1\u019d\6\36\2\0\32\36\20\0\10\36\4\0"+
    "\4\36\1\u014b\25\36\2\0\32\36\20\0\10\36\4\0"+
    "\10\36\1\u019e\21\36\2\0\32\36\3\0\1\u019f\14\0"+
    "\10\36\4\0\32\36\2\0\32\36\20\0\10\36\4\0"+
    "\17\36\1\u01a0\12\36\2\0\32\36\20\0\10\36\4\0"+
    "\15\36\1\u01a1\14\36\2\0\32\36\20\0\10\36\4\0"+
    "\27\36\1\u01a2\2\36\2\0\32\36\20\0\10\36\4\0"+
    "\21\36\1\u0142\10\36\2\0\32\36\20\0\10\36\4\0"+
    "\21\36\1\u01a3\10\36\2\0\32\36\3\0\1\u01a4\14\0"+
    "\10\36\4\0\32\36\2\0\32\36\20\0\10\36\4\0"+
    "\23\36\1\335\6\36\2\0\32\36\20\0\10\36\4\0"+
    "\21\36\1\u01a0\10\36\2\0\32\36\20\0\10\36\4\0"+
    "\1\u01a5\31\36\2\0\32\36\20\0\10\36\4\0\4\36"+
    "\1\u01a6\25\36\2\0\32\36\20\0\10\36\4\0\24\36"+
    "\1\u01a7\5\36\2\0\32\36\20\0\10\36\4\0\2\36"+
    "\1\u01a8\27\36\2\0\32\36\20\0\10\36\4\0\4\36"+
    "\1\u01a9\25\36\2\0\32\36\20\0\10\36\4\0\2\36"+
    "\1\u01aa\27\36\2\0\32\36\20\0\10\36\4\0\15\36"+
    "\1\u01ab\14\36\2\0\32\36\20\0\10\36\4\0\24\36"+
    "\1\u01ac\5\36\2\0\32\36\20\0\10\36\4\0\23\36"+
    "\1\u01ad\6\36\2\0\32\36\20\0\10\36\4\0\4\36"+
    "\1\u01ae\25\36\2\0\32\36\20\0\10\36\4\0\32\36"+
    "\2\0\21\36\1\u01af\10\36\20\0\10\36\4\0\32\36"+
    "\2\0\21\36\1\u01b0\10\36\20\0\10\36\4\0\32\36"+
    "\2\0\3\36\1\u01b1\26\36\20\0\10\36\4\0\32\36"+
    "\2\0\23\36\1\u01b1\6\36\20\0\10\36\4\0\32\36"+
    "\2\0\5\36\1\u01b2\24\36\20\0\10\36\4\0\32\36"+
    "\2\0\12\36\1\u01b3\17\36\20\0\10\36\4\0\32\36"+
    "\2\0\10\36\1\u01b4\21\36\20\0\10\36\4\0\32\36"+
    "\2\0\22\36\1\u01b5\7\36\20\0\10\36\4\0\32\36"+
    "\2\0\13\36\1\u01b6\16\36\20\0\10\36\4\0\32\36"+
    "\2\0\23\36\1\u01b7\6\36\20\0\10\36\4\0\32\36"+
    "\2\0\11\36\1\u01b8\20\36\20\0\10\36\4\0\32\36"+
    "\2\0\14\36\1\u01b9\15\36\20\0\10\36\4\0\32\36"+
    "\2\0\24\36\1\u01ba\5\36\20\0\10\36\4\0\32\36"+
    "\2\0\13\36\1\353\16\36\20\0\10\36\4\0\32\36"+
    "\2\0\17\36\1\u01bb\12\36\20\0\10\36\4\0\32\36"+
    "\2\0\15\36\1\u01bc\14\36\20\0\10\36\4\0\32\36"+
    "\2\0\13\36\1\u01bd\16\36\20\0\10\36\4\0\32\36"+
    "\2\0\23\36\1\u011c\6\36\20\0\10\36\4\0\32\36"+
    "\2\0\1\36\1\134\30\36\20\0\10\36\4\0\32\36"+
    "\2\0\1\36\1\u01be\30\36\20\0\10\36\4\0\32\36"+
    "\2\0\5\36\1\u01bf\24\36\20\0\10\36\4\0\32\36"+
    "\2\0\21\36\1\u01c0\10\36\20\0\10\36\4\0\32\36"+
    "\2\0\1\36\1\u01c1\30\36\20\0\6\36\1\u011c\1\36"+
    "\4\0\32\36\2\0\32\36\20\0\2\36\1\u011c\5\36"+
    "\4\0\32\36\2\0\32\36\20\0\4\36\1\u011c\3\36"+
    "\4\0\32\36\2\0\32\36\20\0\10\36\4\0\32\36"+
    "\2\0\21\36\1\u01c2\10\36\106\0\1\u01c3\33\0\10\36"+
    "\4\0\32\36\2\0\4\36\1\u01c4\25\36\20\0\10\36"+
    "\4\0\32\36\2\0\25\36\1\u01c5\4\36\20\0\10\36"+
    "\4\0\32\36\2\0\16\36\1\u01c6\13\36\101\0\1\u01c7"+
    "\40\0\10\36\4\0\32\36\2\0\1\36\1\u01c8\30\36"+
    "\20\0\10\36\4\0\32\36\2\0\23\36\1\u01c9\6\36"+
    "\20\0\10\36\4\0\32\36\2\0\1\36\1\u01ca\30\36"+
    "\20\0\10\36\4\0\32\36\2\0\5\36\1\u01cb\24\36"+
    "\20\0\10\36\4\0\32\36\2\0\11\36\1\u01cc\20\36"+
    "\20\0\10\36\4\0\32\36\2\0\5\36\1\u01b4\24\36"+
    "\20\0\10\36\4\0\32\36\2\0\11\36\1\u01cd\20\36"+
    "\20\0\10\36\4\0\32\36\2\0\21\36\1\u01ce\10\36"+
    "\20\0\10\36\4\0\32\36\2\0\11\36\1\u01cf\20\36"+
    "\20\0\10\36\4\0\32\36\2\0\3\36\1\u01d0\11\36"+
    "\1\u0104\14\36\20\0\10\36\4\0\32\36\2\0\21\36"+
    "\1\u01b5\10\36\20\0\10\36\4\0\32\36\2\0\3\36"+
    "\1\u01d1\26\36\20\0\10\36\4\0\32\36\2\0\10\36"+
    "\1\u01d2\21\36\20\0\10\36\4\0\32\36\2\0\26\36"+
    "\1\u01d3\3\36\20\0\10\36\4\0\32\36\2\0\22\36"+
    "\1\u01d4\7\36\20\0\10\36\4\0\32\36\2\0\23\36"+
    "\1\u01d5\6\36\20\0\10\36\4\0\32\36\2\0\5\36"+
    "\1\u0137\24\36\20\0\10\36\4\0\32\36\2\0\4\36"+
    "\1\u01d6\25\36\52\0\1\u01d7\67\0\10\36\4\0\32\36"+
    "\2\0\15\36\1\u01d8\14\36\20\0\10\36\4\0\32\36"+
    "\2\0\22\36\1\u01d9\7\36\20\0\10\36\4\0\32\36"+
    "\2\0\22\36\1\u01da\7\36\20\0\10\36\4\0\17\36"+
    "\1\u01db\12\36\2\0\32\36\20\0\10\36\4\0\4\36"+
    "\1\u01dc\25\36\2\0\32\36\20\0\10\36\4\0\15\36"+
    "\1\u01dd\14\36\2\0\32\36\20\0\10\36\4\0\21\36"+
    "\1\u01de\10\36\2\0\32\36\20\0\10\36\4\0\4\36"+
    "\1\u0106\25\36\2\0\32\36\20\0\10\36\4\0\1\u01df"+
    "\31\36\2\0\32\36\20\0\10\36\4\0\4\36\1\363"+
    "\25\36\2\0\32\36\20\0\10\36\4\0\15\36\1\u01e0"+
    "\14\36\2\0\32\36\20\0\10\36\4\0\32\36\2\0"+
    "\1\36\1\u01e1\30\36\20\0\10\36\4\0\32\36\2\0"+
    "\23\36\1\u01e2\6\36\20\0\10\36\4\0\22\36\1\215"+
    "\7\36\2\0\32\36\20\0\10\36\4\0\6\36\1\u01e3"+
    "\23\36\2\0\32\36\52\0\1\u01e4\52\0\1\u01e5\14\0"+
    "\10\36\4\0\32\36\2\0\32\36\20\0\10\36\4\0"+
    "\6\36\1\215\23\36\2\0\32\36\20\0\10\36\4\0"+
    "\23\36\1\u0140\6\36\2\0\32\36\45\0\1\u01e6\74\0"+
    "\10\36\4\0\21\36\1\u01e7\10\36\2\0\32\36\20\0"+
    "\10\36\4\0\3\36\1\u01e8\26\36\2\0\32\36\20\0"+
    "\10\36\4\0\14\36\1\335\15\36\2\0\32\36\20\0"+
    "\10\36\4\0\23\36\1\u01e9\6\36\2\0\32\36\20\0"+
    "\10\36\4\0\1\u0132\31\36\2\0\32\36\3\0\1\u01ea"+
    "\14\0\10\36\4\0\32\36\2\0\32\36\20\0\10\36"+
    "\4\0\4\36\1\u0194\25\36\2\0\32\36\20\0\10\36"+
    "\4\0\4\36\1\332\25\36\2\0\32\36\20\0\10\36"+
    "\4\0\22\36\1\u0140\7\36\2\0\32\36\20\0\10\36"+
    "\4\0\32\36\2\0\1\36\1\u01eb\30\36\20\0\10\36"+
    "\4\0\32\36\2\0\23\36\1\u011b\6\36\20\0\10\36"+
    "\4\0\32\36\2\0\1\36\1\u01ec\30\36\20\0\10\36"+
    "\4\0\32\36\2\0\5\36\1\u01ed\24\36\20\0\10\36"+
    "\4\0\32\36\2\0\15\36\1\u01ee\14\36\20\0\10\36"+
    "\4\0\32\36\2\0\1\36\1\u01ef\30\36\20\0\10\36"+
    "\4\0\32\36\2\0\13\36\1\u01f0\16\36\20\0\10\36"+
    "\4\0\32\36\2\0\23\36\1\u01b4\6\36\20\0\10\36"+
    "\4\0\32\36\2\0\4\36\1\u01f1\25\36\20\0\10\36"+
    "\4\0\32\36\2\0\13\36\1\u01f2\16\36\20\0\10\36"+
    "\4\0\32\36\2\0\13\36\1\u01f3\16\36\20\0\10\36"+
    "\4\0\32\36\2\0\14\36\1\u01f4\15\36\20\0\10\36"+
    "\4\0\32\36\2\0\23\36\1\u0168\6\36\20\0\10\36"+
    "\4\0\32\36\2\0\15\36\1\u01f5\14\36\20\0\10\36"+
    "\4\0\32\36\2\0\6\36\1\u01f6\23\36\113\0\1\u01f7"+
    "\26\0\10\36\4\0\32\36\2\0\1\36\1\u0187\30\36"+
    "\20\0\10\36\4\0\32\36\2\0\5\36\1\u0168\24\36"+
    "\20\0\10\36\4\0\32\36\2\0\3\36\1\u0169\26\36"+
    "\105\0\1\u01f8\34\0\10\36\4\0\32\36\2\0\7\36"+
    "\1\u01f9\22\36\20\0\10\36\4\0\32\36\2\0\23\36"+
    "\1\u01fa\6\36\20\0\10\36\4\0\32\36\2\0\3\36"+
    "\1\u01fb\26\36\20\0\10\36\4\0\32\36\2\0\3\36"+
    "\1\u01f3\26\36\20\0\10\36\4\0\32\36\2\0\21\36"+
    "\1\u01fc\10\36\20\0\10\36\4\0\32\36\2\0\15\36"+
    "\1\u01d6\14\36\20\0\10\36\4\0\32\36\2\0\3\36"+
    "\1\u01b7\26\36\20\0\10\36\4\0\32\36\2\0\23\36"+
    "\1\u01fd\6\36\20\0\10\36\4\0\32\36\2\0\10\36"+
    "\1\215\21\36\20\0\10\36\4\0\32\36\2\0\21\36"+
    "\1\u01fe\10\36\20\0\10\36\4\0\32\36\2\0\11\36"+
    "\1\u01ff\20\36\20\0\10\36\4\0\32\36\2\0\11\36"+
    "\1\u0200\20\36\51\0\1\u0201\70\0\10\36\4\0\32\36"+
    "\2\0\4\36\1\u0202\25\36\20\0\10\36\4\0\32\36"+
    "\2\0\22\36\1\u0203\7\36\20\0\10\36\4\0\32\36"+
    "\2\0\16\36\1\226\13\36\20\0\10\36\4\0\15\36"+
    "\1\u0204\14\36\2\0\32\36\20\0\10\36\4\0\1\u0205"+
    "\31\36\2\0\32\36\20\0\10\36\4\0\22\36\1\u0206"+
    "\7\36\2\0\32\36\20\0\10\36\4\0\2\36\1\u0143"+
    "\27\36\2\0\32\36\20\0\10\36\4\0\32\36\2\0"+
    "\23\36\1\u0207\6\36\20\0\10\36\4\0\2\36\1\u0208"+
    "\27\36\2\0\32\36\20\0\10\36\4\0\15\36\1\u0209"+
    "\14\36\2\0\32\36\60\0\1\u020a\76\0\1\u020b\136\0"+
    "\1\u020c\67\0\10\36\4\0\30\36\1\u0209\1\36\2\0"+
    "\32\36\20\0\10\36\4\0\24\36\1\u020d\5\36\2\0"+
    "\32\36\34\0\1\u020e\105\0\10\36\4\0\32\36\2\0"+
    "\3\36\1\u015c\26\36\20\0\10\36\4\0\32\36\2\0"+
    "\15\36\1\u011c\14\36\20\0\10\36\4\0\32\36\2\0"+
    "\27\36\1\u011c\2\36\20\0\10\36\4\0\32\36\2\0"+
    "\24\36\1\u020f\5\36\20\0\10\36\4\0\32\36\2\0"+
    "\13\36\1\u011c\16\36\20\0\10\36\4\0\32\36\2\0"+
    "\23\36\1\u01f3\6\36\20\0\10\36\4\0\32\36\2\0"+
    "\22\36\1\u0210\7\36\20\0\10\36\4\0\32\36\2\0"+
    "\30\36\1\u0161\1\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u0211\24\36\20\0\10\36\4\0\32\36\2\0"+
    "\3\36\1\u0212\26\36\20\0\10\36\4\0\32\36\2\0"+
    "\1\36\1\u0213\30\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u0214\24\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u01f3\24\36\20\0\10\36\4\0\32\36\2\0"+
    "\23\36\1\u0215\6\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u0216\24\36\20\0\10\36\4\0\32\36\2\0"+
    "\6\36\1\u0217\23\36\20\0\10\36\4\0\32\36\2\0"+
    "\16\36\1\u0218\13\36\20\0\10\36\4\0\32\36\2\0"+
    "\5\36\1\u0219\24\36\20\0\10\36\4\0\32\36\2\0"+
    "\13\36\1\u021a\16\36\56\0\1\u021b\63\0\10\36\4\0"+
    "\32\36\2\0\13\36\1\u021c\16\36\20\0\10\36\4\0"+
    "\16\36\1\u0111\13\36\2\0\32\36\20\0\10\36\4\0"+
    "\10\36\1\u021d\21\36\2\0\32\36\20\0\10\36\4\0"+
    "\4\36\1\u021e\25\36\2\0\32\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u017f\24\36\20\0\10\36\4\0"+
    "\32\36\2\0\1\36\1\u021f\30\36\3\0\1\u0220\14\0"+
    "\10\36\4\0\32\36\2\0\32\36\57\0\1\u0221\126\0"+
    "\1\u0222\101\0\1\u0223\75\0\10\36\4\0\21\36\1\u0224"+
    "\10\36\2\0\32\36\47\0\1\u0225\72\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u0226\24\36\20\0\10\36\4\0"+
    "\32\36\2\0\15\36\1\u0227\14\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u0228\24\36\20\0\10\36\4\0"+
    "\32\36\2\0\3\36\1\u0229\26\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u022a\24\36\20\0\10\36\4\0"+
    "\32\36\2\0\22\36\1\u0168\7\36\20\0\10\36\4\0"+
    "\32\36\2\0\17\36\1\u0193\12\36\20\0\10\36\4\0"+
    "\32\36\2\0\15\36\1\u022b\14\36\20\0\10\36\4\0"+
    "\32\36\2\0\15\36\1\u015c\14\36\20\0\10\36\4\0"+
    "\32\36\2\0\5\36\1\u01b7\24\36\57\0\1\u022c\62\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\u022d\24\36\20\0"+
    "\10\36\4\0\15\36\1\u022e\14\36\2\0\32\36\20\0"+
    "\10\36\4\0\32\36\2\0\22\36\1\u022f\7\36\46\0"+
    "\1\u0230\113\0\1\u0231\132\0\1\u0232\70\0\10\36\4\0"+
    "\4\36\1\u0187\25\36\2\0\32\36\47\0\1\u0233\72\0"+
    "\10\36\4\0\32\36\2\0\23\36\1\u01f1\6\36\20\0"+
    "\10\36\4\0\32\36\2\0\16\36\1\u0234\13\36\20\0"+
    "\10\36\4\0\32\36\2\0\5\36\1\u0235\24\36\20\0"+
    "\10\36\4\0\32\36\2\0\4\36\1\u01f3\25\36\20\0"+
    "\10\36\4\0\32\36\2\0\11\36\1\u0236\20\36\55\0"+
    "\1\u0237\64\0\10\36\4\0\32\36\2\0\21\36\1\u0238"+
    "\10\36\20\0\10\36\4\0\23\36\1\u0194\6\36\2\0"+
    "\32\36\20\0\10\36\4\0\32\36\2\0\23\36\1\u0239"+
    "\6\36\40\0\1\u023a\136\0\1\u023b\64\0\10\36\4\0"+
    "\32\36\2\0\6\36\1\u023c\23\36\20\0\10\36\4\0"+
    "\32\36\2\0\31\36\1\u023d\34\0\1\u023e\151\0\1\u023f"+
    "\40\0\1\u01a4\136\0\10\36\4\0\32\36\2\0\5\36"+
    "\1\u0240\24\36\44\0\1\u0241\75\0\10\36\4\0\32\36"+
    "\2\0\4\36\1\u01b7\25\36\51\0\1\u0242\127\0\1\u0243"+
    "\44\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[41656];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\63\1\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\273\1\1\0\37\1"+
    "\1\0\116\1\1\0\3\1\1\0\25\1\1\0\23\1"+
    "\1\0\4\1\1\0\36\1\1\0\3\1\1\0\17\1"+
    "\1\0\14\1\3\0\3\1\1\0\14\1\2\11\10\1"+
    "\1\0\10\1\3\0\1\1\1\0\14\1\1\0\4\1"+
    "\2\0\1\11\1\0\1\1\1\0\6\1\1\0\3\1"+
    "\2\0\2\11\3\1\1\0\2\1\2\0\2\1\1\0"+
    "\1\11\1\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[579];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    int keywords = 0;
    //List<String> identifiers = new ArrayList<String>();
    
    void printResult(String token, String text, int line, int column){
        keywords++;
        if (text.length() >= 8)
            System.out.printf("%s\t<= %s (Linea: %d, Columna: %d)\n", text, token, line+1, column+1);
        else
            System.out.printf("%s\t\t<= %s (Linea: %d, Columna: %d)\n", text, token, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    System.out.printf("----------------------------------------\n");
    System.out.printf("Numero total de palabras: %d.\n",keywords);
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignore unmatched characters */
            }
          // fall through
          case 65: break;
          case 2:
            { printResult("Operador Logico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 66: break;
          case 3:
            { printResult("Comentario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 67: break;
          case 4:
            { printResult("Operador Aritmetico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 68: break;
          case 5:
            { printResult("Operador de Bits", yytext(), yyline, yycolumn);
            }
          // fall through
          case 69: break;
          case 6:
            { printResult("Separador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 70: break;
          case 7:
            { printResult("Numero", yytext(), yyline, yycolumn);
            }
          // fall through
          case 71: break;
          case 8:
            { printResult("Comparador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 72: break;
          case 9:
            { printResult("Asignador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 73: break;
          case 10:
            { printResult("Identificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 74: break;
          case 11:
            { printResult("Cadena", yytext(), yyline, yycolumn);
            }
          // fall through
          case 75: break;
          case 12:
            { printResult("Caracter", yytext(), yyline, yycolumn);
            }
          // fall through
          case 76: break;
          case 13:
            { printResult("Renombrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 77: break;
          case 14:
            { printResult("Iterador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 78: break;
          case 15:
            { printResult("Condicional", yytext(), yyline, yycolumn);
            }
          // fall through
          case 79: break;
          case 16:
            { printResult("Operadot de Pertenencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 80: break;
          case 17:
            { printResult("Operador de identidad", yytext(), yyline, yycolumn);
            }
          // fall through
          case 81: break;
          case 18:
            { printResult("Añadir", yytext(), yyline, yycolumn);
            }
          // fall through
          case 82: break;
          case 19:
            { printResult("Ordenar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 83: break;
          case 20:
            { printResult("Almacenamiento", yytext(), yyline, yycolumn);
            }
          // fall through
          case 84: break;
          case 21:
            { printResult("Update", yytext(), yyline, yycolumn);
            }
          // fall through
          case 85: break;
          case 22:
            { printResult("Limite", yytext(), yyline, yycolumn);
            }
          // fall through
          case 86: break;
          case 23:
            { printResult("Funcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 87: break;
          case 24:
            { printResult("Borrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 88: break;
          case 25:
            { printResult("Tipo de dato", yytext(), yyline, yycolumn);
            }
          // fall through
          case 89: break;
          case 26:
            { printResult("Crear", yytext(), yyline, yycolumn);
            }
          // fall through
          case 90: break;
          case 27:
            { printResult("Intentar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 91: break;
          case 28:
            { printResult("Ejecutar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 92: break;
          case 29:
            { printResult("Insertar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 93: break;
          case 30:
            { printResult("Join", yytext(), yyline, yycolumn);
            }
          // fall through
          case 94: break;
          case 31:
            { printResult("Valor nulo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 95: break;
          case 32:
            { printResult("Booleano", yytext(), yyline, yycolumn);
            }
          // fall through
          case 96: break;
          case 33:
            { printResult("Vista", yytext(), yyline, yycolumn);
            }
          // fall through
          case 97: break;
          case 34:
            { printResult("Consequencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 98: break;
          case 35:
            { printResult("Enum", yytext(), yyline, yycolumn);
            }
          // fall through
          case 99: break;
          case 36:
            { printResult("Importar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 100: break;
          case 37:
            { printResult("Pasar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 101: break;
          case 38:
            { printResult("Referencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 102: break;
          case 39:
            { printResult("Alterar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 103: break;
          case 40:
            { printResult("Modificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 104: break;
          case 41:
            { printResult("Restriccion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 105: break;
          case 42:
            { printResult("Indice", yytext(), yyline, yycolumn);
            }
          // fall through
          case 106: break;
          case 43:
            { printResult("Tabla", yytext(), yyline, yycolumn);
            }
          // fall through
          case 107: break;
          case 44:
            { printResult("Union", yytext(), yyline, yycolumn);
            }
          // fall through
          case 108: break;
          case 45:
            { printResult("Asyncrono", yytext(), yyline, yycolumn);
            }
          // fall through
          case 109: break;
          case 46:
            { printResult("Salida", yytext(), yyline, yycolumn);
            }
          // fall through
          case 110: break;
          case 47:
            { printResult("Excepcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 111: break;
          case 48:
            { printResult("Clase", yytext(), yyline, yycolumn);
            }
          // fall through
          case 112: break;
          case 49:
            { printResult("Modificador de No Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 50:
            { printResult("Imprimir", yytext(), yyline, yycolumn);
            }
          // fall through
          case 114: break;
          case 51:
            { printResult("Regresar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 52:
            { printResult("Backup", yytext(), yyline, yycolumn);
            }
          // fall through
          case 116: break;
          case 53:
            { printResult("Columna", yytext(), yyline, yycolumn);
            }
          // fall through
          case 117: break;
          case 54:
            { printResult("Select", yytext(), yyline, yycolumn);
            }
          // fall through
          case 118: break;
          case 55:
            { printResult("Modificador de Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 119: break;
          case 56:
            { printResult("Rango", yytext(), yyline, yycolumn);
            }
          // fall through
          case 120: break;
          case 57:
            { printResult("Erencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 121: break;
          case 58:
            { printResult("Paquete", yytext(), yyline, yycolumn);
            }
          // fall through
          case 122: break;
          case 59:
            { printResult("Database", yytext(), yyline, yycolumn);
            }
          // fall through
          case 123: break;
          case 60:
            { printResult("Continuar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 124: break;
          case 61:
            { printResult("Interface", yytext(), yyline, yycolumn);
            }
          // fall through
          case 125: break;
          case 62:
            { printResult("AddHandler", yytext(), yyline, yycolumn);
            }
          // fall through
          case 126: break;
          case 63:
            { printResult("Cast", yytext(), yyline, yycolumn);
            }
          // fall through
          case 127: break;
          case 64:
            { printResult("Operador de instancia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        lexer scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
