// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/resources/Lexer.flex

// User Code (Import dependencies or declare variables)
import java.util.HashMap;

@SuppressWarnings("fallthrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\2\1\3\1\4\1\5\1\0"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\21\1\26\1\21\1\27\1\21\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\0\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\0\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\6\0\1\1\32\0\1\1\u01df\0\1\1"+
    "\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0\u0100\133";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\2\5\1\11\1\5\1\12\1\5"+
    "\1\13\1\14\1\15\1\16\1\17\1\16\1\20\30\21"+
    "\1\22\1\23\1\6\23\21\1\24\1\6\1\25\1\6"+
    "\1\16\1\0\1\26\1\17\1\27\1\0\1\30\1\31"+
    "\1\32\1\33\2\0\1\34\1\35\62\21\1\36\12\21"+
    "\1\37\45\21\1\40\12\21\1\41\11\21\1\42\1\21"+
    "\1\43\1\44\6\21\1\27\25\21\1\45\1\0\1\45"+
    "\1\46\1\47\1\21\1\50\36\21\1\51\4\21\1\52"+
    "\12\21\1\53\13\21\1\54\1\5\16\21\1\55\5\21"+
    "\1\56\10\21\1\57\6\21\1\60\2\21\1\61\35\21"+
    "\1\60\1\62\11\21\1\63\5\21\1\64\1\0\3\21"+
    "\1\65\1\21\1\27\22\21\1\66\7\21\1\0\13\21"+
    "\1\67\5\21\1\70\6\21\1\71\12\21\1\72\5\21"+
    "\1\73\1\74\10\21\1\75\27\21\1\76\1\77\3\21"+
    "\1\100\1\101\10\21\1\102\12\21\1\64\1\103\7\21"+
    "\1\104\1\105\1\106\1\107\5\21\1\110\10\21\1\0"+
    "\3\21\1\0\1\21\1\111\7\21\1\112\10\21\1\64"+
    "\1\113\3\21\1\0\1\114\2\21\1\40\3\21\1\115"+
    "\11\21\1\116\1\117\1\21\1\0\6\21\1\120\1\21"+
    "\1\0\33\21\1\121\4\21\1\122\3\21\1\123\5\21"+
    "\1\124\1\21\1\125\1\21\1\126\5\21\1\126\1\64"+
    "\5\21\1\0\3\21\1\0\1\21\1\127\7\21\1\130"+
    "\2\21\1\116\2\21\1\131\1\132\1\0\3\21\1\133"+
    "\1\21\1\134\5\21\2\0\3\21\1\0\1\135\3\21"+
    "\1\53\5\21\1\136\10\21\1\137\1\140\1\21\1\141"+
    "\1\21\1\0\15\21\1\44\1\142\1\43\5\21\1\143"+
    "\3\21\1\0\2\21\1\144\4\21\2\0\1\21\1\145"+
    "\1\0\11\21\1\146\4\21\1\0\2\21\1\64\1\21"+
    "\1\147\3\21\1\150\5\21\1\0\3\21\1\151\2\0"+
    "\1\50\1\21\1\0\5\21\1\152\7\21\1\0\3\21"+
    "\1\153\4\21\1\0\2\21\2\0\1\21\1\74\2\21"+
    "\1\154\3\21\1\155\1\122\3\21\1\156\1\21\3\0"+
    "\4\21\1\157\1\160\1\21\1\0\1\115\4\21\1\0"+
    "\3\21\1\0\2\21\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[882];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\134\0\134\0\270\0\u0114\0\134\0\u0170\0\u01cc"+
    "\0\u0228\0\134\0\134\0\u0284\0\u02e0\0\134\0\u033c\0\134"+
    "\0\u0398\0\u03f4\0\134\0\134\0\u0450\0\270\0\u04ac\0\u0508"+
    "\0\u0564\0\u05c0\0\u061c\0\u0678\0\u06d4\0\u0730\0\u078c\0\u07e8"+
    "\0\u0844\0\u08a0\0\u08fc\0\u0958\0\u09b4\0\u0a10\0\u0a6c\0\u0ac8"+
    "\0\u0b24\0\u0b80\0\u0bdc\0\u0c38\0\u0c94\0\u0cf0\0\u0d4c\0\u0da8"+
    "\0\134\0\134\0\u0170\0\u0e04\0\u0e60\0\u0ebc\0\u0f18\0\u0f74"+
    "\0\u0fd0\0\u102c\0\u1088\0\u10e4\0\u1140\0\u119c\0\u11f8\0\u1254"+
    "\0\u12b0\0\u130c\0\u1368\0\u13c4\0\u1420\0\u147c\0\134\0\u14d8"+
    "\0\134\0\134\0\134\0\u0114\0\134\0\134\0\134\0\u1534"+
    "\0\134\0\134\0\134\0\134\0\u1590\0\u15ec\0\134\0\134"+
    "\0\u1648\0\u16a4\0\u1700\0\u175c\0\u17b8\0\u1814\0\u1870\0\u18cc"+
    "\0\u1928\0\u1984\0\u19e0\0\u1a3c\0\u1a98\0\u1af4\0\u1b50\0\u1bac"+
    "\0\u1c08\0\u1c64\0\u1cc0\0\u1d1c\0\u1d78\0\u1dd4\0\u1e30\0\u1e8c"+
    "\0\u1ee8\0\u1f44\0\u1fa0\0\u1ffc\0\u2058\0\u20b4\0\u2110\0\u216c"+
    "\0\u21c8\0\u2224\0\u2280\0\u22dc\0\u2338\0\u2394\0\u23f0\0\u244c"+
    "\0\u24a8\0\u2504\0\u2560\0\u25bc\0\u2618\0\u2674\0\u26d0\0\u272c"+
    "\0\u2788\0\u27e4\0\u08fc\0\u2840\0\u289c\0\u28f8\0\u2954\0\u29b0"+
    "\0\u2a0c\0\u2a68\0\u2ac4\0\u2b20\0\u2b7c\0\u08fc\0\u2bd8\0\u2c34"+
    "\0\u2c90\0\u2cec\0\u2d48\0\u2da4\0\u2e00\0\u2e5c\0\u2eb8\0\u2f14"+
    "\0\u2f70\0\u2fcc\0\u3028\0\u3084\0\u30e0\0\u313c\0\u3198\0\u31f4"+
    "\0\u3250\0\u32ac\0\u3308\0\u3364\0\u33c0\0\u341c\0\u3478\0\u34d4"+
    "\0\u3530\0\u358c\0\u35e8\0\u3644\0\u36a0\0\u36fc\0\u3758\0\u37b4"+
    "\0\u3810\0\u386c\0\u38c8\0\u3924\0\u3980\0\u39dc\0\u3a38\0\u3a94"+
    "\0\u3af0\0\u3b4c\0\u3ba8\0\u3c04\0\u3c60\0\u3cbc\0\u3d18\0\u3d74"+
    "\0\u3dd0\0\u3e2c\0\u3e88\0\u3ee4\0\u3f40\0\u3f9c\0\u3ff8\0\u4054"+
    "\0\u08fc\0\u40b0\0\u410c\0\u4168\0\u41c4\0\u4220\0\u427c\0\u42d8"+
    "\0\u4334\0\u4390\0\u08fc\0\u43ec\0\u4448\0\u44a4\0\u4500\0\u455c"+
    "\0\u45b8\0\u4614\0\u4670\0\u46cc\0\u4728\0\u4784\0\u47e0\0\u483c"+
    "\0\u4898\0\u48f4\0\u4950\0\u49ac\0\u4a08\0\u4a64\0\u4ac0\0\u4b1c"+
    "\0\u4b78\0\u4bd4\0\u4c30\0\u4c8c\0\u08fc\0\u4ce8\0\u08fc\0\u4d44"+
    "\0\u4da0\0\u4dfc\0\u4e58\0\u4eb4\0\u4f10\0\u4f6c\0\u4fc8\0\u5024"+
    "\0\u5080\0\u50dc\0\u5138\0\u5194\0\u51f0\0\u524c\0\u52a8\0\u5304"+
    "\0\u5360\0\u53bc\0\u5418\0\u5474\0\u54d0\0\u552c\0\u5588\0\u55e4"+
    "\0\u5640\0\u569c\0\u56f8\0\u5754\0\u57b0\0\u08fc\0\u580c\0\u5868"+
    "\0\u58c4\0\u5920\0\u08fc\0\u597c\0\u59d8\0\u5a34\0\u5a90\0\u5aec"+
    "\0\u5b48\0\u5ba4\0\u5c00\0\u5c5c\0\u5cb8\0\u5d14\0\u5d70\0\u5dcc"+
    "\0\u5e28\0\u5e84\0\u5ee0\0\u5f3c\0\u5f98\0\u5ff4\0\u6050\0\u60ac"+
    "\0\u6108\0\u08fc\0\u6164\0\u61c0\0\u621c\0\u6278\0\u62d4\0\u6330"+
    "\0\u638c\0\u63e8\0\u6444\0\u64a0\0\u64fc\0\u6558\0\u65b4\0\u6610"+
    "\0\u666c\0\u08fc\0\u66c8\0\u6724\0\u6780\0\u67dc\0\u6838\0\u08fc"+
    "\0\u6894\0\u68f0\0\u694c\0\u69a8\0\u6a04\0\u6a60\0\u6abc\0\u6b18"+
    "\0\u08fc\0\u6b74\0\u6bd0\0\u6c2c\0\u6c88\0\u6ce4\0\u6d40\0\u08fc"+
    "\0\u6d9c\0\u6df8\0\u08fc\0\u6e54\0\u6eb0\0\u6f0c\0\u6f68\0\u6fc4"+
    "\0\u7020\0\u707c\0\u70d8\0\u7134\0\u7190\0\u71ec\0\u7248\0\u72a4"+
    "\0\u7300\0\u735c\0\u73b8\0\u7414\0\u7470\0\u74cc\0\u7528\0\u7584"+
    "\0\u75e0\0\u763c\0\u7698\0\u76f4\0\u7750\0\u77ac\0\u7808\0\u7864"+
    "\0\u78c0\0\u08fc\0\u791c\0\u7978\0\u79d4\0\u7a30\0\u7a8c\0\u7ae8"+
    "\0\u7b44\0\u7ba0\0\u7bfc\0\u7c58\0\u7cb4\0\u7d10\0\u7d6c\0\u7dc8"+
    "\0\u7e24\0\u7e80\0\u7edc\0\u7f38\0\u7f94\0\u7ff0\0\u08fc\0\u804c"+
    "\0\u80a8\0\u8104\0\u8160\0\u81bc\0\u8218\0\u8274\0\u82d0\0\u832c"+
    "\0\u8388\0\u83e4\0\u8440\0\u849c\0\u84f8\0\u8554\0\u85b0\0\u860c"+
    "\0\u8668\0\u86c4\0\u8720\0\u08fc\0\u877c\0\u87d8\0\u8834\0\u8890"+
    "\0\u88ec\0\u8948\0\u89a4\0\u8a00\0\u8a5c\0\u8ab8\0\u8b14\0\u8b70"+
    "\0\u8bcc\0\u8c28\0\u8c84\0\u8ce0\0\u8d3c\0\u8d98\0\u8df4\0\u08fc"+
    "\0\u8e50\0\u8eac\0\u8f08\0\u8f64\0\u8fc0\0\u08fc\0\u901c\0\u9078"+
    "\0\u90d4\0\u9130\0\u918c\0\u91e8\0\u08fc\0\u9244\0\u92a0\0\u92fc"+
    "\0\u9358\0\u93b4\0\u9410\0\u946c\0\u94c8\0\u9524\0\u9580\0\u08fc"+
    "\0\u95dc\0\u9638\0\u9694\0\u96f0\0\u974c\0\u08fc\0\u08fc\0\u97a8"+
    "\0\u9804\0\u9860\0\u98bc\0\u9918\0\u9974\0\u99d0\0\u9a2c\0\u08fc"+
    "\0\u9a88\0\u9ae4\0\u9b40\0\u9b9c\0\u9bf8\0\u9c54\0\u9cb0\0\u9d0c"+
    "\0\u9d68\0\u9dc4\0\u9e20\0\u9e7c\0\u9ed8\0\u9f34\0\u9f90\0\u9fec"+
    "\0\ua048\0\ua0a4\0\ua100\0\ua15c\0\ua1b8\0\ua214\0\ua270\0\u08fc"+
    "\0\u08fc\0\ua2cc\0\ua328\0\ua384\0\u08fc\0\u08fc\0\ua3e0\0\ua43c"+
    "\0\ua498\0\ua4f4\0\ua550\0\ua5ac\0\ua608\0\ua664\0\u08fc\0\ua6c0"+
    "\0\ua71c\0\ua778\0\ua7d4\0\ua830\0\ua88c\0\ua8e8\0\ua944\0\ua9a0"+
    "\0\ua9fc\0\u08fc\0\u08fc\0\uaa58\0\uaab4\0\uab10\0\uab6c\0\uabc8"+
    "\0\uac24\0\uac80\0\u08fc\0\u08fc\0\u08fc\0\u08fc\0\uacdc\0\uad38"+
    "\0\uad94\0\uadf0\0\uae4c\0\u08fc\0\uaea8\0\uaf04\0\uaf60\0\uafbc"+
    "\0\ub018\0\ub074\0\ub0d0\0\ub12c\0\ub188\0\ub1e4\0\ub240\0\ub29c"+
    "\0\ub2f8\0\ub354\0\u08fc\0\ub3b0\0\ub40c\0\ub468\0\ub4c4\0\ub520"+
    "\0\ub57c\0\ub5d8\0\u08fc\0\ub634\0\ub690\0\ub6ec\0\ub748\0\ub7a4"+
    "\0\ub800\0\ub85c\0\ub8b8\0\ub914\0\u08fc\0\ub970\0\ub9cc\0\uba28"+
    "\0\uba84\0\u08fc\0\ubae0\0\ubb3c\0\u08fc\0\ubb98\0\ubbf4\0\ubc50"+
    "\0\u08fc\0\ubcac\0\ubd08\0\ubd64\0\ubdc0\0\ube1c\0\ube78\0\ubed4"+
    "\0\ubf30\0\ubf8c\0\u08fc\0\u08fc\0\ubfe8\0\uc044\0\uc0a0\0\uc0fc"+
    "\0\uc158\0\uc1b4\0\uc210\0\uc26c\0\u08fc\0\uc2c8\0\uc324\0\uc380"+
    "\0\uc3dc\0\uc438\0\uc494\0\uc4f0\0\uc54c\0\uc5a8\0\uc604\0\uc660"+
    "\0\uc6bc\0\uc718\0\uc774\0\uc7d0\0\uc82c\0\uc888\0\uc8e4\0\uc940"+
    "\0\uc99c\0\uc9f8\0\uca54\0\ucab0\0\ucb0c\0\ucb68\0\ucbc4\0\ucc20"+
    "\0\ucc7c\0\uccd8\0\u08fc\0\ucd34\0\ucd90\0\ucdec\0\uce48\0\ucea4"+
    "\0\ucf00\0\ucf5c\0\ucfb8\0\u08fc\0\ud014\0\ud070\0\ud0cc\0\ud128"+
    "\0\ud184\0\u08fc\0\ud1e0\0\u08fc\0\ud23c\0\u08fc\0\ud298\0\ud2f4"+
    "\0\ud350\0\ud3ac\0\ud408\0\ud464\0\ud4c0\0\ud51c\0\ud578\0\ud5d4"+
    "\0\ud630\0\ud68c\0\ud6e8\0\ud744\0\ud7a0\0\ud7fc\0\ud858\0\ud8b4"+
    "\0\u08fc\0\ud910\0\ud96c\0\ud9c8\0\uda24\0\uda80\0\udadc\0\udb38"+
    "\0\u08fc\0\udb94\0\udbf0\0\udc4c\0\udca8\0\udd04\0\u08fc\0\u08fc"+
    "\0\udd60\0\uddbc\0\ude18\0\ude74\0\u08fc\0\uded0\0\u08fc\0\udf2c"+
    "\0\udf88\0\udfe4\0\ue040\0\ue09c\0\ue0f8\0\ue154\0\ue1b0\0\ue20c"+
    "\0\ue268\0\ue2c4\0\u08fc\0\ue320\0\ue37c\0\udc4c\0\u08fc\0\ue3d8"+
    "\0\ue434\0\ue490\0\ue4ec\0\ue548\0\u4fc8\0\ue5a4\0\ue600\0\ue65c"+
    "\0\ue6b8\0\ue714\0\ue770\0\ue7cc\0\ue828\0\u08fc\0\u08fc\0\ue884"+
    "\0\u08fc\0\ue8e0\0\ue93c\0\ue998\0\ue9f4\0\uea50\0\ueaac\0\ueb08"+
    "\0\ueb64\0\uebc0\0\uec1c\0\uec78\0\uecd4\0\ued30\0\ued8c\0\uede8"+
    "\0\134\0\u08fc\0\134\0\uee44\0\ueea0\0\ueefc\0\uef58\0\uefb4"+
    "\0\u08fc\0\uf010\0\uf06c\0\uf0c8\0\uf124\0\uf180\0\uf1dc\0\u08fc"+
    "\0\uf238\0\uf294\0\uf2f0\0\uf34c\0\uf3a8\0\uf404\0\uf460\0\u08fc"+
    "\0\uf4bc\0\uf518\0\uf574\0\uf5d0\0\uf62c\0\uf688\0\uf6e4\0\uf740"+
    "\0\uf79c\0\uf7f8\0\u08fc\0\uf854\0\uf8b0\0\uf90c\0\uf968\0\uf9c4"+
    "\0\ufa20\0\ufa7c\0\ufad8\0\ufb34\0\u08fc\0\ufb90\0\ufbec\0\ufc48"+
    "\0\u08fc\0\ufca4\0\ufd00\0\ufd5c\0\ufdb8\0\ufe14\0\ufe70\0\ufecc"+
    "\0\uff28\0\uff84\0\u08fc\0\uffe0\1\74\0\134\1\230\1\364"+
    "\1\u0150\1\u01ac\1\u0208\1\u0264\1\u02c0\0\u08fc\1\u031c\1\u0378"+
    "\1\u03d4\1\u0430\1\u048c\1\u04e8\1\u0544\1\u05a0\1\u05fc\1\u0658"+
    "\1\u06b4\0\u08fc\1\u0710\1\u076c\1\u07c8\1\u0824\1\u0880\1\u08dc"+
    "\1\u0938\1\u0994\1\u09f0\1\u0a4c\0\134\1\u0aa8\1\u0b04\0\u08fc"+
    "\1\u0b60\1\u0bbc\1\u0c18\0\u08fc\0\134\1\u0c74\1\u0cd0\1\u0d2c"+
    "\0\u08fc\1\u0d88\1\u0de4\1\u0e40\1\u0e9c\1\u0ef8\1\u0f54\1\u0fb0"+
    "\1\u100c\0\u08fc\0\u08fc\1\u1068\1\u10c4\0\134\1\u1120\1\u117c"+
    "\1\u11d8\1\u1234\1\u1290\1\u12ec\1\u1348\1\u13a4\1\u1400\1\u145c"+
    "\1\u14b8\0\134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[882];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\7\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\2\43"+
    "\1\61\1\2\1\62\1\63\1\2\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\43\1\73\2\43\1\74"+
    "\1\43\1\75\1\76\1\77\1\43\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\43\1\106\1\43\1\107\1\110"+
    "\1\111\1\112\170\0\1\113\100\0\4\114\1\115\3\114"+
    "\1\0\123\114\33\0\1\116\107\0\1\117\23\0\1\116"+
    "\100\0\4\120\1\0\3\120\1\121\60\120\1\0\42\120"+
    "\13\0\1\7\4\0\1\122\12\0\1\116\114\0\1\123"+
    "\4\0\7\22\3\0\1\116\116\0\1\123\2\0\7\22"+
    "\3\0\1\116\113\0\1\124\4\0\1\7\12\0\1\116"+
    "\117\0\1\125\1\0\7\22\12\0\1\126\36\0\1\126"+
    "\3\0\1\127\60\0\1\63\1\113\133\0\1\113\1\63"+
    "\134\0\1\130\117\0\7\43\6\0\3\43\1\131\7\43"+
    "\1\132\1\43\1\133\4\43\1\134\7\43\4\0\4\43"+
    "\1\135\7\43\1\136\1\43\1\137\3\43\1\140\10\43"+
    "\26\0\7\43\6\0\1\141\3\43\1\142\25\43\4\0"+
    "\31\43\1\143\1\43\26\0\7\43\6\0\1\43\1\144"+
    "\1\145\1\146\3\43\1\147\1\150\2\43\1\151\2\43"+
    "\1\152\2\43\1\153\1\154\1\43\1\155\5\43\4\0"+
    "\1\43\1\156\31\43\26\0\7\43\6\0\1\157\3\43"+
    "\1\160\3\43\1\161\10\43\1\162\10\43\4\0\5\43"+
    "\1\163\3\43\1\164\21\43\26\0\7\43\6\0\27\43"+
    "\1\165\2\43\4\0\1\43\1\166\14\43\1\167\3\43"+
    "\1\170\3\43\1\171\1\43\1\172\2\43\26\0\7\43"+
    "\6\0\10\43\1\173\5\43\1\174\5\43\1\175\5\43"+
    "\4\0\1\43\1\176\20\43\1\177\10\43\26\0\7\43"+
    "\6\0\21\43\1\200\10\43\4\0\5\43\1\201\11\43"+
    "\1\202\13\43\26\0\7\43\6\0\1\203\31\43\4\0"+
    "\1\43\1\204\31\43\26\0\7\43\6\0\15\43\1\205"+
    "\14\43\4\0\33\43\26\0\7\43\6\0\16\43\1\206"+
    "\13\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\33\43\26\0\7\43\6\0\4\43\1\207\3\43\1\210"+
    "\21\43\4\0\5\43\1\211\3\43\1\212\21\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\213\11\43\1\214"+
    "\5\43\1\215\3\43\1\216\1\43\26\0\7\43\6\0"+
    "\32\43\4\0\1\43\1\217\3\43\1\220\11\43\1\221"+
    "\5\43\1\222\5\43\26\0\7\43\6\0\21\43\1\223"+
    "\2\43\1\224\5\43\4\0\2\43\1\225\3\43\1\226"+
    "\11\43\1\227\1\43\1\230\2\43\1\231\1\232\4\43"+
    "\26\0\7\43\6\0\21\43\1\233\10\43\4\0\1\43"+
    "\1\234\31\43\26\0\7\43\6\0\32\43\4\0\25\43"+
    "\1\235\5\43\26\0\7\43\6\0\4\43\1\236\3\43"+
    "\1\237\5\43\1\240\13\43\4\0\1\43\1\241\3\43"+
    "\1\242\25\43\26\0\7\43\6\0\1\43\1\243\2\43"+
    "\1\244\25\43\4\0\10\43\1\245\1\246\12\43\1\247"+
    "\1\250\5\43\26\0\7\43\6\0\1\251\15\43\1\252"+
    "\2\43\1\253\10\43\4\0\10\43\1\254\11\43\1\255"+
    "\6\43\1\256\1\43\26\0\7\43\6\0\10\43\1\257"+
    "\2\43\1\260\1\43\1\261\1\43\1\262\2\43\1\263"+
    "\7\43\4\0\23\43\1\264\7\43\26\0\7\43\6\0"+
    "\1\265\7\43\1\266\21\43\4\0\33\43\26\0\7\43"+
    "\6\0\7\43\1\267\22\43\4\0\11\43\1\270\10\43"+
    "\1\271\10\43\26\0\7\43\6\0\32\43\4\0\17\43"+
    "\1\76\13\43\26\0\7\43\6\0\32\43\4\0\2\43"+
    "\1\272\13\43\1\273\4\43\1\274\3\43\1\275\3\43"+
    "\26\0\7\43\6\0\32\43\4\0\17\43\1\276\2\43"+
    "\1\277\6\43\1\300\1\43\26\0\7\43\6\0\32\43"+
    "\4\0\1\43\1\301\6\43\1\302\3\43\1\303\2\43"+
    "\1\304\13\43\26\0\7\43\6\0\32\43\4\0\1\43"+
    "\1\300\3\43\1\305\3\43\1\306\5\43\1\307\13\43"+
    "\26\0\7\43\6\0\32\43\4\0\14\43\1\310\1\43"+
    "\1\311\11\43\1\312\2\43\26\0\7\43\6\0\32\43"+
    "\4\0\1\43\1\176\7\43\1\313\2\43\1\314\2\43"+
    "\1\315\2\43\1\316\2\43\1\317\5\43\26\0\7\43"+
    "\6\0\32\43\4\0\14\43\1\320\16\43\26\0\7\43"+
    "\6\0\32\43\4\0\6\43\1\321\6\43\1\322\1\323"+
    "\4\43\1\324\7\43\26\0\7\43\6\0\32\43\4\0"+
    "\1\43\1\325\7\43\1\326\5\43\1\327\13\43\26\0"+
    "\7\43\6\0\32\43\4\0\1\43\1\330\3\43\1\331"+
    "\11\43\1\332\5\43\1\222\5\43\26\0\7\43\6\0"+
    "\32\43\4\0\22\43\1\333\10\43\26\0\7\43\6\0"+
    "\32\43\4\0\1\43\1\334\20\43\1\335\2\43\1\336"+
    "\5\43\26\0\7\43\6\0\32\43\4\0\1\43\1\337"+
    "\3\43\1\340\25\43\26\0\7\43\6\0\32\43\4\0"+
    "\5\43\1\341\2\43\1\342\13\43\1\343\1\344\1\43"+
    "\1\345\1\43\1\346\1\43\26\0\7\43\6\0\32\43"+
    "\4\0\10\43\1\347\1\350\10\43\1\351\2\43\1\352"+
    "\5\43\26\0\7\43\6\0\32\43\4\0\11\43\1\353"+
    "\21\43\26\0\7\43\6\0\32\43\4\0\1\43\1\354"+
    "\15\43\1\355\13\43\26\0\7\43\6\0\32\43\4\0"+
    "\10\43\1\356\1\357\21\43\26\0\7\43\6\0\32\43"+
    "\4\0\11\43\1\360\21\43\40\0\1\116\74\0\1\117"+
    "\13\0\1\121\144\0\7\361\120\0\1\362\1\0\1\362"+
    "\2\0\7\363\125\0\7\43\6\0\3\43\1\364\26\43"+
    "\4\0\33\43\26\0\7\43\6\0\13\43\1\365\7\43"+
    "\1\366\6\43\4\0\33\43\26\0\7\43\6\0\30\43"+
    "\1\365\1\43\4\0\33\43\26\0\7\43\6\0\2\43"+
    "\1\367\27\43\4\0\33\43\26\0\7\43\6\0\32\43"+
    "\4\0\4\43\1\370\26\43\26\0\7\43\6\0\32\43"+
    "\4\0\11\43\1\371\21\43\26\0\7\43\6\0\32\43"+
    "\4\0\4\43\1\372\26\43\26\0\7\43\6\0\32\43"+
    "\4\0\22\43\1\373\10\43\26\0\7\43\6\0\2\43"+
    "\1\374\27\43\4\0\33\43\26\0\7\43\6\0\23\43"+
    "\1\375\6\43\4\0\33\43\26\0\7\43\6\0\21\43"+
    "\1\376\3\43\1\377\4\43\4\0\33\43\26\0\7\43"+
    "\6\0\32\43\4\0\17\43\1\u0100\11\43\1\u0101\1\43"+
    "\26\0\7\43\6\0\32\43\4\0\10\43\1\u0102\22\43"+
    "\26\0\7\43\6\0\32\43\4\0\1\43\1\u0101\1\u0103"+
    "\2\43\1\u0104\25\43\26\0\7\43\6\0\4\43\1\u0105"+
    "\25\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\16\43\1\u0106\14\43\26\0\7\43\6\0\32\43\4\0"+
    "\16\43\1\u0107\14\43\26\0\7\43\6\0\13\43\1\u0108"+
    "\1\43\1\u0109\14\43\4\0\2\43\1\u010a\30\43\26\0"+
    "\7\43\6\0\4\43\1\u010b\25\43\4\0\33\43\26\0"+
    "\7\43\6\0\1\43\1\u010c\30\43\4\0\10\43\1\u010d"+
    "\5\43\1\u0107\5\43\1\u010e\6\43\26\0\7\43\6\0"+
    "\10\43\1\150\2\43\1\151\6\43\1\u010f\7\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\14\43\1\u0110"+
    "\16\43\26\0\7\43\6\0\23\43\1\u0111\6\43\4\0"+
    "\33\43\26\0\7\43\6\0\13\43\1\u0112\6\43\1\134"+
    "\7\43\4\0\33\43\26\0\7\43\6\0\22\43\1\u0113"+
    "\7\43\4\0\33\43\26\0\7\43\6\0\16\43\1\u0114"+
    "\13\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\14\43\1\u0115\16\43\26\0\7\43\6\0\32\43\4\0"+
    "\15\43\1\u0116\4\43\1\u0117\10\43\26\0\7\43\6\0"+
    "\4\43\1\u0118\3\43\1\u0119\21\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\3\43\1\u011a\27\43\26\0"+
    "\7\43\6\0\32\43\4\0\4\43\1\u011b\26\43\26\0"+
    "\7\43\6\0\32\43\4\0\1\43\1\u011c\20\43\1\u011d"+
    "\10\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u011e"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\11\43\1\u011f"+
    "\21\43\26\0\7\43\6\0\27\43\1\u0120\2\43\4\0"+
    "\33\43\26\0\7\43\6\0\21\43\1\u0121\10\43\4\0"+
    "\33\43\26\0\7\43\6\0\13\43\1\u0122\16\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\14\43\1\u0123"+
    "\16\43\26\0\7\43\6\0\32\43\4\0\11\43\1\u0124"+
    "\21\43\26\0\7\43\6\0\16\43\1\u0125\13\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\24\43\1\u0126"+
    "\6\43\26\0\7\43\6\0\23\43\1\u0127\6\43\4\0"+
    "\33\43\26\0\7\43\6\0\25\43\1\u0128\4\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\16\43\1\u0129"+
    "\14\43\26\0\7\43\6\0\3\43\1\u012a\11\43\1\u012b"+
    "\4\43\1\u012c\1\u012d\6\43\4\0\33\43\26\0\7\43"+
    "\6\0\10\43\1\u012e\21\43\4\0\33\43\26\0\7\43"+
    "\6\0\5\43\1\u012f\24\43\4\0\33\43\26\0\7\43"+
    "\6\0\12\43\1\u0130\1\43\1\u0131\15\43\4\0\33\43"+
    "\26\0\7\43\6\0\32\43\4\0\24\43\1\u0132\6\43"+
    "\26\0\7\43\6\0\32\43\4\0\2\43\1\213\30\43"+
    "\26\0\7\43\6\0\32\43\4\0\4\43\1\u0133\26\43"+
    "\26\0\7\43\6\0\32\43\4\0\23\43\1\u0134\7\43"+
    "\26\0\7\43\6\0\1\43\1\u0135\1\u0136\27\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\15\43\1\u0137"+
    "\4\43\1\u0138\10\43\26\0\7\43\6\0\32\43\4\0"+
    "\30\43\1\u0139\2\43\26\0\7\43\6\0\32\43\4\0"+
    "\16\43\1\u013a\5\43\1\u013b\6\43\26\0\7\43\6\0"+
    "\32\43\4\0\14\43\1\u013c\16\43\26\0\7\43\6\0"+
    "\3\43\1\u013d\26\43\4\0\33\43\26\0\7\43\6\0"+
    "\23\43\1\u012b\6\43\4\0\33\43\26\0\7\43\6\0"+
    "\32\43\4\0\12\43\1\u013e\20\43\26\0\7\43\6\0"+
    "\32\43\4\0\5\43\1\u013f\16\43\1\u0140\6\43\26\0"+
    "\7\43\6\0\4\43\1\u0141\25\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\24\43\1\u0142\6\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u0143\25\43\26\0"+
    "\7\43\6\0\10\43\1\u0144\5\43\1\u0145\13\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\22\43\1\u0146"+
    "\10\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u0147"+
    "\25\43\26\0\7\43\6\0\14\43\1\u0148\15\43\4\0"+
    "\33\43\26\0\7\43\6\0\6\43\1\u0149\23\43\4\0"+
    "\33\43\26\0\7\43\6\0\26\43\1\u014a\3\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\11\43\1\u014b"+
    "\21\43\26\0\7\43\6\0\3\43\1\u014c\26\43\4\0"+
    "\1\43\1\u014d\13\43\1\u014e\5\43\1\u014f\7\43\26\0"+
    "\7\43\6\0\32\43\4\0\31\43\1\300\1\43\26\0"+
    "\7\43\6\0\13\43\1\u0150\7\43\1\u0151\6\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\1\43\1\u0152"+
    "\31\43\26\0\7\43\6\0\32\43\4\0\16\43\1\u0153"+
    "\14\43\26\0\7\43\6\0\32\43\4\0\1\43\1\u0154"+
    "\3\43\1\u0155\11\43\1\u0156\2\43\1\u0157\10\43\26\0"+
    "\7\43\6\0\32\43\4\0\2\43\1\u0158\30\43\26\0"+
    "\7\43\6\0\1\43\1\u0159\30\43\4\0\33\43\26\0"+
    "\7\43\6\0\3\43\1\u015a\13\43\1\u015b\12\43\4\0"+
    "\33\43\26\0\7\43\6\0\24\43\1\u015c\5\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u015d"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\25\43\1\u015e"+
    "\3\43\1\u015f\1\43\26\0\7\43\6\0\32\43\4\0"+
    "\20\43\1\u0160\12\43\26\0\7\43\6\0\32\43\4\0"+
    "\16\43\1\u0161\14\43\26\0\7\43\6\0\32\43\4\0"+
    "\17\43\1\327\13\43\26\0\7\43\6\0\10\43\1\u0162"+
    "\21\43\4\0\33\43\26\0\7\43\6\0\3\43\1\u0163"+
    "\26\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\10\43\1\342\22\43\26\0\7\43\6\0\32\43\4\0"+
    "\11\43\1\u0164\21\43\26\0\7\43\6\0\13\43\1\u0165"+
    "\16\43\4\0\33\43\26\0\7\43\6\0\4\43\1\u0166"+
    "\25\43\4\0\33\43\26\0\7\43\6\0\4\43\1\u0167"+
    "\25\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\4\43\1\u0168\17\43\1\u0169\6\43\26\0\7\43\6\0"+
    "\32\43\4\0\11\43\1\u016a\21\43\26\0\7\43\6\0"+
    "\32\43\4\0\23\43\1\u016b\7\43\26\0\7\43\6\0"+
    "\32\43\4\0\4\43\1\333\26\43\26\0\7\43\6\0"+
    "\32\43\4\0\23\43\1\u016c\5\43\1\u016d\1\43\26\0"+
    "\7\43\6\0\32\43\4\0\1\43\1\u016e\31\43\26\0"+
    "\7\43\6\0\32\43\4\0\17\43\1\u016f\13\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u0170\25\43\26\0"+
    "\7\43\6\0\32\43\4\0\24\43\1\u0171\6\43\26\0"+
    "\7\43\6\0\32\43\4\0\23\43\1\u0172\1\u0173\6\43"+
    "\26\0\7\43\6\0\32\43\4\0\1\43\1\u0174\31\43"+
    "\26\0\7\43\6\0\32\43\4\0\1\43\1\u0175\31\43"+
    "\26\0\7\43\6\0\32\43\4\0\15\43\1\u0176\1\u0177"+
    "\14\43\26\0\7\43\6\0\32\43\4\0\3\43\1\u0178"+
    "\2\43\1\u0179\5\43\1\u017a\16\43\26\0\7\43\6\0"+
    "\32\43\4\0\3\43\1\u017b\27\43\26\0\7\43\6\0"+
    "\32\43\4\0\25\43\1\u017c\5\43\26\0\7\43\6\0"+
    "\32\43\4\0\11\43\1\u017d\11\43\1\u017e\7\43\26\0"+
    "\7\43\6\0\32\43\4\0\25\43\1\u017f\5\43\26\0"+
    "\7\43\6\0\32\43\4\0\3\43\1\u0180\20\43\1\u0181"+
    "\6\43\26\0\7\43\6\0\32\43\4\0\16\43\1\u0182"+
    "\14\43\26\0\7\43\6\0\32\43\4\0\17\43\1\u0183"+
    "\13\43\26\0\7\43\6\0\32\43\4\0\22\43\1\u0184"+
    "\10\43\26\0\7\43\6\0\32\43\4\0\17\43\1\u0185"+
    "\13\43\26\0\7\43\6\0\32\43\4\0\16\43\1\u0186"+
    "\14\43\26\0\7\43\6\0\32\43\4\0\17\43\1\u0187"+
    "\13\43\26\0\7\43\6\0\32\43\4\0\20\43\1\u0188"+
    "\12\43\26\0\7\43\6\0\32\43\4\0\23\43\1\u0189"+
    "\1\u018a\6\43\7\0\1\u018b\16\0\7\43\6\0\32\43"+
    "\4\0\33\43\26\0\7\43\6\0\32\43\4\0\15\43"+
    "\1\u018c\15\43\26\0\7\43\6\0\32\43\4\0\23\43"+
    "\1\u017b\7\43\26\0\7\43\6\0\32\43\4\0\16\43"+
    "\1\u018d\14\43\26\0\7\43\6\0\32\43\4\0\24\43"+
    "\1\u018e\6\43\26\0\7\43\6\0\32\43\4\0\27\43"+
    "\1\u018f\3\43\26\0\7\43\6\0\32\43\4\0\16\43"+
    "\1\u0190\5\43\1\u0191\6\43\26\0\7\43\6\0\32\43"+
    "\4\0\3\43\1\u0192\17\43\1\u0193\7\43\26\0\7\43"+
    "\6\0\32\43\4\0\11\43\1\u0194\5\43\1\u0195\13\43"+
    "\26\0\7\43\6\0\32\43\4\0\2\43\1\u0196\30\43"+
    "\26\0\7\43\6\0\32\43\4\0\11\43\1\u0197\21\43"+
    "\26\0\7\43\6\0\32\43\4\0\21\43\1\u0198\2\43"+
    "\1\u0199\6\43\26\0\7\43\6\0\32\43\4\0\14\43"+
    "\1\u019a\16\43\26\0\7\43\6\0\32\43\4\0\17\43"+
    "\1\u019b\13\43\26\0\7\43\6\0\32\43\4\0\1\43"+
    "\1\u019c\20\43\1\u019d\10\43\26\0\7\43\6\0\32\43"+
    "\4\0\20\43\1\u019e\12\43\26\0\7\43\6\0\32\43"+
    "\4\0\11\43\1\u019f\21\43\26\0\7\43\6\0\32\43"+
    "\4\0\16\43\1\u01a0\14\43\26\0\7\43\6\0\32\43"+
    "\4\0\11\43\1\u01a1\10\43\1\u01a2\10\43\26\0\7\43"+
    "\6\0\32\43\4\0\15\43\1\u0171\15\43\26\0\7\43"+
    "\6\0\32\43\4\0\1\43\1\u01a3\23\43\1\u015e\3\43"+
    "\1\u01a4\1\43\26\0\7\43\6\0\32\43\4\0\20\43"+
    "\1\u01a5\12\43\26\0\7\43\6\0\32\43\4\0\16\43"+
    "\1\u01a6\14\43\26\0\7\43\6\0\32\43\4\0\22\43"+
    "\1\u0132\10\43\26\0\7\43\6\0\32\43\4\0\11\43"+
    "\1\u01a7\2\43\1\u01a8\16\43\26\0\7\43\6\0\32\43"+
    "\4\0\11\43\1\u01a9\21\43\26\0\7\43\6\0\32\43"+
    "\4\0\24\43\1\u01aa\6\43\26\0\7\43\6\0\32\43"+
    "\4\0\5\43\1\u01ab\25\43\26\0\7\361\12\0\1\126"+
    "\36\0\1\126\3\0\1\127\47\0\7\363\125\0\7\363"+
    "\55\0\1\127\30\0\1\u01ac\16\0\7\43\6\0\32\43"+
    "\4\0\33\43\26\0\7\43\6\0\4\43\1\u01ad\25\43"+
    "\4\0\33\43\26\0\7\43\6\0\7\43\1\u01ae\22\43"+
    "\4\0\22\43\1\u01af\10\43\26\0\7\43\6\0\32\43"+
    "\4\0\1\43\1\u01b0\31\43\26\0\7\43\6\0\1\u01b1"+
    "\31\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\1\43\1\u01b2\31\43\26\0\7\43\6\0\12\43\1\u01b3"+
    "\17\43\4\0\33\43\26\0\7\43\6\0\26\43\1\u01b4"+
    "\3\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\5\43\1\u01b5\25\43\26\0\7\43\6\0\32\43\4\0"+
    "\1\43\1\u01b6\31\43\26\0\7\43\6\0\32\43\4\0"+
    "\17\43\1\u0103\13\43\26\0\7\43\6\0\32\43\4\0"+
    "\24\43\1\u01b7\6\43\26\0\7\43\6\0\32\43\4\0"+
    "\1\43\1\u010e\31\43\26\0\7\43\6\0\32\43\4\0"+
    "\14\43\1\u01b8\16\43\26\0\7\43\6\0\32\43\4\0"+
    "\3\43\1\u01b8\27\43\26\0\7\43\6\0\2\43\1\u01b9"+
    "\27\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\24\43\1\u01b8\6\43\26\0\7\43\6\0\32\43\4\0"+
    "\7\43\1\u01b8\23\43\26\0\7\43\6\0\24\43\1\u01ba"+
    "\5\43\4\0\33\43\26\0\7\43\6\0\22\43\1\u01bb"+
    "\7\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\12\43\1\u01b8\20\43\26\0\7\43\6\0\1\u01bc\31\43"+
    "\4\0\33\43\26\0\7\43\6\0\32\43\4\0\31\43"+
    "\1\u0101\1\43\26\0\7\43\6\0\32\43\4\0\17\43"+
    "\1\u01bd\13\43\26\0\7\43\6\0\32\43\4\0\22\43"+
    "\1\u01b8\10\43\26\0\7\43\6\0\32\43\4\0\10\43"+
    "\1\u010d\22\43\26\0\7\43\6\0\32\43\4\0\14\43"+
    "\1\u01be\16\43\26\0\7\43\6\0\1\u01bf\31\43\4\0"+
    "\33\43\26\0\7\43\6\0\4\43\1\u01c0\25\43\4\0"+
    "\33\43\26\0\7\43\6\0\23\43\1\u01c1\6\43\4\0"+
    "\33\43\26\0\7\43\6\0\17\43\1\u017a\12\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u01c2"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u01c3"+
    "\25\43\26\0\7\43\6\0\2\43\1\u01be\27\43\4\0"+
    "\33\43\26\0\7\43\6\0\22\43\1\u01c4\7\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\10\43\1\u01c5"+
    "\22\43\26\0\7\43\6\0\32\43\4\0\23\43\1\u01c6"+
    "\7\43\26\0\7\43\6\0\32\43\4\0\17\43\1\u01c7"+
    "\13\43\26\0\7\43\6\0\32\43\4\0\16\43\1\u01c8"+
    "\14\43\26\0\7\43\6\0\32\43\4\0\24\43\1\u011b"+
    "\6\43\26\0\7\43\6\0\14\43\1\u01c9\15\43\4\0"+
    "\33\43\26\0\7\43\6\0\4\43\1\u01ca\25\43\4\0"+
    "\33\43\26\0\7\43\6\0\13\43\1\u01cb\16\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\23\43\1\u015e"+
    "\7\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u01cc"+
    "\25\43\26\0\7\43\6\0\24\43\1\u01cd\5\43\4\0"+
    "\33\43\26\0\7\43\6\0\23\43\1\u01ce\3\43\1\u01cf"+
    "\2\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\17\43\1\u01d0\13\43\26\0\7\43\6\0\10\43\1\u01d1"+
    "\21\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\4\43\1\u01d2\26\43\26\0\7\43\6\0\4\43\1\u01d3"+
    "\25\43\4\0\33\43\26\0\7\43\6\0\4\43\1\u01d4"+
    "\25\43\4\0\33\43\26\0\7\43\6\0\4\43\1\u01d5"+
    "\25\43\4\0\33\43\26\0\7\43\6\0\16\43\1\u01d6"+
    "\13\43\4\0\33\43\26\0\7\43\6\0\15\43\1\u01d7"+
    "\14\43\4\0\33\43\26\0\7\43\6\0\23\43\1\u01d8"+
    "\6\43\4\0\33\43\26\0\7\43\6\0\4\43\1\365"+
    "\25\43\4\0\33\43\26\0\7\43\6\0\10\43\1\u01d9"+
    "\21\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\25\43\1\u01da\5\43\26\0\7\43\6\0\32\43\4\0"+
    "\24\43\1\u01db\6\43\26\0\7\43\6\0\32\43\4\0"+
    "\1\43\1\u01dc\31\43\26\0\7\43\6\0\32\43\4\0"+
    "\14\43\1\u01dd\16\43\26\0\7\43\6\0\32\43\4\0"+
    "\5\43\1\u01de\25\43\26\0\7\43\6\0\32\43\4\0"+
    "\22\43\1\u01df\10\43\26\0\7\43\6\0\32\43\4\0"+
    "\24\43\1\u01c5\6\43\26\0\7\43\6\0\32\43\4\0"+
    "\5\43\1\u01e0\25\43\26\0\7\43\6\0\10\43\1\u01e1"+
    "\5\43\1\u01e2\13\43\4\0\10\43\1\u01e3\22\43\26\0"+
    "\7\43\6\0\32\43\4\0\14\43\1\u01e0\16\43\26\0"+
    "\7\43\6\0\4\43\1\u01e4\25\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u01e5\25\43\26\0"+
    "\7\43\6\0\32\43\4\0\22\43\1\u01e6\10\43\26\0"+
    "\7\43\6\0\32\43\4\0\11\43\1\u01e7\21\43\26\0"+
    "\7\43\6\0\32\43\4\0\14\43\1\u01e8\16\43\26\0"+
    "\7\43\6\0\32\43\4\0\22\43\1\u01e9\10\43\26\0"+
    "\7\43\6\0\14\43\1\u01ea\15\43\4\0\33\43\26\0"+
    "\7\43\6\0\2\43\1\u01eb\27\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\24\43\1\u01ec\6\43\26\0"+
    "\7\43\6\0\32\43\4\0\25\43\1\u01ed\5\43\26\0"+
    "\7\43\6\0\7\43\1\u012f\22\43\4\0\33\43\26\0"+
    "\7\43\6\0\15\43\1\u01ee\14\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\23\43\1\u01ef\7\43\26\0"+
    "\7\43\6\0\32\43\4\0\11\43\1\u01f0\21\43\26\0"+
    "\7\43\6\0\32\43\4\0\4\43\1\u01f1\26\43\26\0"+
    "\7\43\6\0\32\43\4\0\17\43\1\u01f2\13\43\26\0"+
    "\7\43\6\0\32\43\4\0\25\43\1\u01f3\5\43\26\0"+
    "\7\43\6\0\4\43\1\u01f4\25\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\22\43\1\u01f5\10\43\26\0"+
    "\7\43\6\0\32\43\4\0\7\43\1\u01f6\23\43\26\0"+
    "\7\43\6\0\32\43\4\0\3\43\1\u01f7\27\43\26\0"+
    "\7\43\6\0\32\43\4\0\20\43\1\u01f8\12\43\26\0"+
    "\7\43\6\0\32\43\4\0\20\43\1\u01f9\12\43\26\0"+
    "\7\43\6\0\32\43\4\0\25\43\1\u01fa\5\43\26\0"+
    "\7\43\6\0\13\43\1\u01fb\16\43\4\0\33\43\26\0"+
    "\7\43\6\0\16\43\1\u0148\13\43\4\0\33\43\26\0"+
    "\7\43\6\0\15\43\1\u01fc\14\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\16\43\1\u01fd\14\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u01fe\25\43\26\0"+
    "\7\43\6\0\2\43\1\u01ff\27\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u0200\25\43\26\0"+
    "\7\43\6\0\32\43\4\0\24\43\1\u0201\6\43\26\0"+
    "\7\43\6\0\16\43\1\u0202\1\43\1\u0203\11\43\4\0"+
    "\33\43\26\0\7\43\6\0\1\u0204\31\43\4\0\33\43"+
    "\26\0\7\43\6\0\32\43\4\0\16\43\1\u0205\14\43"+
    "\26\0\7\43\6\0\24\43\1\u0206\5\43\4\0\33\43"+
    "\26\0\7\43\6\0\26\43\1\u0207\3\43\4\0\33\43"+
    "\26\0\7\43\6\0\21\43\1\u0208\10\43\4\0\33\43"+
    "\26\0\7\43\6\0\32\43\4\0\5\43\1\u0209\25\43"+
    "\26\0\7\43\6\0\32\43\4\0\10\43\1\u020a\22\43"+
    "\26\0\7\43\6\0\32\43\4\0\24\43\1\u020b\6\43"+
    "\26\0\7\43\6\0\32\43\4\0\24\43\1\u020c\6\43"+
    "\26\0\7\43\6\0\32\43\4\0\5\43\1\u020d\25\43"+
    "\26\0\7\43\6\0\32\43\4\0\16\43\1\u020e\14\43"+
    "\26\0\7\43\6\0\32\43\4\0\11\43\1\u020f\21\43"+
    "\26\0\7\43\6\0\32\43\4\0\14\43\1\u0210\16\43"+
    "\26\0\7\43\6\0\32\43\4\0\1\43\1\u0211\31\43"+
    "\26\0\7\43\6\0\32\43\4\0\5\43\1\u0212\25\43"+
    "\26\0\7\43\6\0\32\43\4\0\5\43\1\u0213\25\43"+
    "\26\0\7\43\6\0\32\43\4\0\3\43\1\u0214\27\43"+
    "\26\0\7\43\6\0\32\43\4\0\22\43\1\u0212\10\43"+
    "\26\0\7\43\6\0\32\43\4\0\23\43\1\u0215\7\43"+
    "\26\0\7\43\6\0\32\43\4\0\20\43\1\u0216\12\43"+
    "\26\0\7\43\6\0\32\43\4\0\23\43\1\u0217\1\u0218"+
    "\6\43\26\0\7\43\6\0\32\43\4\0\11\43\1\u0219"+
    "\21\43\26\0\7\43\6\0\32\43\4\0\1\43\1\u021a"+
    "\31\43\26\0\7\43\6\0\32\43\4\0\24\43\1\u021b"+
    "\6\43\26\0\7\43\6\0\32\43\4\0\2\43\1\u01f6"+
    "\30\43\26\0\7\43\6\0\32\43\4\0\6\43\1\u021c"+
    "\24\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u021d"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\15\43\1\u021e"+
    "\15\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u021f"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u0220"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\1\43\1\u0221"+
    "\31\43\26\0\7\43\6\0\32\43\4\0\1\43\1\u0222"+
    "\31\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u0223"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\15\43\1\u0224"+
    "\15\43\26\0\7\43\6\0\32\43\4\0\3\43\1\u0158"+
    "\27\43\26\0\7\43\6\0\32\43\4\0\2\43\1\u0225"+
    "\30\43\26\0\7\43\6\0\32\43\4\0\14\43\1\u0226"+
    "\2\43\1\u0227\13\43\26\0\7\43\6\0\32\43\4\0"+
    "\24\43\1\u0228\6\43\26\0\1\43\1\u0229\1\43\1\u022a"+
    "\1\43\1\u022b\1\u0212\6\0\32\43\4\0\5\43\1\u022c"+
    "\25\43\117\0\1\u022d\42\0\7\43\6\0\32\43\4\0"+
    "\2\43\1\u022e\30\43\26\0\7\43\6\0\32\43\4\0"+
    "\7\43\1\u0212\23\43\26\0\7\43\6\0\32\43\4\0"+
    "\11\43\1\u022f\21\43\26\0\7\43\6\0\32\43\4\0"+
    "\14\43\1\u0230\16\43\7\0\1\u0231\16\0\7\43\6\0"+
    "\32\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\13\43\1\u0232\17\43\26\0\7\43\6\0\32\43\4\0"+
    "\23\43\1\u0233\7\43\26\0\7\43\6\0\32\43\4\0"+
    "\16\43\1\u0234\7\43\1\u0235\4\43\26\0\7\43\6\0"+
    "\32\43\4\0\24\43\1\u0236\6\43\26\0\7\43\6\0"+
    "\32\43\4\0\14\43\1\u0237\16\43\26\0\7\43\6\0"+
    "\32\43\4\0\23\43\1\u0238\7\43\26\0\7\43\6\0"+
    "\32\43\4\0\25\43\1\u0239\5\43\26\0\7\43\6\0"+
    "\32\43\4\0\25\43\1\u023a\5\43\26\0\7\43\6\0"+
    "\32\43\4\0\6\43\1\u023b\24\43\26\0\7\43\6\0"+
    "\32\43\4\0\22\43\1\u023c\10\43\26\0\7\43\6\0"+
    "\32\43\4\0\24\43\1\u023d\6\43\26\0\7\43\6\0"+
    "\32\43\4\0\11\43\1\u023e\21\43\26\0\7\43\6\0"+
    "\32\43\4\0\5\43\1\u023f\25\43\26\0\7\43\6\0"+
    "\32\43\4\0\24\43\1\u0240\6\43\26\0\7\43\6\0"+
    "\32\43\4\0\3\43\1\u0241\27\43\26\0\7\43\6\0"+
    "\32\43\4\0\23\43\1\u023b\7\43\26\0\7\43\6\0"+
    "\32\43\4\0\17\43\1\u0242\13\43\26\0\7\43\6\0"+
    "\32\43\4\0\16\43\1\u0243\14\43\26\0\7\43\6\0"+
    "\32\43\4\0\14\43\1\u01ed\16\43\26\0\7\43\6\0"+
    "\32\43\4\0\24\43\1\u0244\6\43\26\0\7\43\6\0"+
    "\32\43\4\0\4\43\1\u0245\26\43\26\0\7\43\6\0"+
    "\32\43\4\0\1\43\1\u0246\31\43\26\0\7\43\6\0"+
    "\32\43\4\0\14\43\1\u0247\16\43\26\0\7\43\6\0"+
    "\32\43\4\0\10\43\1\u01a4\22\43\26\0\7\43\6\0"+
    "\32\43\4\0\14\43\1\u0248\16\43\45\0\1\u0249\114\0"+
    "\7\43\6\0\21\43\1\u024a\10\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\1\43\1\u024b\31\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u024c\25\43\26\0"+
    "\7\43\6\0\32\43\4\0\23\43\1\u024d\7\43\26\0"+
    "\7\43\6\0\32\43\4\0\14\43\1\u024e\16\43\26\0"+
    "\7\43\6\0\32\43\4\0\31\43\1\u021b\1\43\26\0"+
    "\7\43\6\0\24\43\1\u024f\5\43\4\0\33\43\26\0"+
    "\7\43\6\0\4\43\1\u0250\25\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\6\43\1\u0142\24\43\26\0"+
    "\7\43\6\0\32\43\4\0\14\43\1\u0142\16\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u01b8\25\43\26\0"+
    "\7\43\6\0\12\43\1\u0251\17\43\4\0\33\43\26\0"+
    "\7\43\6\0\14\43\1\u0252\15\43\4\0\33\43\26\0"+
    "\7\43\6\0\23\43\1\u0253\6\43\4\0\33\43\26\0"+
    "\7\43\6\0\23\43\1\u0254\6\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\22\43\1\u0106\10\43\26\0"+
    "\7\43\6\0\1\43\1\u0255\30\43\4\0\33\43\26\0"+
    "\7\43\6\0\23\43\1\u0256\6\43\4\0\33\43\26\0"+
    "\7\43\6\0\10\43\1\u0257\21\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\7\43\1\u0258\23\43\26\0"+
    "\7\43\6\0\32\43\4\0\3\43\1\u0259\27\43\26\0"+
    "\7\43\6\0\23\43\1\u025a\6\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u017a\25\43\26\0"+
    "\7\43\6\0\32\43\4\0\22\43\1\u025b\10\43\26\0"+
    "\7\43\6\0\32\43\4\0\24\43\1\u025c\6\43\26\0"+
    "\7\43\6\0\4\43\1\u0148\25\43\4\0\33\43\26\0"+
    "\7\43\6\0\10\43\1\u025d\21\43\4\0\33\43\7\0"+
    "\1\u025e\16\0\7\43\6\0\32\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\16\43\1\u025f\14\43\26\0"+
    "\7\43\6\0\17\43\1\u0260\12\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\31\43\1\u0261\1\43\26\0"+
    "\7\43\6\0\32\43\4\0\15\43\1\u0262\15\43\26\0"+
    "\7\43\6\0\15\43\1\u0263\14\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\14\43\1\u0264\16\43\26\0"+
    "\7\43\6\0\27\43\1\u0265\2\43\4\0\33\43\26\0"+
    "\7\43\6\0\21\43\1\u01d8\10\43\4\0\33\43\26\0"+
    "\7\43\6\0\21\43\1\u0266\10\43\4\0\33\43\7\0"+
    "\1\u0267\16\0\7\43\6\0\32\43\4\0\33\43\26\0"+
    "\7\43\6\0\23\43\1\u015b\6\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\14\43\1\u0268\16\43\26\0"+
    "\7\43\6\0\10\43\1\u0269\5\43\1\u026a\13\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\23\43\1\u026b"+
    "\7\43\26\0\7\43\6\0\32\43\4\0\1\43\1\u026c"+
    "\31\43\26\0\7\43\6\0\16\43\1\u026d\13\43\4\0"+
    "\23\43\1\u026e\7\43\26\0\7\43\6\0\32\43\4\0"+
    "\17\43\1\u026f\13\43\26\0\7\43\6\0\32\43\4\0"+
    "\16\43\1\u0270\14\43\26\0\7\43\6\0\32\43\4\0"+
    "\26\43\1\u0271\4\43\26\0\7\43\6\0\32\43\4\0"+
    "\11\43\1\u0272\21\43\26\0\7\43\6\0\21\43\1\u0260"+
    "\10\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\3\43\1\u023c\27\43\26\0\7\43\6\0\32\43\4\0"+
    "\1\43\1\u0273\31\43\26\0\7\43\6\0\32\43\4\0"+
    "\17\43\1\u0274\13\43\26\0\7\43\6\0\32\43\4\0"+
    "\23\43\1\u0275\7\43\26\0\7\43\6\0\32\43\4\0"+
    "\14\43\1\u0276\5\43\1\u0277\10\43\26\0\7\43\6\0"+
    "\1\u0278\31\43\4\0\33\43\26\0\7\43\6\0\4\43"+
    "\1\u0279\25\43\4\0\33\43\26\0\7\43\6\0\32\43"+
    "\4\0\11\43\1\u027a\21\43\26\0\7\43\6\0\32\43"+
    "\4\0\5\43\1\u021b\25\43\26\0\7\43\6\0\24\43"+
    "\1\u027b\5\43\4\0\33\43\26\0\7\43\6\0\32\43"+
    "\4\0\5\43\1\u027c\25\43\26\0\7\43\6\0\32\43"+
    "\4\0\15\43\1\u0116\15\43\26\0\7\43\6\0\16\43"+
    "\1\u027d\13\43\4\0\33\43\26\0\7\43\6\0\32\43"+
    "\4\0\26\43\1\u027e\4\43\26\0\7\43\6\0\32\43"+
    "\4\0\15\43\1\u027f\15\43\26\0\7\43\6\0\2\43"+
    "\1\u0280\27\43\4\0\33\43\26\0\7\43\6\0\32\43"+
    "\4\0\5\43\1\u0281\25\43\26\0\7\43\6\0\32\43"+
    "\4\0\14\43\1\u0171\16\43\26\0\7\43\6\0\32\43"+
    "\4\0\13\43\1\u021b\17\43\26\0\7\43\6\0\32\43"+
    "\4\0\3\43\1\u0282\27\43\26\0\7\43\6\0\4\43"+
    "\1\u0283\25\43\4\0\33\43\26\0\7\43\6\0\2\43"+
    "\1\u0284\27\43\4\0\33\43\26\0\7\43\6\0\32\43"+
    "\4\0\1\43\1\u0285\31\43\26\0\7\43\6\0\16\43"+
    "\1\u0286\13\43\4\0\33\43\26\0\7\43\6\0\32\43"+
    "\4\0\5\43\1\u0287\25\43\26\0\7\43\6\0\15\43"+
    "\1\u0288\14\43\4\0\33\43\26\0\7\43\6\0\24\43"+
    "\1\u0289\5\43\4\0\33\43\26\0\7\43\6\0\23\43"+
    "\1\u028a\6\43\4\0\33\43\26\0\7\43\6\0\32\43"+
    "\4\0\7\43\1\u0224\23\43\26\0\7\43\6\0\4\43"+
    "\1\u028b\25\43\4\0\33\43\26\0\7\43\6\0\4\43"+
    "\1\u028c\25\43\4\0\33\43\26\0\7\43\6\0\32\43"+
    "\4\0\16\43\1\u028d\14\43\26\0\7\43\6\0\4\43"+
    "\1\u028e\25\43\4\0\33\43\26\0\7\43\6\0\32\43"+
    "\4\0\5\43\1\u028f\25\43\26\0\7\43\6\0\32\43"+
    "\4\0\22\43\1\u0290\10\43\26\0\7\43\6\0\32\43"+
    "\4\0\22\43\1\u0291\10\43\26\0\7\43\6\0\32\43"+
    "\4\0\3\43\1\u0292\27\43\26\0\7\43\6\0\32\43"+
    "\4\0\24\43\1\u0292\6\43\26\0\7\43\6\0\32\43"+
    "\4\0\5\43\1\u0293\25\43\26\0\7\43\6\0\32\43"+
    "\4\0\13\43\1\u011b\17\43\26\0\7\43\6\0\32\43"+
    "\4\0\10\43\1\u025b\22\43\26\0\7\43\6\0\32\43"+
    "\4\0\23\43\1\u0294\7\43\26\0\7\43\6\0\32\43"+
    "\4\0\14\43\1\u0295\16\43\26\0\7\43\6\0\32\43"+
    "\4\0\24\43\1\u0296\6\43\26\0\7\43\6\0\32\43"+
    "\4\0\11\43\1\u0297\21\43\26\0\7\43\6\0\32\43"+
    "\4\0\15\43\1\u0298\15\43\26\0\7\43\6\0\32\43"+
    "\4\0\25\43\1\u0299\5\43\26\0\7\43\6\0\32\43"+
    "\4\0\20\43\1\u029a\12\43\26\0\7\43\6\0\32\43"+
    "\4\0\16\43\1\u029b\14\43\26\0\7\43\6\0\32\43"+
    "\4\0\14\43\1\u029c\16\43\26\0\7\43\6\0\32\43"+
    "\4\0\24\43\1\u029d\6\43\26\0\7\43\6\0\32\43"+
    "\4\0\1\43\1\166\31\43\26\0\7\43\6\0\32\43"+
    "\4\0\1\43\1\u029e\31\43\26\0\7\43\6\0\32\43"+
    "\4\0\5\43\1\u029f\25\43\26\0\7\43\6\0\32\43"+
    "\4\0\22\43\1\u02a0\10\43\26\0\7\43\6\0\32\43"+
    "\4\0\1\43\1\u02a1\31\43\26\0\5\43\1\u0212\1\43"+
    "\6\0\32\43\4\0\33\43\26\0\2\43\1\u0212\4\43"+
    "\6\0\32\43\4\0\33\43\26\0\4\43\1\u0212\2\43"+
    "\6\0\32\43\4\0\33\43\26\0\7\43\6\0\32\43"+
    "\4\0\22\43\1\u02a2\10\43\120\0\1\u02a3\41\0\7\43"+
    "\6\0\32\43\4\0\4\43\1\u02a4\26\43\26\0\7\43"+
    "\6\0\32\43\4\0\26\43\1\u02a5\4\43\26\0\7\43"+
    "\6\0\32\43\4\0\17\43\1\u02a6\13\43\112\0\1\u02a7"+
    "\47\0\7\43\6\0\32\43\4\0\1\43\1\u02a8\31\43"+
    "\26\0\7\43\6\0\32\43\4\0\24\43\1\u02a9\6\43"+
    "\26\0\7\43\6\0\32\43\4\0\1\43\1\u02aa\31\43"+
    "\26\0\7\43\6\0\32\43\4\0\5\43\1\u02ab\25\43"+
    "\26\0\7\43\6\0\32\43\4\0\11\43\1\u02ac\21\43"+
    "\26\0\7\43\6\0\32\43\4\0\5\43\1\u025b\25\43"+
    "\26\0\7\43\6\0\32\43\4\0\11\43\1\u02ad\21\43"+
    "\26\0\7\43\6\0\32\43\4\0\22\43\1\u02ae\10\43"+
    "\26\0\7\43\6\0\32\43\4\0\24\43\1\u0212\6\43"+
    "\26\0\7\43\6\0\32\43\4\0\11\43\1\u02af\21\43"+
    "\26\0\7\43\6\0\32\43\4\0\3\43\1\u02b0\12\43"+
    "\1\u018d\14\43\26\0\7\43\6\0\32\43\4\0\22\43"+
    "\1\u02b1\10\43\26\0\7\43\6\0\32\43\4\0\3\43"+
    "\1\u02b2\27\43\26\0\7\43\6\0\32\43\4\0\10\43"+
    "\1\u02b3\22\43\26\0\7\43\6\0\32\43\4\0\27\43"+
    "\1\u02b4\3\43\26\0\7\43\6\0\32\43\4\0\23\43"+
    "\1\u02b5\7\43\26\0\1\43\1\u0229\1\43\1\u022a\1\43"+
    "\1\u022b\1\u0212\6\0\32\43\4\0\33\43\26\0\7\43"+
    "\6\0\32\43\4\0\24\43\1\u02b6\6\43\26\0\7\43"+
    "\6\0\32\43\4\0\5\43\1\u02b7\25\43\26\0\7\43"+
    "\6\0\32\43\4\0\4\43\1\u02b8\26\43\61\0\1\u02b9"+
    "\100\0\7\43\6\0\32\43\4\0\16\43\1\u02ba\14\43"+
    "\26\0\7\43\6\0\32\43\4\0\23\43\1\u02bb\7\43"+
    "\26\0\7\43\6\0\32\43\4\0\23\43\1\u02bc\7\43"+
    "\26\0\7\43\6\0\17\43\1\u02bd\12\43\4\0\33\43"+
    "\26\0\7\43\6\0\4\43\1\u02be\25\43\4\0\33\43"+
    "\26\0\7\43\6\0\15\43\1\u02bf\14\43\4\0\33\43"+
    "\26\0\7\43\6\0\21\43\1\u02c0\10\43\4\0\33\43"+
    "\26\0\7\43\6\0\4\43\1\u018f\25\43\4\0\33\43"+
    "\26\0\7\43\6\0\1\u02c1\31\43\4\0\33\43\26\0"+
    "\7\43\6\0\4\43\1\u017a\25\43\4\0\33\43\26\0"+
    "\7\43\6\0\15\43\1\u02c2\14\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\1\43\1\u02c3\31\43\26\0"+
    "\7\43\6\0\32\43\4\0\24\43\1\u015f\6\43\26\0"+
    "\7\43\6\0\22\43\1\365\7\43\4\0\33\43\26\0"+
    "\7\43\6\0\6\43\1\u02c4\23\43\4\0\33\43\61\0"+
    "\1\u02c5\100\0\7\43\6\0\32\43\4\0\4\43\1\u0142"+
    "\26\43\7\0\1\u02c6\16\0\7\43\6\0\32\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\20\43\1\u02c7"+
    "\12\43\26\0\7\43\6\0\32\43\4\0\14\43\1\u02c8"+
    "\16\43\26\0\7\43\6\0\6\43\1\u028c\23\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u02c9"+
    "\25\43\26\0\7\43\6\0\23\43\1\u01d6\6\43\4\0"+
    "\33\43\54\0\1\u02ca\105\0\7\43\6\0\32\43\4\0"+
    "\5\43\1\u02cb\25\43\26\0\7\43\6\0\32\43\4\0"+
    "\16\43\1\u02cc\14\43\26\0\7\43\6\0\32\43\4\0"+
    "\26\43\1\u02cd\4\43\26\0\7\43\6\0\32\43\4\0"+
    "\5\43\1\u02b1\25\43\26\0\7\43\6\0\32\43\4\0"+
    "\23\43\1\u02ce\7\43\26\0\7\43\6\0\32\43\4\0"+
    "\6\43\1\u02cf\24\43\26\0\7\43\6\0\32\43\4\0"+
    "\20\43\1\u02d0\12\43\26\0\7\43\6\0\32\43\4\0"+
    "\27\43\1\u028d\3\43\26\0\7\43\6\0\32\43\4\0"+
    "\10\43\1\u02d1\22\43\26\0\7\43\6\0\32\43\4\0"+
    "\5\43\1\u02d2\25\43\26\0\7\43\6\0\32\43\4\0"+
    "\16\43\1\u02d3\14\43\26\0\7\43\6\0\32\43\4\0"+
    "\24\43\1\u02d4\6\43\26\0\7\43\6\0\32\43\4\0"+
    "\16\43\1\u02d5\14\43\26\0\7\43\6\0\32\43\4\0"+
    "\5\43\1\333\25\43\26\0\7\43\6\0\32\43\4\0"+
    "\17\43\1\u02d6\13\43\26\0\7\43\6\0\32\43\4\0"+
    "\11\43\1\u02d7\21\43\26\0\7\43\6\0\21\43\1\u02d8"+
    "\10\43\4\0\33\43\26\0\7\43\6\0\3\43\1\u02d9"+
    "\26\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\1\43\1\u02da\31\43\26\0\7\43\6\0\14\43\1\u015b"+
    "\15\43\4\0\33\43\26\0\7\43\6\0\4\43\1\u02db"+
    "\25\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\16\43\1\u02dc\14\43\26\0\7\43\6\0\32\43\4\0"+
    "\5\43\1\u02dd\25\43\26\0\7\43\6\0\32\43\4\0"+
    "\5\43\1\u01fd\25\43\26\0\7\43\6\0\23\43\1\u02de"+
    "\6\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\4\43\1\u02df\26\43\26\0\7\43\6\0\32\43\4\0"+
    "\24\43\1\u02e0\6\43\26\0\7\43\6\0\1\u01c0\31\43"+
    "\4\0\33\43\26\0\7\43\6\0\32\43\4\0\23\43"+
    "\1\u0106\7\43\26\0\7\43\6\0\32\43\4\0\6\43"+
    "\1\u02e1\24\43\26\0\7\43\6\0\32\43\4\0\7\43"+
    "\1\u02e2\23\43\7\0\1\u02e3\16\0\7\43\6\0\32\43"+
    "\4\0\33\43\26\0\7\43\6\0\4\43\1\u0251\25\43"+
    "\4\0\33\43\26\0\7\43\6\0\4\43\1\u0151\25\43"+
    "\4\0\33\43\26\0\7\43\6\0\22\43\1\u01d6\7\43"+
    "\4\0\33\43\26\0\7\43\6\0\32\43\4\0\11\43"+
    "\1\151\21\43\26\0\7\43\6\0\32\43\4\0\26\43"+
    "\1\u02e4\4\43\26\0\7\43\6\0\16\43\1\u02e5\13\43"+
    "\4\0\33\43\26\0\7\43\6\0\32\43\4\0\1\43"+
    "\1\u02e6\31\43\26\0\7\43\6\0\32\43\4\0\24\43"+
    "\1\u01a4\6\43\26\0\7\43\6\0\32\43\4\0\1\43"+
    "\1\u02e7\31\43\26\0\7\43\6\0\32\43\4\0\5\43"+
    "\1\u02e8\25\43\26\0\7\43\6\0\32\43\4\0\16\43"+
    "\1\u02e9\14\43\26\0\7\43\6\0\32\43\4\0\1\43"+
    "\1\u02ea\31\43\26\0\7\43\6\0\32\43\4\0\14\43"+
    "\1\u02eb\16\43\26\0\7\43\6\0\32\43\4\0\24\43"+
    "\1\u025b\6\43\26\0\7\43\6\0\32\43\4\0\4\43"+
    "\1\u02ec\26\43\26\0\7\43\6\0\32\43\4\0\14\43"+
    "\1\u02ed\16\43\26\0\3\43\1\u022a\1\43\1\u022b\1\43"+
    "\6\0\32\43\4\0\33\43\26\0\7\43\6\0\32\43"+
    "\4\0\14\43\1\u02df\16\43\26\0\7\43\6\0\32\43"+
    "\4\0\15\43\1\u02ee\15\43\26\0\7\43\6\0\32\43"+
    "\4\0\24\43\1\u0224\6\43\26\0\7\43\6\0\32\43"+
    "\4\0\16\43\1\u02ef\14\43\26\0\7\43\6\0\32\43"+
    "\4\0\6\43\1\u02f0\24\43\125\0\1\u02f1\34\0\7\43"+
    "\6\0\32\43\4\0\1\43\1\u02f2\31\43\26\0\7\43"+
    "\6\0\32\43\4\0\5\43\1\u0224\25\43\26\0\7\43"+
    "\6\0\32\43\4\0\3\43\1\u0225\27\43\117\0\1\u02f3"+
    "\42\0\7\43\6\0\32\43\4\0\7\43\1\u02f4\23\43"+
    "\26\0\7\43\6\0\32\43\4\0\24\43\1\u02f5\6\43"+
    "\26\0\7\43\6\0\32\43\4\0\3\43\1\u02f6\27\43"+
    "\26\0\7\43\6\0\32\43\4\0\3\43\1\u02df\27\43"+
    "\26\0\7\43\6\0\32\43\4\0\22\43\1\u02f7\10\43"+
    "\26\0\7\43\6\0\32\43\4\0\16\43\1\u02b8\14\43"+
    "\26\0\7\43\6\0\32\43\4\0\3\43\1\u0296\27\43"+
    "\26\0\7\43\6\0\32\43\4\0\24\43\1\u02f8\6\43"+
    "\26\0\7\43\6\0\32\43\4\0\10\43\1\u02f9\22\43"+
    "\26\0\7\43\6\0\32\43\4\0\22\43\1\u02fa\10\43"+
    "\26\0\7\43\6\0\32\43\4\0\23\43\1\213\7\43"+
    "\26\0\7\43\6\0\32\43\4\0\11\43\1\u02fb\21\43"+
    "\26\0\7\43\6\0\32\43\4\0\11\43\1\u02fc\21\43"+
    "\60\0\1\u02fd\101\0\7\43\6\0\32\43\4\0\4\43"+
    "\1\u02fe\26\43\26\0\7\43\6\0\32\43\4\0\23\43"+
    "\1\u02ff\7\43\26\0\7\43\6\0\32\43\4\0\17\43"+
    "\1\333\13\43\26\0\7\43\6\0\15\43\1\u0300\14\43"+
    "\4\0\33\43\26\0\7\43\6\0\1\u0301\31\43\4\0"+
    "\33\43\26\0\7\43\6\0\22\43\1\u0302\7\43\4\0"+
    "\33\43\26\0\7\43\6\0\2\43\1\u01d9\27\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\24\43\1\u0303"+
    "\6\43\26\0\7\43\6\0\15\43\1\u0304\14\43\4\0"+
    "\33\43\67\0\1\u0305\110\0\1\u0306\115\0\7\43\6\0"+
    "\32\43\4\0\5\43\1\u02cf\25\43\26\0\7\43\6\0"+
    "\15\43\1\u0307\14\43\4\0\33\43\26\0\7\43\6\0"+
    "\32\43\4\0\23\43\1\u0308\7\43\61\0\1\u0309\100\0"+
    "\7\43\6\0\32\43\4\0\10\43\1\u030a\22\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u030b\25\43\26\0"+
    "\7\43\6\0\32\43\4\0\1\43\1\u030c\31\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u030d\25\43\26\0"+
    "\7\43\6\0\32\43\4\0\22\43\1\u030e\10\43\26\0"+
    "\7\43\6\0\32\43\4\0\7\43\1\u01e0\23\43\26\0"+
    "\7\43\6\0\32\43\4\0\17\43\1\u030f\13\43\26\0"+
    "\7\43\6\0\32\43\4\0\1\43\1\u0310\31\43\26\0"+
    "\7\43\6\0\32\43\4\0\4\43\1\u0311\26\43\26\0"+
    "\7\43\6\0\30\43\1\u0304\1\43\4\0\33\43\26\0"+
    "\7\43\6\0\24\43\1\u0312\5\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\14\43\1\u0313\16\43\26\0"+
    "\7\43\6\0\32\43\4\0\26\43\1\u0314\4\43\26\0"+
    "\7\43\6\0\32\43\4\0\14\43\1\u0315\16\43\26\0"+
    "\7\43\6\0\7\43\1\u0316\22\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\25\43\1\u0317\5\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u0174\25\43\43\0"+
    "\1\u0318\116\0\7\43\6\0\32\43\4\0\5\43\1\u0319"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\16\43\1\u031a"+
    "\14\43\26\0\7\43\6\0\32\43\4\0\3\43\1\u0217"+
    "\27\43\26\0\7\43\6\0\32\43\4\0\16\43\1\u0212"+
    "\14\43\26\0\7\43\6\0\32\43\4\0\30\43\1\u031b"+
    "\2\43\26\0\7\43\6\0\32\43\4\0\25\43\1\u031c"+
    "\5\43\26\0\7\43\6\0\32\43\4\0\14\43\1\u0212"+
    "\16\43\26\0\7\43\6\0\32\43\4\0\24\43\1\u02df"+
    "\6\43\26\0\7\43\6\0\32\43\4\0\23\43\1\u031d"+
    "\7\43\26\0\7\43\6\0\32\43\4\0\31\43\1\u01fd"+
    "\1\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u031e"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\3\43\1\u031f"+
    "\27\43\26\0\7\43\6\0\32\43\4\0\1\43\1\u0320"+
    "\31\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u0321"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u02df"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\24\43\1\u01f5"+
    "\6\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u0322"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\6\43\1\u0323"+
    "\24\43\26\0\7\43\6\0\32\43\4\0\17\43\1\u0324"+
    "\13\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u0325"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\14\43\1\u0326"+
    "\16\43\65\0\1\u0327\74\0\7\43\6\0\32\43\4\0"+
    "\14\43\1\u0328\16\43\26\0\7\43\6\0\16\43\1\u0329"+
    "\13\43\4\0\33\43\26\0\7\43\6\0\10\43\1\u032a"+
    "\21\43\4\0\33\43\26\0\7\43\6\0\4\43\1\u032b"+
    "\25\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\5\43\1\213\25\43\7\0\1\u032c\16\0\7\43\6\0"+
    "\32\43\4\0\33\43\66\0\1\u032d\140\0\1\u032e\66\0"+
    "\7\43\6\0\32\43\4\0\1\43\1\u032f\31\43\53\0"+
    "\1\u0330\106\0\7\43\6\0\32\43\4\0\5\43\1\u0331"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\22\43\1\u0332"+
    "\10\43\26\0\7\43\6\0\32\43\4\0\3\43\1\u0333"+
    "\27\43\26\0\7\43\6\0\32\43\4\0\22\43\1\u0334"+
    "\10\43\26\0\7\43\6\0\32\43\4\0\22\43\1\u0335"+
    "\10\43\26\0\7\43\6\0\32\43\4\0\22\43\1\u0336"+
    "\10\43\26\0\7\43\6\0\32\43\4\0\4\43\1\u0337"+
    "\26\43\26\0\7\43\6\0\32\43\4\0\1\43\1\u0338"+
    "\3\43\1\u0339\25\43\26\0\7\43\6\0\21\43\1\u033a"+
    "\10\43\4\0\33\43\26\0\7\43\6\0\32\43\4\0"+
    "\5\43\1\u033b\25\43\26\0\7\43\6\0\32\43\4\0"+
    "\31\43\1\u0296\1\43\26\0\7\43\6\0\32\43\4\0"+
    "\1\43\1\u033c\31\43\26\0\7\43\6\0\32\43\4\0"+
    "\22\43\1\u033d\10\43\56\0\1\u033e\103\0\7\43\6\0"+
    "\32\43\4\0\16\43\1\u033f\14\43\26\0\7\43\6\0"+
    "\32\43\4\0\14\43\1\u0340\16\43\26\0\1\43\1\u0341"+
    "\3\43\1\u022b\1\43\6\0\32\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u0342\25\43\26\0"+
    "\7\43\6\0\32\43\4\0\16\43\1\u0343\14\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u0344\25\43\26\0"+
    "\7\43\6\0\32\43\4\0\3\43\1\u0345\27\43\26\0"+
    "\7\43\6\0\32\43\4\0\23\43\1\u0224\7\43\26\0"+
    "\7\43\6\0\32\43\4\0\20\43\1\u0142\12\43\26\0"+
    "\7\43\6\0\32\43\4\0\16\43\1\u0346\14\43\26\0"+
    "\7\43\6\0\32\43\4\0\16\43\1\u0217\14\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u0296\25\43\66\0"+
    "\1\u0347\73\0\7\43\6\0\32\43\4\0\5\43\1\u0348"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\6\43\1\213"+
    "\24\43\26\0\7\43\6\0\15\43\1\u0349\14\43\4\0"+
    "\33\43\55\0\1\u034a\125\0\1\u034b\112\0\7\43\6\0"+
    "\32\43\4\0\15\43\1\u034c\15\43\60\0\1\u034d\101\0"+
    "\7\43\6\0\32\43\4\0\22\43\1\u034e\10\43\26\0"+
    "\7\43\6\0\32\43\4\0\22\43\1\u034f\10\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u0350\25\43\26\0"+
    "\7\43\6\0\32\43\4\0\11\43\1\u0351\21\43\26\0"+
    "\7\43\6\0\32\43\4\0\11\43\1\u0352\21\43\26\0"+
    "\7\43\6\0\32\43\4\0\23\43\1\u0142\7\43\26\0"+
    "\7\43\6\0\32\43\4\0\2\43\1\u02fc\30\43\26\0"+
    "\7\43\6\0\32\43\4\0\23\43\1\u0296\7\43\26\0"+
    "\7\43\6\0\4\43\1\u0158\25\43\4\0\33\43\26\0"+
    "\7\43\6\0\32\43\4\0\16\43\1\u029a\14\43\26\0"+
    "\7\43\6\0\32\43\4\0\16\43\1\u0353\14\43\26\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u0354\25\43\56\0"+
    "\1\u0355\103\0\7\43\6\0\32\43\4\0\24\43\1\u0337"+
    "\6\43\26\0\7\43\6\0\32\43\4\0\31\43\1\u0142"+
    "\1\43\26\0\2\43\1\u0356\4\43\6\0\32\43\4\0"+
    "\33\43\26\0\7\43\6\0\32\43\4\0\24\43\1\u0357"+
    "\6\43\26\0\7\43\6\0\32\43\4\0\17\43\1\u0358"+
    "\13\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u0359"+
    "\25\43\26\0\7\43\6\0\32\43\4\0\11\43\1\u035a"+
    "\21\43\64\0\1\u035b\75\0\7\43\6\0\32\43\4\0"+
    "\22\43\1\u0308\10\43\26\0\7\43\6\0\23\43\1\u0251"+
    "\6\43\4\0\33\43\47\0\1\u035c\150\0\1\u035d\75\0"+
    "\7\43\6\0\32\43\4\0\5\43\1\u035e\25\43\26\0"+
    "\7\43\6\0\32\43\4\0\11\43\1\u0217\21\43\26\0"+
    "\7\43\6\0\32\43\4\0\11\43\1\u035f\21\43\26\0"+
    "\7\43\6\0\32\43\4\0\24\43\1\u0360\6\43\26\0"+
    "\7\43\6\0\32\43\4\0\4\43\1\u0360\26\43\26\0"+
    "\7\43\6\0\32\43\4\0\4\43\1\u0361\26\43\26\0"+
    "\6\43\1\u0212\6\0\32\43\4\0\33\43\26\0\7\43"+
    "\6\0\32\43\4\0\23\43\1\u0362\7\43\26\0\7\43"+
    "\6\0\32\43\4\0\6\43\1\u0363\24\43\26\0\7\43"+
    "\6\0\32\43\4\0\32\43\1\u0364\43\0\1\u0365\163\0"+
    "\1\u0366\47\0\1\u0267\152\0\7\43\6\0\32\43\4\0"+
    "\23\43\1\u0367\7\43\26\0\7\43\6\0\32\43\4\0"+
    "\4\43\1\u0326\26\43\26\0\7\43\6\0\32\43\4\0"+
    "\1\43\1\u0368\31\43\26\0\7\43\6\0\32\43\4\0"+
    "\14\43\1\u0369\16\43\26\0\7\43\6\0\32\43\4\0"+
    "\5\43\1\u036a\25\43\53\0\1\u036b\106\0\7\43\6\0"+
    "\32\43\4\0\20\43\1\u036c\12\43\26\0\7\43\6\0"+
    "\32\43\4\0\2\43\1\u036d\30\43\26\0\7\43\6\0"+
    "\32\43\4\0\5\43\1\u036e\25\43\26\0\7\43\6\0"+
    "\32\43\4\0\4\43\1\u0296\26\43\60\0\1\u036f\101\0"+
    "\7\43\6\0\32\43\4\0\1\43\1\u0370\31\43\26\0"+
    "\7\43\6\0\32\43\4\0\14\43\1\u0371\16\43\26\0"+
    "\7\43\6\0\32\43\4\0\22\43\1\u017a\10\43\66\0"+
    "\1\u0372\73\0\7\43\6\0\32\43\4\0\3\43\1\u02c7"+
    "\27\43\26\0\7\43\6\0\32\43\4\0\5\43\1\u0142"+
    "\25\43\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[70932];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\3\1\2\11\2\1\1\11"+
    "\1\1\1\11\2\1\2\11\34\1\2\11\24\1\1\11"+
    "\1\1\3\11\1\0\3\11\1\0\4\11\2\0\2\11"+
    "\231\1\1\0\230\1\1\0\40\1\1\0\200\1\1\0"+
    "\3\1\1\0\27\1\1\0\24\1\1\0\10\1\1\0"+
    "\73\1\1\0\3\1\1\0\21\1\1\0\13\1\2\0"+
    "\3\1\1\0\30\1\1\0\15\1\1\11\1\1\1\11"+
    "\11\1\1\0\7\1\2\0\2\1\1\0\16\1\1\0"+
    "\16\1\1\0\4\1\2\0\1\11\1\1\1\0\15\1"+
    "\1\0\10\1\1\0\2\1\2\0\1\1\1\11\7\1"+
    "\1\11\5\1\3\0\7\1\1\0\1\11\4\1\1\0"+
    "\3\1\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[882];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int _numberTokens = 0;
    private boolean _thereIsTokens = false;
    private HashMap<String, Integer> identifiers = new HashMap<String, Integer>();
    
    public boolean thereIsTokens() {return this._thereIsTokens;}
    public int numberTokens() {return this._numberTokens;}
    public HashMap<String, Integer> getIdentifiers() {return this.identifiers;}

    // Creates and returns a Token Object
    private Token foundSymbol(String token, String lexeme, int line, int column) {
        this._thereIsTokens = true;
        this._numberTokens++;

        // value given lexeme as a key
        Integer value = identifiers.get(lexeme);
        Integer size = identifiers.size();
        
        // Logic for storing identifiers in the Hashmap
        if (token == "Identificador") {
            if (value == null) {
                identifiers.put(lexeme, size);
                lexeme = size.toString();
            } else {
                lexeme = value.toString();
            }
        }   

        Token t = new Token(token, lexeme, line, column);
        return t;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    this._thereIsTokens = false;
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return foundSymbol("ERROR", yytext(), yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 2:
            { /* Ignore space, tab, new line and carriage return characters */
            }
          // fall through
          case 114: break;
          case 3:
            { return foundSymbol("Negacion", "", yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 4:
            { return foundSymbol("Comentario en linea", yytext(), yyline, yycolumn);
            }
          // fall through
          case 116: break;
          case 5:
            { return foundSymbol("Operador Aritmetico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 117: break;
          case 6:
            { return foundSymbol("Operador de Bits", yytext(), yyline, yycolumn);
            }
          // fall through
          case 118: break;
          case 7:
            { return foundSymbol("Parentesis Izquierdo", "", yyline, yycolumn);
            }
          // fall through
          case 119: break;
          case 8:
            { return foundSymbol("Parentesis Derecho", "", yyline, yycolumn);
            }
          // fall through
          case 120: break;
          case 9:
            { return foundSymbol("Coma", "", yyline, yycolumn);
            }
          // fall through
          case 121: break;
          case 10:
            { return foundSymbol("Punto", "", yyline, yycolumn);
            }
          // fall through
          case 122: break;
          case 11:
            { return foundSymbol("Entero", yytext(), yyline, yycolumn);
            }
          // fall through
          case 123: break;
          case 12:
            { return foundSymbol("Dos puntos", "", yyline, yycolumn);
            }
          // fall through
          case 124: break;
          case 13:
            { return foundSymbol("Punto y coma", "", yyline, yycolumn);
            }
          // fall through
          case 125: break;
          case 14:
            { return foundSymbol("Comparador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 126: break;
          case 15:
            { return foundSymbol("Asignador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 127: break;
          case 16:
            { return foundSymbol("Operador Ternario", "", yyline, yycolumn);
            }
          // fall through
          case 128: break;
          case 17:
            { return foundSymbol("Identificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 129: break;
          case 18:
            { return foundSymbol("Corchete Izquierdo", "", yyline, yycolumn);
            }
          // fall through
          case 130: break;
          case 19:
            { return foundSymbol("Corchete Derecho", "", yyline, yycolumn);
            }
          // fall through
          case 131: break;
          case 20:
            { return foundSymbol("Llave Izquierda", "", yyline, yycolumn);
            }
          // fall through
          case 132: break;
          case 21:
            { return foundSymbol("Llave Derecha", "", yyline, yycolumn);
            }
          // fall through
          case 133: break;
          case 22:
            { return foundSymbol("Cadena", yytext(), yyline, yycolumn);
            }
          // fall through
          case 134: break;
          case 23:
            { return foundSymbol("Operador Logico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 135: break;
          case 24:
            { return foundSymbol("Caracter", yytext(), yyline, yycolumn);
            }
          // fall through
          case 136: break;
          case 25:
            { return foundSymbol("Termina comentario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 137: break;
          case 26:
            { return foundSymbol("Operador Unario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 138: break;
          case 27:
            { return foundSymbol("Inicia comentario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 139: break;
          case 28:
            { return foundSymbol("Complejo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 140: break;
          case 29:
            { return foundSymbol("Operador Nulo", "", yyline, yycolumn);
            }
          // fall through
          case 141: break;
          case 30:
            { return foundSymbol("Referencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 142: break;
          case 31:
            { return foundSymbol("Of", "", yyline, yycolumn);
            }
          // fall through
          case 143: break;
          case 32:
            { return foundSymbol("Renombrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 144: break;
          case 33:
            { return foundSymbol("Ciclo Do", "", yyline, yycolumn);
            }
          // fall through
          case 145: break;
          case 34:
            { return foundSymbol("Condicional", "", yyline, yycolumn);
            }
          // fall through
          case 146: break;
          case 35:
            { return foundSymbol("Operador de Pertenencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 147: break;
          case 36:
            { return foundSymbol("Operador de identidad", yytext(), yyline, yycolumn);
            }
          // fall through
          case 148: break;
          case 37:
            { return foundSymbol("Decimal", yytext(), yyline, yycolumn);
            }
          // fall through
          case 149: break;
          case 38:
            { return foundSymbol("Añadir", yytext(), yyline, yycolumn);
            }
          // fall through
          case 150: break;
          case 39:
            { return foundSymbol("Condiciones Query", yytext(), yyline, yycolumn);
            }
          // fall through
          case 151: break;
          case 40:
            { return foundSymbol("Ordenar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 152: break;
          case 41:
            { return foundSymbol("Almacenamiento", yytext(), yyline, yycolumn);
            }
          // fall through
          case 153: break;
          case 42:
            { return foundSymbol("Salida", yytext(), yyline, yycolumn);
            }
          // fall through
          case 154: break;
          case 43:
            { return foundSymbol("Get", yytext(), yyline, yycolumn);
            }
          // fall through
          case 155: break;
          case 44:
            { return foundSymbol("Variable", yytext(), yyline, yycolumn);
            }
          // fall through
          case 156: break;
          case 45:
            { return foundSymbol("Modificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 157: break;
          case 46:
            { return foundSymbol("Comentario especial", yytext(), yyline, yycolumn);
            }
          // fall through
          case 158: break;
          case 47:
            { return foundSymbol("Update", yytext(), yyline, yycolumn);
            }
          // fall through
          case 159: break;
          case 48:
            { return foundSymbol("Funcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 160: break;
          case 49:
            { return foundSymbol("Limite", yytext(), yyline, yycolumn);
            }
          // fall through
          case 161: break;
          case 50:
            { return foundSymbol("Borrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 162: break;
          case 51:
            { return foundSymbol("Ciclo For", "", yyline, yycolumn);
            }
          // fall through
          case 163: break;
          case 52:
            { return foundSymbol("Tipo de dato", yytext(), yyline, yycolumn);
            }
          // fall through
          case 164: break;
          case 53:
            { return foundSymbol("Crear", yytext(), yyline, yycolumn);
            }
          // fall through
          case 165: break;
          case 54:
            { return foundSymbol("Intentar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 166: break;
          case 55:
            { return foundSymbol("Cast", yytext(), yyline, yycolumn);
            }
          // fall through
          case 167: break;
          case 56:
            { return foundSymbol("Ejecutar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 168: break;
          case 57:
            { return foundSymbol("Iterador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 169: break;
          case 58:
            { return foundSymbol("GoTo", "", yyline, yycolumn);
            }
          // fall through
          case 170: break;
          case 59:
            { return foundSymbol("Insertar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 171: break;
          case 60:
            { return foundSymbol("Join", yytext(), yyline, yycolumn);
            }
          // fall through
          case 172: break;
          case 61:
            { return foundSymbol("Valor nulo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 173: break;
          case 62:
            { return foundSymbol("Incremento", "", yyline, yycolumn);
            }
          // fall through
          case 174: break;
          case 63:
            { return foundSymbol("Debug", "", yyline, yycolumn);
            }
          // fall through
          case 175: break;
          case 64:
            { return foundSymbol("Consecuencia Itentar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 176: break;
          case 65:
            { return foundSymbol("Booleano", yytext(), yyline, yycolumn);
            }
          // fall through
          case 177: break;
          case 66:
            { return foundSymbol("Vista", "", yyline, yycolumn);
            }
          // fall through
          case 178: break;
          case 67:
            { return foundSymbol("Case", "", yyline, yycolumn);
            }
          // fall through
          case 179: break;
          case 68:
            { return foundSymbol("Estructura de datos", yytext(), yyline, yycolumn);
            }
          // fall through
          case 180: break;
          case 69:
            { return foundSymbol("Consecuencia Condicional", "", yyline, yycolumn);
            }
          // fall through
          case 181: break;
          case 70:
            { return foundSymbol("Consequencia", "", yyline, yycolumn);
            }
          // fall through
          case 182: break;
          case 71:
            { return foundSymbol("Enum", "", yyline, yycolumn);
            }
          // fall through
          case 183: break;
          case 72:
            { return foundSymbol("Importar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 184: break;
          case 73:
            { return foundSymbol("Pass", "", yyline, yycolumn);
            }
          // fall through
          case 185: break;
          case 74:
            { return foundSymbol("This", yytext(), yyline, yycolumn);
            }
          // fall through
          case 186: break;
          case 75:
            { return foundSymbol("Void", "", yyline, yycolumn);
            }
          // fall through
          case 187: break;
          case 76:
            { return foundSymbol("Alterar", "", yyline, yycolumn);
            }
          // fall through
          case 188: break;
          case 77:
            { return foundSymbol("Restriccion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 189: break;
          case 78:
            { return foundSymbol("Excepcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 190: break;
          case 79:
            { return foundSymbol("Evento", "", yyline, yycolumn);
            }
          // fall through
          case 191: break;
          case 80:
            { return foundSymbol("Indice", "", yyline, yycolumn);
            }
          // fall through
          case 192: break;
          case 81:
            { return foundSymbol("Tabla", "", yyline, yycolumn);
            }
          // fall through
          case 193: break;
          case 82:
            { return foundSymbol("Union", yytext(), yyline, yycolumn);
            }
          // fall through
          case 194: break;
          case 83:
            { return foundSymbol("Query Condicional", yytext(), yyline, yycolumn);
            }
          // fall through
          case 195: break;
          case 84:
            { return foundSymbol("Asyncrono", yytext(), yyline, yycolumn);
            }
          // fall through
          case 196: break;
          case 85:
            { return foundSymbol("Clase", "", yyline, yycolumn);
            }
          // fall through
          case 197: break;
          case 86:
            { return foundSymbol("Modificador de No Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 198: break;
          case 87:
            { return foundSymbol("Imprimir", "", yyline, yycolumn);
            }
          // fall through
          case 199: break;
          case 88:
            { return foundSymbol("Clase Padre", yytext(), yyline, yycolumn);
            }
          // fall through
          case 200: break;
          case 89:
            { return foundSymbol("Ciclo While", "", yyline, yycolumn);
            }
          // fall through
          case 201: break;
          case 90:
            { return foundSymbol("Regresar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 202: break;
          case 91:
            { return foundSymbol("Backup", "", yyline, yycolumn);
            }
          // fall through
          case 203: break;
          case 92:
            { return foundSymbol("Columna", "", yyline, yycolumn);
            }
          // fall through
          case 204: break;
          case 93:
            { return foundSymbol("Module", "", yyline, yycolumn);
            }
          // fall through
          case 205: break;
          case 94:
            { return foundSymbol("Opcion", "", yyline, yycolumn);
            }
          // fall through
          case 206: break;
          case 95:
            { return foundSymbol("Select", "", yyline, yycolumn);
            }
          // fall through
          case 207: break;
          case 96:
            { return foundSymbol("Modificador de Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 208: break;
          case 97:
            { return foundSymbol("Operador de typo", "", yyline, yycolumn);
            }
          // fall through
          case 209: break;
          case 98:
            { return foundSymbol("Lamda", "", yyline, yycolumn);
            }
          // fall through
          case 210: break;
          case 99:
            { return foundSymbol("Switch", "", yyline, yycolumn);
            }
          // fall through
          case 211: break;
          case 100:
            { return foundSymbol("Rango", "", yyline, yycolumn);
            }
          // fall through
          case 212: break;
          case 101:
            { return foundSymbol("AddHandler", yytext(), yyline, yycolumn);
            }
          // fall through
          case 213: break;
          case 102:
            { return foundSymbol("Parcial", "", yyline, yycolumn);
            }
          // fall through
          case 214: break;
          case 103:
            { return foundSymbol("Extiende", "", yyline, yycolumn);
            }
          // fall through
          case 215: break;
          case 104:
            { return foundSymbol("Paquete", "", yyline, yycolumn);
            }
          // fall through
          case 216: break;
          case 105:
            { return foundSymbol("Database", "", yyline, yycolumn);
            }
          // fall through
          case 217: break;
          case 106:
            { return foundSymbol("Operador de VB", "", yyline, yycolumn);
            }
          // fall through
          case 218: break;
          case 107:
            { return foundSymbol("Continuar", "", yyline, yycolumn);
            }
          // fall through
          case 219: break;
          case 108:
            { return foundSymbol("Namespace", "", yyline, yycolumn);
            }
          // fall through
          case 220: break;
          case 109:
            { return foundSymbol("Estructura", "", yyline, yycolumn);
            }
          // fall through
          case 221: break;
          case 110:
            { return foundSymbol("Interface", "", yyline, yycolumn);
            }
          // fall through
          case 222: break;
          case 111:
            { return foundSymbol("Implementa", "", yyline, yycolumn);
            }
          // fall through
          case 223: break;
          case 112:
            { return foundSymbol("Operador de instancia", "", yyline, yycolumn);
            }
          // fall through
          case 224: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
