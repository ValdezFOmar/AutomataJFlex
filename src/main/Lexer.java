// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/resources/Lexer.flex

// User Code (Import dependencies or declare variables)
import java.util.HashMap;
/*TODO.
    - Refactor some of the token (separe the 'Separator' category into their own tokens)
*/

@SuppressWarnings("fallthrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\40\0\1\1\1\2\1\3\1\4\1\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\20\1\25"+
    "\1\20\1\26\1\20\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\0\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\0\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131"+
    "\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\2\4\1\10\1\4\1\11\1\4\1\12"+
    "\1\13\1\14\1\15\1\16\1\15\1\2\30\17\1\20"+
    "\1\21\1\5\23\17\1\22\1\5\1\23\1\5\1\15"+
    "\1\0\1\24\1\16\1\2\1\0\1\25\1\4\2\0"+
    "\1\26\62\17\1\27\12\17\1\30\45\17\1\31\12\17"+
    "\1\32\11\17\1\33\1\17\1\34\1\35\6\17\1\2"+
    "\25\17\1\36\1\0\1\36\1\37\1\17\1\40\36\17"+
    "\1\41\4\17\1\42\12\17\1\43\12\17\1\44\1\4"+
    "\16\17\1\45\5\17\1\3\10\17\1\46\6\17\1\47"+
    "\2\17\1\50\35\17\1\47\1\51\11\17\1\32\5\17"+
    "\1\52\1\0\3\17\1\53\1\17\1\2\22\17\1\54"+
    "\7\17\1\0\13\17\1\55\5\17\1\56\6\17\1\32"+
    "\12\17\1\57\5\17\1\60\10\17\1\61\27\17\1\62"+
    "\1\63\3\17\1\64\1\65\10\17\1\66\11\17\1\52"+
    "\7\17\1\67\1\70\5\17\1\71\10\17\1\0\3\17"+
    "\1\0\1\17\1\72\17\17\1\52\3\17\1\0\1\73"+
    "\2\17\1\31\3\17\1\74\11\17\1\75\1\76\1\17"+
    "\1\0\6\17\1\77\1\17\1\0\32\17\1\100\4\17"+
    "\1\101\10\17\1\102\1\17\1\103\1\17\1\104\5\17"+
    "\1\104\1\52\5\17\1\0\3\17\1\0\1\17\1\105"+
    "\7\17\1\106\2\17\1\75\2\17\1\107\1\0\3\17"+
    "\1\110\1\17\1\111\5\17\2\0\4\17\1\0\1\112"+
    "\2\17\1\43\5\17\1\113\10\17\1\114\1\115\1\17"+
    "\1\116\1\17\1\0\1\117\15\17\1\35\1\34\10\17"+
    "\1\0\2\17\1\120\4\17\2\0\1\17\1\121\2\0"+
    "\11\17\1\122\4\17\1\0\2\17\1\52\1\17\1\123"+
    "\3\17\1\124\5\17\1\0\2\17\1\125\2\0\1\40"+
    "\1\17\2\0\5\17\1\126\7\17\1\0\3\17\1\127"+
    "\4\17\1\0\2\17\2\0\1\17\1\0\1\60\2\17"+
    "\1\130\3\17\1\131\1\101\2\17\1\132\1\17\3\0"+
    "\1\17\1\0\3\17\1\133\1\17\1\0\1\74\1\17"+
    "\1\117\3\17\1\0\3\17\1\0\2\17\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[867];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\132\0\264\0\u010e\0\132\0\u0168\0\u01c2\0\u021c"+
    "\0\132\0\132\0\u0276\0\u02d0\0\132\0\u032a\0\132\0\u0384"+
    "\0\u03de\0\132\0\132\0\u0438\0\264\0\u0492\0\u04ec\0\u0546"+
    "\0\u05a0\0\u05fa\0\u0654\0\u06ae\0\u0708\0\u0762\0\u07bc\0\u0816"+
    "\0\u0870\0\u08ca\0\u0924\0\u097e\0\u09d8\0\u0a32\0\u0a8c\0\u0ae6"+
    "\0\u0b40\0\u0b9a\0\u0bf4\0\u0c4e\0\u0ca8\0\u0d02\0\u0d5c\0\132"+
    "\0\132\0\u0168\0\u0db6\0\u0e10\0\u0e6a\0\u0ec4\0\u0f1e\0\u0f78"+
    "\0\u0fd2\0\u102c\0\u1086\0\u10e0\0\u113a\0\u1194\0\u11ee\0\u1248"+
    "\0\u12a2\0\u12fc\0\u1356\0\u13b0\0\u140a\0\132\0\u1464\0\132"+
    "\0\132\0\132\0\u010e\0\132\0\132\0\132\0\u14be\0\132"+
    "\0\132\0\u1518\0\u1572\0\132\0\u15cc\0\u1626\0\u1680\0\u16da"+
    "\0\u1734\0\u178e\0\u17e8\0\u1842\0\u189c\0\u18f6\0\u1950\0\u19aa"+
    "\0\u1a04\0\u1a5e\0\u1ab8\0\u1b12\0\u1b6c\0\u1bc6\0\u1c20\0\u1c7a"+
    "\0\u1cd4\0\u1d2e\0\u1d88\0\u1de2\0\u1e3c\0\u1e96\0\u1ef0\0\u1f4a"+
    "\0\u1fa4\0\u1ffe\0\u2058\0\u20b2\0\u210c\0\u2166\0\u21c0\0\u221a"+
    "\0\u2274\0\u22ce\0\u2328\0\u2382\0\u23dc\0\u2436\0\u2490\0\u24ea"+
    "\0\u2544\0\u259e\0\u25f8\0\u2652\0\u26ac\0\u2706\0\u08ca\0\u2760"+
    "\0\u27ba\0\u2814\0\u286e\0\u28c8\0\u2922\0\u297c\0\u29d6\0\u2a30"+
    "\0\u2a8a\0\u08ca\0\u2ae4\0\u2b3e\0\u2b98\0\u2bf2\0\u2c4c\0\u2ca6"+
    "\0\u2d00\0\u2d5a\0\u2db4\0\u2e0e\0\u2e68\0\u2ec2\0\u2f1c\0\u2f76"+
    "\0\u2fd0\0\u302a\0\u3084\0\u30de\0\u3138\0\u3192\0\u31ec\0\u3246"+
    "\0\u32a0\0\u32fa\0\u3354\0\u33ae\0\u3408\0\u3462\0\u34bc\0\u3516"+
    "\0\u3570\0\u35ca\0\u3624\0\u367e\0\u36d8\0\u3732\0\u378c\0\u37e6"+
    "\0\u3840\0\u389a\0\u38f4\0\u394e\0\u39a8\0\u3a02\0\u3a5c\0\u3ab6"+
    "\0\u3b10\0\u3b6a\0\u3bc4\0\u3c1e\0\u3c78\0\u3cd2\0\u3d2c\0\u3d86"+
    "\0\u3de0\0\u3e3a\0\u3e94\0\u3eee\0\u08ca\0\u3f48\0\u3fa2\0\u3ffc"+
    "\0\u4056\0\u40b0\0\u410a\0\u4164\0\u41be\0\u4218\0\u08ca\0\u4272"+
    "\0\u42cc\0\u4326\0\u4380\0\u43da\0\u4434\0\u448e\0\u44e8\0\u4542"+
    "\0\u459c\0\u45f6\0\u4650\0\u46aa\0\u4704\0\u475e\0\u47b8\0\u4812"+
    "\0\u486c\0\u48c6\0\u4920\0\u497a\0\u49d4\0\u4a2e\0\u4a88\0\u4ae2"+
    "\0\u4b3c\0\u08ca\0\u4b96\0\u4bf0\0\u4c4a\0\u4ca4\0\u4cfe\0\u4d58"+
    "\0\u4db2\0\u4e0c\0\u4e66\0\u4ec0\0\u4f1a\0\u4f74\0\u4fce\0\u5028"+
    "\0\u5082\0\u50dc\0\u5136\0\u5190\0\u51ea\0\u5244\0\u529e\0\u52f8"+
    "\0\u5352\0\u53ac\0\u5406\0\u5460\0\u54ba\0\u5514\0\u556e\0\u55c8"+
    "\0\u08ca\0\u5622\0\u567c\0\u56d6\0\u5730\0\u08ca\0\u578a\0\u57e4"+
    "\0\u583e\0\u5898\0\u58f2\0\u594c\0\u59a6\0\u5a00\0\u5a5a\0\u5ab4"+
    "\0\u5b0e\0\u5b68\0\u5bc2\0\u5c1c\0\u5c76\0\u5cd0\0\u5d2a\0\u5d84"+
    "\0\u5dde\0\u5e38\0\u5e92\0\u08ca\0\u5eec\0\u5f46\0\u5fa0\0\u5ffa"+
    "\0\u6054\0\u60ae\0\u6108\0\u6162\0\u61bc\0\u6216\0\u6270\0\u62ca"+
    "\0\u6324\0\u637e\0\u63d8\0\u08ca\0\u6432\0\u648c\0\u64e6\0\u6540"+
    "\0\u659a\0\u08ca\0\u65f4\0\u664e\0\u66a8\0\u6702\0\u675c\0\u67b6"+
    "\0\u6810\0\u686a\0\u08ca\0\u68c4\0\u691e\0\u6978\0\u69d2\0\u6a2c"+
    "\0\u6a86\0\u08ca\0\u6ae0\0\u6b3a\0\u08ca\0\u6b94\0\u6bee\0\u6c48"+
    "\0\u6ca2\0\u6cfc\0\u6d56\0\u6db0\0\u6e0a\0\u6e64\0\u6ebe\0\u6f18"+
    "\0\u6f72\0\u6fcc\0\u7026\0\u7080\0\u70da\0\u7134\0\u718e\0\u71e8"+
    "\0\u7242\0\u729c\0\u72f6\0\u7350\0\u73aa\0\u7404\0\u745e\0\u74b8"+
    "\0\u7512\0\u756c\0\u75c6\0\u08ca\0\u7620\0\u767a\0\u76d4\0\u772e"+
    "\0\u7788\0\u77e2\0\u783c\0\u7896\0\u78f0\0\u794a\0\u79a4\0\u79fe"+
    "\0\u7a58\0\u7ab2\0\u7b0c\0\u7b66\0\u7bc0\0\u7c1a\0\u7c74\0\u7cce"+
    "\0\u08ca\0\u7d28\0\u7d82\0\u7ddc\0\u7e36\0\u7e90\0\u7eea\0\u7f44"+
    "\0\u7f9e\0\u7ff8\0\u8052\0\u80ac\0\u8106\0\u8160\0\u81ba\0\u8214"+
    "\0\u826e\0\u82c8\0\u8322\0\u837c\0\u83d6\0\u08ca\0\u8430\0\u848a"+
    "\0\u84e4\0\u853e\0\u8598\0\u85f2\0\u864c\0\u86a6\0\u8700\0\u875a"+
    "\0\u87b4\0\u880e\0\u8868\0\u88c2\0\u891c\0\u8976\0\u89d0\0\u8a2a"+
    "\0\u8a84\0\u08ca\0\u8ade\0\u8b38\0\u8b92\0\u8bec\0\u8c46\0\u08ca"+
    "\0\u8ca0\0\u8cfa\0\u8d54\0\u8dae\0\u8e08\0\u8e62\0\u08ca\0\u8ebc"+
    "\0\u8f16\0\u8f70\0\u8fca\0\u9024\0\u907e\0\u90d8\0\u9132\0\u918c"+
    "\0\u91e6\0\u08ca\0\u9240\0\u929a\0\u92f4\0\u934e\0\u93a8\0\u08ca"+
    "\0\u9402\0\u945c\0\u94b6\0\u9510\0\u956a\0\u95c4\0\u961e\0\u9678"+
    "\0\u08ca\0\u96d2\0\u972c\0\u9786\0\u97e0\0\u983a\0\u9894\0\u98ee"+
    "\0\u9948\0\u99a2\0\u99fc\0\u9a56\0\u9ab0\0\u9b0a\0\u9b64\0\u9bbe"+
    "\0\u9c18\0\u9c72\0\u9ccc\0\u9d26\0\u9d80\0\u9dda\0\u9e34\0\u9e8e"+
    "\0\u08ca\0\u08ca\0\u9ee8\0\u9f42\0\u9f9c\0\u08ca\0\u08ca\0\u9ff6"+
    "\0\ua050\0\ua0aa\0\ua104\0\ua15e\0\ua1b8\0\ua212\0\ua26c\0\u08ca"+
    "\0\ua2c6\0\ua320\0\ua37a\0\ua3d4\0\ua42e\0\ua488\0\ua4e2\0\ua53c"+
    "\0\ua596\0\u08ca\0\ua5f0\0\ua64a\0\ua6a4\0\ua6fe\0\ua758\0\ua7b2"+
    "\0\ua80c\0\u08ca\0\u08ca\0\ua866\0\ua8c0\0\ua91a\0\ua974\0\ua9ce"+
    "\0\u08ca\0\uaa28\0\uaa82\0\uaadc\0\uab36\0\uab90\0\uabea\0\uac44"+
    "\0\uac9e\0\uacf8\0\uad52\0\uadac\0\uae06\0\uae60\0\uaeba\0\u08ca"+
    "\0\uaf14\0\uaf6e\0\uafc8\0\ub022\0\ub07c\0\ub0d6\0\ub130\0\ub18a"+
    "\0\ub1e4\0\ub23e\0\ub298\0\ub2f2\0\ub34c\0\ub3a6\0\ub400\0\ub45a"+
    "\0\ub4b4\0\ub50e\0\ub568\0\ub5c2\0\u08ca\0\ub61c\0\ub676\0\u08ca"+
    "\0\ub6d0\0\ub72a\0\ub784\0\u08ca\0\ub7de\0\ub838\0\ub892\0\ub8ec"+
    "\0\ub946\0\ub9a0\0\ub9fa\0\uba54\0\ubaae\0\u08ca\0\u08ca\0\ubb08"+
    "\0\ubb62\0\ubbbc\0\ubc16\0\ubc70\0\ubcca\0\ubd24\0\ubd7e\0\u08ca"+
    "\0\ubdd8\0\ube32\0\ube8c\0\ubee6\0\ubf40\0\ubf9a\0\ubff4\0\uc04e"+
    "\0\uc0a8\0\uc102\0\uc15c\0\uc1b6\0\uc210\0\uc26a\0\uc2c4\0\uc31e"+
    "\0\uc378\0\uc3d2\0\uc42c\0\uc486\0\uc4e0\0\uc53a\0\uc594\0\uc5ee"+
    "\0\uc648\0\uc6a2\0\uc6fc\0\uc756\0\u08ca\0\uc7b0\0\uc80a\0\uc864"+
    "\0\uc8be\0\uc918\0\uc972\0\uc9cc\0\uca26\0\uca80\0\ucada\0\ucb34"+
    "\0\ucb8e\0\ucbe8\0\u08ca\0\ucc42\0\u08ca\0\ucc9c\0\u08ca\0\uccf6"+
    "\0\ucd50\0\ucdaa\0\uce04\0\uce5e\0\uceb8\0\ucf12\0\ucf6c\0\ucfc6"+
    "\0\ud020\0\ud07a\0\ud0d4\0\ud12e\0\ud188\0\ud1e2\0\ud23c\0\ud296"+
    "\0\ud2f0\0\u08ca\0\ud34a\0\ud3a4\0\ud3fe\0\ud458\0\ud4b2\0\ud50c"+
    "\0\ud566\0\u08ca\0\ud5c0\0\ud61a\0\u8322\0\ud674\0\ud6ce\0\u08ca"+
    "\0\ud728\0\ud782\0\ud7dc\0\ud836\0\u08ca\0\ud890\0\u08ca\0\ud8ea"+
    "\0\ud944\0\ud99e\0\ud9f8\0\uda52\0\udaac\0\udb06\0\udb60\0\udbba"+
    "\0\udc14\0\udc6e\0\udcc8\0\u08ca\0\udd22\0\udd7c\0\u08ca\0\uddd6"+
    "\0\ude30\0\ude8a\0\udee4\0\udf3e\0\u4e0c\0\udf98\0\udff2\0\ue04c"+
    "\0\ue0a6\0\ue100\0\ue15a\0\ue1b4\0\ue20e\0\u08ca\0\u08ca\0\ue268"+
    "\0\u08ca\0\ue2c2\0\ue31c\0\u08ca\0\ue376\0\ue3d0\0\ue42a\0\ue484"+
    "\0\ue4de\0\ue538\0\ue592\0\ue5ec\0\ue646\0\ue6a0\0\ue6fa\0\ue754"+
    "\0\ue7ae\0\132\0\132\0\ue808\0\ue862\0\ue8bc\0\ue916\0\ue970"+
    "\0\ue9ca\0\uea24\0\uea7e\0\uead8\0\ueb32\0\ueb8c\0\u08ca\0\uebe6"+
    "\0\uec40\0\uec9a\0\uecf4\0\ued4e\0\ueda8\0\uee02\0\u08ca\0\uee5c"+
    "\0\ueeb6\0\uef10\0\uef6a\0\uefc4\0\uf01e\0\uf078\0\uf0d2\0\uf12c"+
    "\0\uf186\0\uf1e0\0\u08ca\0\uf23a\0\uf294\0\uf2ee\0\uf348\0\uf3a2"+
    "\0\uf3fc\0\uf456\0\uf4b0\0\uf50a\0\u08ca\0\uf564\0\uf5be\0\uf618"+
    "\0\u08ca\0\uf672\0\uf6cc\0\uf726\0\uf780\0\uf7da\0\uf834\0\uf88e"+
    "\0\uf8e8\0\u08ca\0\uf942\0\uf99c\0\132\0\uf9f6\0\ufa50\0\ufaaa"+
    "\0\ufb04\0\ufb5e\0\ufbb8\0\ufc12\0\ufc6c\0\u08ca\0\ufcc6\0\ufd20"+
    "\0\ufd7a\0\ufdd4\0\ufe2e\0\ufe88\0\ufee2\0\uff3c\0\uff96\0\ufff0"+
    "\1\112\0\u08ca\1\244\1\376\1\u0158\1\u01b2\1\u020c\1\u0266"+
    "\1\u02c0\1\u031a\1\u0374\1\u03ce\1\u0428\0\132\1\u0482\1\u04dc"+
    "\0\u08ca\1\u0536\1\u0590\1\u05ea\0\u08ca\0\132\1\u0644\1\u069e"+
    "\0\u08ca\1\u06f8\1\u0752\1\u07ac\1\u0806\1\u0860\1\u08ba\1\u0914"+
    "\1\u096e\1\u09c8\0\u08ca\1\u0a22\1\u0a7c\0\132\1\u0ad6\0\132"+
    "\1\u0b30\1\u0b8a\1\u0be4\1\u0c3e\1\u0c98\1\u0cf2\1\u0d4c\1\u0da6"+
    "\1\u0e00\1\u0e5a\0\132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[867];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\7\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\2\42\1\60"+
    "\1\2\1\61\1\62\1\2\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\42\1\72\2\42\1\73\1\42"+
    "\1\74\1\75\1\76\1\42\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\42\1\105\1\42\1\106\1\107\1\110"+
    "\1\111\164\0\1\112\77\0\3\113\1\114\3\113\1\0"+
    "\122\113\32\0\1\115\105\0\1\116\23\0\1\115\77\0"+
    "\3\117\1\0\3\117\1\120\60\117\1\0\41\117\12\0"+
    "\1\6\4\0\1\5\12\0\1\115\112\0\1\121\4\0"+
    "\7\21\3\0\1\115\114\0\1\121\2\0\7\21\3\0"+
    "\1\115\111\0\1\5\4\0\1\6\12\0\1\115\115\0"+
    "\1\122\1\0\7\21\12\0\1\123\36\0\1\123\3\0"+
    "\1\124\56\0\1\62\1\112\131\0\1\112\1\62\132\0"+
    "\1\116\115\0\7\42\6\0\3\42\1\125\7\42\1\126"+
    "\1\42\1\127\4\42\1\130\7\42\4\0\4\42\1\131"+
    "\7\42\1\132\1\42\1\133\3\42\1\134\10\42\24\0"+
    "\7\42\6\0\1\135\3\42\1\136\25\42\4\0\31\42"+
    "\1\137\1\42\24\0\7\42\6\0\1\42\1\140\1\141"+
    "\1\142\3\42\1\143\1\144\2\42\1\145\2\42\1\146"+
    "\2\42\1\147\1\150\1\42\1\151\5\42\4\0\1\42"+
    "\1\152\31\42\24\0\7\42\6\0\1\153\3\42\1\154"+
    "\3\42\1\155\10\42\1\156\10\42\4\0\5\42\1\157"+
    "\3\42\1\160\21\42\24\0\7\42\6\0\27\42\1\161"+
    "\2\42\4\0\1\42\1\162\14\42\1\163\3\42\1\164"+
    "\3\42\1\165\1\42\1\166\2\42\24\0\7\42\6\0"+
    "\10\42\1\167\5\42\1\170\5\42\1\171\5\42\4\0"+
    "\1\42\1\172\20\42\1\173\10\42\24\0\7\42\6\0"+
    "\21\42\1\174\10\42\4\0\5\42\1\175\11\42\1\176"+
    "\13\42\24\0\7\42\6\0\1\177\31\42\4\0\1\42"+
    "\1\200\31\42\24\0\7\42\6\0\15\42\1\201\14\42"+
    "\4\0\33\42\24\0\7\42\6\0\16\42\1\202\13\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\33\42"+
    "\24\0\7\42\6\0\4\42\1\203\3\42\1\204\21\42"+
    "\4\0\5\42\1\205\3\42\1\206\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\207\11\42\1\210\5\42"+
    "\1\211\3\42\1\212\1\42\24\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\213\3\42\1\214\11\42\1\215\5\42"+
    "\1\216\5\42\24\0\7\42\6\0\21\42\1\217\2\42"+
    "\1\220\5\42\4\0\2\42\1\221\3\42\1\222\11\42"+
    "\1\223\1\42\1\224\2\42\1\225\1\226\4\42\24\0"+
    "\7\42\6\0\21\42\1\227\10\42\4\0\1\42\1\230"+
    "\31\42\24\0\7\42\6\0\32\42\4\0\25\42\1\231"+
    "\5\42\24\0\7\42\6\0\4\42\1\232\3\42\1\233"+
    "\5\42\1\234\13\42\4\0\1\42\1\235\3\42\1\236"+
    "\25\42\24\0\7\42\6\0\1\42\1\237\2\42\1\240"+
    "\25\42\4\0\10\42\1\241\1\242\12\42\1\243\1\244"+
    "\5\42\24\0\7\42\6\0\1\245\15\42\1\246\2\42"+
    "\1\247\10\42\4\0\10\42\1\250\11\42\1\251\6\42"+
    "\1\252\1\42\24\0\7\42\6\0\10\42\1\253\2\42"+
    "\1\254\1\42\1\255\1\42\1\256\2\42\1\257\7\42"+
    "\4\0\23\42\1\260\7\42\24\0\7\42\6\0\1\261"+
    "\7\42\1\262\21\42\4\0\33\42\24\0\7\42\6\0"+
    "\7\42\1\263\22\42\4\0\11\42\1\264\10\42\1\265"+
    "\10\42\24\0\7\42\6\0\32\42\4\0\17\42\1\75"+
    "\13\42\24\0\7\42\6\0\32\42\4\0\2\42\1\266"+
    "\13\42\1\267\4\42\1\270\3\42\1\271\3\42\24\0"+
    "\7\42\6\0\32\42\4\0\17\42\1\272\2\42\1\273"+
    "\6\42\1\274\1\42\24\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\275\6\42\1\276\3\42\1\277\2\42\1\300"+
    "\13\42\24\0\7\42\6\0\32\42\4\0\1\42\1\274"+
    "\3\42\1\301\3\42\1\302\5\42\1\303\13\42\24\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\304\1\42\1\305"+
    "\11\42\1\306\2\42\24\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\172\7\42\1\307\2\42\1\310\2\42\1\311"+
    "\2\42\1\312\2\42\1\313\5\42\24\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\314\16\42\24\0\7\42\6\0"+
    "\32\42\4\0\6\42\1\315\6\42\1\316\1\317\4\42"+
    "\1\320\7\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\321\7\42\1\322\5\42\1\323\13\42\24\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\324\3\42\1\325\11\42"+
    "\1\326\5\42\1\216\5\42\24\0\7\42\6\0\32\42"+
    "\4\0\22\42\1\327\10\42\24\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\330\20\42\1\331\2\42\1\332\5\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\333\3\42"+
    "\1\334\25\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\335\2\42\1\336\13\42\1\337\1\340\1\42\1\341"+
    "\1\42\1\342\1\42\24\0\7\42\6\0\32\42\4\0"+
    "\10\42\1\343\1\344\10\42\1\345\2\42\1\346\5\42"+
    "\24\0\7\42\6\0\32\42\4\0\11\42\1\347\21\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\350\15\42"+
    "\1\351\13\42\24\0\7\42\6\0\32\42\4\0\10\42"+
    "\1\352\1\353\21\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\354\21\42\36\0\1\115\74\0\1\116\11\0"+
    "\1\120\142\0\7\355\116\0\1\356\1\0\1\356\2\0"+
    "\7\357\123\0\7\42\6\0\3\42\1\360\26\42\4\0"+
    "\33\42\24\0\7\42\6\0\13\42\1\315\7\42\1\361"+
    "\6\42\4\0\33\42\24\0\7\42\6\0\30\42\1\315"+
    "\1\42\4\0\33\42\24\0\7\42\6\0\2\42\1\362"+
    "\27\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\4\42\1\363\26\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\364\21\42\24\0\7\42\6\0\32\42\4\0"+
    "\4\42\1\365\26\42\24\0\7\42\6\0\32\42\4\0"+
    "\22\42\1\366\10\42\24\0\7\42\6\0\2\42\1\367"+
    "\27\42\4\0\33\42\24\0\7\42\6\0\23\42\1\370"+
    "\6\42\4\0\33\42\24\0\7\42\6\0\21\42\1\371"+
    "\3\42\1\372\4\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\17\42\1\373\11\42\1\374\1\42\24\0"+
    "\7\42\6\0\32\42\4\0\10\42\1\375\22\42\24\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\374\1\376\2\42"+
    "\1\377\25\42\24\0\7\42\6\0\4\42\1\u0100\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u0101\14\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u0102\14\42\24\0\7\42\6\0\13\42\1\u0103\1\42"+
    "\1\u0104\14\42\4\0\2\42\1\u0105\30\42\24\0\7\42"+
    "\6\0\4\42\1\u0106\25\42\4\0\33\42\24\0\7\42"+
    "\6\0\1\42\1\u0107\30\42\4\0\10\42\1\u0108\5\42"+
    "\1\u0102\5\42\1\u0109\6\42\24\0\7\42\6\0\10\42"+
    "\1\144\2\42\1\145\6\42\1\u010a\7\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\14\42\1\u010b\16\42"+
    "\24\0\7\42\6\0\23\42\1\u010c\6\42\4\0\33\42"+
    "\24\0\7\42\6\0\13\42\1\u010d\6\42\1\130\7\42"+
    "\4\0\33\42\24\0\7\42\6\0\22\42\1\u010e\7\42"+
    "\4\0\33\42\24\0\7\42\6\0\16\42\1\u010f\13\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u0110\16\42\24\0\7\42\6\0\32\42\4\0\15\42"+
    "\1\u0111\4\42\1\u0112\10\42\24\0\7\42\6\0\4\42"+
    "\1\u0113\3\42\1\u0114\21\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\3\42\1\u0115\27\42\24\0\7\42"+
    "\6\0\32\42\4\0\4\42\1\u0116\26\42\24\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u0117\20\42\1\u0118\10\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u0119\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\11\42\1\u011a\21\42"+
    "\24\0\7\42\6\0\27\42\1\u011b\2\42\4\0\33\42"+
    "\24\0\7\42\6\0\21\42\1\u011c\10\42\4\0\33\42"+
    "\24\0\7\42\6\0\13\42\1\u011d\16\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\14\42\1\u011e\16\42"+
    "\24\0\7\42\6\0\32\42\4\0\11\42\1\u011f\21\42"+
    "\24\0\7\42\6\0\16\42\1\u0120\13\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\24\42\1\u0121\6\42"+
    "\24\0\7\42\6\0\23\42\1\u0122\6\42\4\0\33\42"+
    "\24\0\7\42\6\0\25\42\1\u0123\4\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\16\42\1\u0124\14\42"+
    "\24\0\7\42\6\0\3\42\1\u0125\11\42\1\u0126\4\42"+
    "\1\u0127\7\42\4\0\33\42\24\0\7\42\6\0\10\42"+
    "\1\u0128\21\42\4\0\33\42\24\0\7\42\6\0\5\42"+
    "\1\u0129\24\42\4\0\33\42\24\0\7\42\6\0\12\42"+
    "\1\u012a\1\42\1\u012b\15\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u012c\6\42\24\0\7\42"+
    "\6\0\32\42\4\0\2\42\1\207\30\42\24\0\7\42"+
    "\6\0\32\42\4\0\4\42\1\u012d\26\42\24\0\7\42"+
    "\6\0\32\42\4\0\23\42\1\u012e\7\42\24\0\7\42"+
    "\6\0\1\42\1\u012f\1\u0130\27\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\15\42\1\u0131\4\42\1\u0132"+
    "\10\42\24\0\7\42\6\0\32\42\4\0\30\42\1\u0133"+
    "\2\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u0134"+
    "\5\42\1\u0135\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u0136\16\42\24\0\7\42\6\0\3\42\1\u0137"+
    "\26\42\4\0\33\42\24\0\7\42\6\0\23\42\1\u0126"+
    "\6\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\12\42\1\u0138\20\42\24\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u0139\16\42\1\u013a\6\42\24\0\7\42\6\0"+
    "\4\42\1\u013b\25\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\24\42\1\u013c\6\42\24\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u013d\25\42\24\0\7\42\6\0"+
    "\10\42\1\u013e\5\42\1\u013f\13\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u0140\10\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0141\25\42\24\0"+
    "\7\42\6\0\14\42\1\u0142\15\42\4\0\33\42\24\0"+
    "\7\42\6\0\6\42\1\u0143\23\42\4\0\33\42\24\0"+
    "\7\42\6\0\26\42\1\u0144\3\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u0145\21\42\24\0"+
    "\7\42\6\0\3\42\1\u0146\26\42\4\0\1\42\1\u0147"+
    "\13\42\1\u0148\5\42\1\u0149\7\42\24\0\7\42\6\0"+
    "\32\42\4\0\31\42\1\274\1\42\24\0\7\42\6\0"+
    "\13\42\1\u014a\7\42\1\u014b\6\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u014c\31\42\24\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u014d\14\42\24\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u014e\3\42\1\u014f"+
    "\11\42\1\u0150\2\42\1\u0151\10\42\24\0\7\42\6\0"+
    "\32\42\4\0\2\42\1\u0152\30\42\24\0\7\42\6\0"+
    "\1\42\1\u0153\30\42\4\0\33\42\24\0\7\42\6\0"+
    "\3\42\1\u0154\13\42\1\u0155\12\42\4\0\33\42\24\0"+
    "\7\42\6\0\24\42\1\u0156\5\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0157\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\25\42\1\u0158\3\42\1\u0159"+
    "\1\42\24\0\7\42\6\0\32\42\4\0\20\42\1\u015a"+
    "\12\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u015b"+
    "\14\42\24\0\7\42\6\0\32\42\4\0\17\42\1\323"+
    "\13\42\24\0\7\42\6\0\10\42\1\u015c\21\42\4\0"+
    "\33\42\24\0\7\42\6\0\3\42\1\u015d\26\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\10\42\1\336"+
    "\22\42\24\0\7\42\6\0\32\42\4\0\11\42\1\u015e"+
    "\21\42\24\0\7\42\6\0\13\42\1\u015f\16\42\4\0"+
    "\33\42\24\0\7\42\6\0\4\42\1\u0160\25\42\4\0"+
    "\33\42\24\0\7\42\6\0\4\42\1\u0161\25\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\4\42\1\u0162"+
    "\17\42\1\u0163\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u0164\21\42\24\0\7\42\6\0\32\42\4\0"+
    "\23\42\1\u0165\7\42\24\0\7\42\6\0\32\42\4\0"+
    "\4\42\1\327\26\42\24\0\7\42\6\0\32\42\4\0"+
    "\23\42\1\u0166\5\42\1\u0167\1\42\24\0\7\42\6\0"+
    "\32\42\4\0\1\42\1\u0168\31\42\24\0\7\42\6\0"+
    "\32\42\4\0\17\42\1\u0169\13\42\24\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u016a\25\42\24\0\7\42\6\0"+
    "\32\42\4\0\24\42\1\u016b\6\42\24\0\7\42\6\0"+
    "\32\42\4\0\23\42\1\u016c\1\u016d\6\42\24\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u016e\31\42\24\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u016f\31\42\24\0\7\42"+
    "\6\0\32\42\4\0\15\42\1\u0170\1\u0171\14\42\24\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u0172\2\42\1\u0173"+
    "\5\42\1\u0174\16\42\24\0\7\42\6\0\32\42\4\0"+
    "\3\42\1\u0175\27\42\24\0\7\42\6\0\32\42\4\0"+
    "\25\42\1\u0176\5\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u0177\11\42\1\u0178\7\42\24\0\7\42\6\0"+
    "\32\42\4\0\25\42\1\u0179\5\42\24\0\7\42\6\0"+
    "\32\42\4\0\3\42\1\u017a\20\42\1\u017b\6\42\24\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u017c\14\42\24\0"+
    "\7\42\6\0\32\42\4\0\17\42\1\u017d\13\42\24\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u017e\10\42\24\0"+
    "\7\42\6\0\32\42\4\0\17\42\1\u017f\13\42\24\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u0180\14\42\24\0"+
    "\7\42\6\0\32\42\4\0\17\42\1\u0181\13\42\24\0"+
    "\7\42\6\0\32\42\4\0\20\42\1\u0182\12\42\24\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u0183\1\u0184\6\42"+
    "\5\0\1\u0185\16\0\7\42\6\0\32\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\15\42\1\u0186\15\42"+
    "\24\0\7\42\6\0\32\42\4\0\23\42\1\u0175\7\42"+
    "\24\0\7\42\6\0\32\42\4\0\16\42\1\u0187\14\42"+
    "\24\0\7\42\6\0\32\42\4\0\24\42\1\u0188\6\42"+
    "\24\0\7\42\6\0\32\42\4\0\27\42\1\u0189\3\42"+
    "\24\0\7\42\6\0\32\42\4\0\16\42\1\u018a\5\42"+
    "\1\u018b\6\42\24\0\7\42\6\0\32\42\4\0\3\42"+
    "\1\u018c\17\42\1\u018d\7\42\24\0\7\42\6\0\32\42"+
    "\4\0\11\42\1\u018e\5\42\1\u018f\13\42\24\0\7\42"+
    "\6\0\32\42\4\0\2\42\1\u0190\30\42\24\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u0191\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\21\42\1\u0192\2\42\1\u0193\6\42"+
    "\24\0\7\42\6\0\32\42\4\0\14\42\1\u0194\16\42"+
    "\24\0\7\42\6\0\32\42\4\0\17\42\1\u0195\13\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\u0196\20\42"+
    "\1\u0197\10\42\24\0\7\42\6\0\32\42\4\0\20\42"+
    "\1\u0198\12\42\24\0\7\42\6\0\32\42\4\0\11\42"+
    "\1\u0199\21\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u019a\14\42\24\0\7\42\6\0\32\42\4\0\11\42"+
    "\1\u019b\10\42\1\u019c\10\42\24\0\7\42\6\0\32\42"+
    "\4\0\15\42\1\u016b\15\42\24\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\u019d\23\42\1\u0158\3\42\1\u019e\1\42"+
    "\24\0\7\42\6\0\32\42\4\0\20\42\1\u019f\12\42"+
    "\24\0\7\42\6\0\32\42\4\0\16\42\1\u01a0\14\42"+
    "\24\0\7\42\6\0\32\42\4\0\22\42\1\u012c\10\42"+
    "\24\0\7\42\6\0\32\42\4\0\11\42\1\u01a1\2\42"+
    "\1\u01a2\16\42\24\0\7\42\6\0\32\42\4\0\11\42"+
    "\1\u01a3\21\42\24\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u01a4\6\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u01a5\25\42\24\0\7\355\12\0\1\123\36\0\1\123"+
    "\3\0\1\124\45\0\7\357\123\0\7\357\55\0\1\124"+
    "\26\0\1\u01a6\16\0\7\42\6\0\32\42\4\0\33\42"+
    "\24\0\7\42\6\0\4\42\1\u01a7\25\42\4\0\33\42"+
    "\24\0\7\42\6\0\7\42\1\u01a8\22\42\4\0\22\42"+
    "\1\u01a9\10\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u01aa\31\42\24\0\7\42\6\0\1\u01ab\31\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\1\42\1\u01ac"+
    "\31\42\24\0\7\42\6\0\12\42\1\u01ad\17\42\4\0"+
    "\33\42\24\0\7\42\6\0\26\42\1\u01ae\3\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\5\42\1\u01af"+
    "\25\42\24\0\7\42\6\0\32\42\4\0\1\42\1\u01b0"+
    "\31\42\24\0\7\42\6\0\32\42\4\0\17\42\1\376"+
    "\13\42\24\0\7\42\6\0\32\42\4\0\24\42\1\u01b1"+
    "\6\42\24\0\7\42\6\0\32\42\4\0\1\42\1\u0109"+
    "\31\42\24\0\7\42\6\0\32\42\4\0\14\42\1\u01b2"+
    "\16\42\24\0\7\42\6\0\32\42\4\0\3\42\1\u01b2"+
    "\27\42\24\0\7\42\6\0\2\42\1\u01b3\27\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\24\42\1\u01b2"+
    "\6\42\24\0\7\42\6\0\32\42\4\0\7\42\1\u01b2"+
    "\23\42\24\0\7\42\6\0\24\42\1\u01b4\5\42\4\0"+
    "\33\42\24\0\7\42\6\0\22\42\1\u01b5\7\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\12\42\1\u01b2"+
    "\20\42\24\0\7\42\6\0\1\u01b6\31\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\31\42\1\374\1\42"+
    "\24\0\7\42\6\0\32\42\4\0\17\42\1\u01b7\13\42"+
    "\24\0\7\42\6\0\32\42\4\0\22\42\1\u01b2\10\42"+
    "\24\0\7\42\6\0\32\42\4\0\10\42\1\u0108\22\42"+
    "\24\0\7\42\6\0\32\42\4\0\14\42\1\u01b8\16\42"+
    "\24\0\7\42\6\0\1\u01b9\31\42\4\0\33\42\24\0"+
    "\7\42\6\0\4\42\1\u01ba\25\42\4\0\33\42\24\0"+
    "\7\42\6\0\23\42\1\u01bb\6\42\4\0\33\42\24\0"+
    "\7\42\6\0\17\42\1\u0174\12\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u01bc\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u01bd\25\42\24\0"+
    "\7\42\6\0\2\42\1\u01b8\27\42\4\0\33\42\24\0"+
    "\7\42\6\0\22\42\1\u01be\7\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\10\42\1\u01bf\22\42\24\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u01c0\7\42\24\0"+
    "\7\42\6\0\32\42\4\0\17\42\1\u01c1\13\42\24\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u01c2\14\42\24\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u0116\6\42\24\0"+
    "\7\42\6\0\14\42\1\u01c3\15\42\4\0\33\42\24\0"+
    "\7\42\6\0\4\42\1\u01c4\25\42\4\0\33\42\24\0"+
    "\7\42\6\0\13\42\1\u01c5\16\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u0158\7\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u01c6\25\42\24\0"+
    "\7\42\6\0\24\42\1\u01c7\5\42\4\0\33\42\24\0"+
    "\7\42\6\0\23\42\1\u01c8\3\42\1\u01c9\2\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\17\42\1\u01ca"+
    "\13\42\24\0\7\42\6\0\10\42\1\u01cb\21\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\4\42\1\u01cc"+
    "\26\42\24\0\7\42\6\0\4\42\1\u01cd\25\42\4\0"+
    "\33\42\24\0\7\42\6\0\4\42\1\u01ce\25\42\4\0"+
    "\33\42\24\0\7\42\6\0\4\42\1\u01cf\25\42\4\0"+
    "\33\42\24\0\7\42\6\0\15\42\1\u01d0\14\42\4\0"+
    "\33\42\24\0\7\42\6\0\23\42\1\u01d1\6\42\4\0"+
    "\33\42\24\0\7\42\6\0\4\42\1\315\25\42\4\0"+
    "\33\42\24\0\7\42\6\0\10\42\1\u01d2\21\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\25\42\1\u01d3"+
    "\5\42\24\0\7\42\6\0\32\42\4\0\24\42\1\u01d4"+
    "\6\42\24\0\7\42\6\0\32\42\4\0\1\42\1\u01d5"+
    "\31\42\24\0\7\42\6\0\32\42\4\0\14\42\1\u01d6"+
    "\16\42\24\0\7\42\6\0\32\42\4\0\5\42\1\u01d7"+
    "\25\42\24\0\7\42\6\0\32\42\4\0\22\42\1\u01d8"+
    "\10\42\24\0\7\42\6\0\32\42\4\0\24\42\1\u01bf"+
    "\6\42\24\0\7\42\6\0\32\42\4\0\5\42\1\u01d9"+
    "\25\42\24\0\7\42\6\0\10\42\1\u01da\5\42\1\u01db"+
    "\13\42\4\0\10\42\1\u01dc\22\42\24\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u01d9\16\42\24\0\7\42\6\0"+
    "\4\42\1\u01dd\25\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u01de\25\42\24\0\7\42\6\0"+
    "\32\42\4\0\22\42\1\u01df\10\42\24\0\7\42\6\0"+
    "\32\42\4\0\11\42\1\u01e0\21\42\24\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u01e1\16\42\24\0\7\42\6\0"+
    "\32\42\4\0\22\42\1\u01e2\10\42\24\0\7\42\6\0"+
    "\14\42\1\u01e3\15\42\4\0\33\42\24\0\7\42\6\0"+
    "\2\42\1\u01e4\27\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\24\42\1\u01e5\6\42\24\0\7\42\6\0"+
    "\32\42\4\0\25\42\1\u01e6\5\42\24\0\7\42\6\0"+
    "\7\42\1\u0129\22\42\4\0\33\42\24\0\7\42\6\0"+
    "\15\42\1\u01e7\14\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\23\42\1\u01e8\7\42\24\0\7\42\6\0"+
    "\32\42\4\0\11\42\1\u01e9\21\42\24\0\7\42\6\0"+
    "\32\42\4\0\4\42\1\u01ea\26\42\24\0\7\42\6\0"+
    "\32\42\4\0\17\42\1\u01eb\13\42\24\0\7\42\6\0"+
    "\32\42\4\0\25\42\1\u01ec\5\42\24\0\7\42\6\0"+
    "\4\42\1\u01ed\25\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\22\42\1\u01ee\10\42\24\0\7\42\6\0"+
    "\32\42\4\0\7\42\1\u01ef\23\42\24\0\7\42\6\0"+
    "\32\42\4\0\3\42\1\u01f0\27\42\24\0\7\42\6\0"+
    "\32\42\4\0\20\42\1\u01f1\12\42\24\0\7\42\6\0"+
    "\32\42\4\0\20\42\1\u01f2\12\42\24\0\7\42\6\0"+
    "\32\42\4\0\25\42\1\u01f3\5\42\24\0\7\42\6\0"+
    "\13\42\1\u01f4\16\42\4\0\33\42\24\0\7\42\6\0"+
    "\16\42\1\u0142\13\42\4\0\33\42\24\0\7\42\6\0"+
    "\15\42\1\u01f5\14\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\16\42\1\u01f6\14\42\24\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u01f7\25\42\24\0\7\42\6\0"+
    "\2\42\1\u01f8\27\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u01f9\25\42\24\0\7\42\6\0"+
    "\32\42\4\0\24\42\1\u01fa\6\42\24\0\7\42\6\0"+
    "\16\42\1\u01fb\1\42\1\u01fc\11\42\4\0\33\42\24\0"+
    "\7\42\6\0\1\u01fd\31\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\16\42\1\u01fe\14\42\24\0\7\42"+
    "\6\0\24\42\1\u01ff\5\42\4\0\33\42\24\0\7\42"+
    "\6\0\26\42\1\u0200\3\42\4\0\33\42\24\0\7\42"+
    "\6\0\21\42\1\u012a\10\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u0201\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\10\42\1\u0202\22\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u0203\6\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u0204\6\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u0205\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\16\42\1\u0206\14\42\24\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u0207\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\14\42\1\u0208\16\42\24\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u0209\31\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u020a\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\315\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\3\42\1\u020b\27\42\24\0\7\42"+
    "\6\0\32\42\4\0\22\42\1\u020a\10\42\24\0\7\42"+
    "\6\0\32\42\4\0\23\42\1\u020c\7\42\24\0\7\42"+
    "\6\0\32\42\4\0\20\42\1\u020d\12\42\24\0\7\42"+
    "\6\0\32\42\4\0\23\42\1\u020e\1\u020f\6\42\24\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u0210\21\42\24\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u0211\31\42\24\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u0212\6\42\24\0"+
    "\7\42\6\0\32\42\4\0\2\42\1\u01ef\30\42\24\0"+
    "\7\42\6\0\32\42\4\0\6\42\1\315\24\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u01f6\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\15\42\1\u0213\15\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0214\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0215\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u0216\31\42\24\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u0217\31\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0218\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\15\42\1\u0219\15\42\24\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u0152\27\42\24\0"+
    "\7\42\6\0\32\42\4\0\2\42\1\u021a\30\42\24\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u021b\2\42\1\u021c"+
    "\13\42\24\0\7\42\6\0\32\42\4\0\24\42\1\u021d"+
    "\6\42\24\0\1\42\1\u021e\1\42\1\u021f\1\42\1\u0220"+
    "\1\u020a\6\0\32\42\4\0\5\42\1\u0221\25\42\115\0"+
    "\1\u0222\40\0\7\42\6\0\32\42\4\0\2\42\1\u0223"+
    "\30\42\24\0\7\42\6\0\32\42\4\0\7\42\1\u020a"+
    "\23\42\24\0\7\42\6\0\32\42\4\0\11\42\1\u0224"+
    "\21\42\24\0\7\42\6\0\32\42\4\0\14\42\1\u0225"+
    "\16\42\5\0\1\u0226\16\0\7\42\6\0\32\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\13\42\1\u0227"+
    "\17\42\24\0\7\42\6\0\32\42\4\0\23\42\1\u0228"+
    "\7\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u0229"+
    "\7\42\1\u022a\4\42\24\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u022b\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u022c\16\42\24\0\7\42\6\0\32\42\4\0"+
    "\23\42\1\u022d\7\42\24\0\7\42\6\0\32\42\4\0"+
    "\25\42\1\u022e\5\42\24\0\7\42\6\0\32\42\4\0"+
    "\25\42\1\u022f\5\42\24\0\7\42\6\0\32\42\4\0"+
    "\6\42\1\207\24\42\24\0\7\42\6\0\32\42\4\0"+
    "\22\42\1\u0230\10\42\24\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u0231\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u0232\21\42\24\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u0233\25\42\24\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u0234\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\3\42\1\u0235\27\42\24\0\7\42\6\0\32\42\4\0"+
    "\23\42\1\207\7\42\24\0\7\42\6\0\32\42\4\0"+
    "\17\42\1\u0236\13\42\24\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u0237\14\42\24\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u01e6\16\42\24\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u0238\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\4\42\1\u0152\26\42\24\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u0239\31\42\24\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u023a\16\42\24\0\7\42\6\0\32\42\4\0"+
    "\10\42\1\u019e\22\42\24\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u023b\16\42\43\0\1\u023c\112\0\7\42\6\0"+
    "\21\42\1\u023d\10\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\1\42\1\u023e\31\42\24\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u023f\25\42\24\0\7\42\6\0"+
    "\32\42\4\0\23\42\1\u0240\7\42\24\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u0241\16\42\24\0\7\42\6\0"+
    "\32\42\4\0\31\42\1\u0212\1\42\24\0\7\42\6\0"+
    "\24\42\1\u0242\5\42\4\0\33\42\24\0\7\42\6\0"+
    "\4\42\1\u0243\25\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\6\42\1\u013c\24\42\24\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u013c\16\42\24\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u01b2\25\42\24\0\7\42\6\0"+
    "\12\42\1\u0244\17\42\4\0\33\42\24\0\7\42\6\0"+
    "\14\42\1\u0245\15\42\4\0\33\42\24\0\7\42\6\0"+
    "\23\42\1\u0246\6\42\4\0\33\42\24\0\7\42\6\0"+
    "\23\42\1\u0247\6\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\22\42\1\u0101\10\42\24\0\7\42\6\0"+
    "\1\42\1\u0248\30\42\4\0\33\42\24\0\7\42\6\0"+
    "\23\42\1\u0249\6\42\4\0\33\42\24\0\7\42\6\0"+
    "\10\42\1\u024a\21\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\7\42\1\u024b\23\42\24\0\7\42\6\0"+
    "\32\42\4\0\3\42\1\u024c\27\42\24\0\7\42\6\0"+
    "\23\42\1\u024d\6\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u0174\25\42\24\0\7\42\6\0"+
    "\32\42\4\0\22\42\1\u024e\10\42\24\0\7\42\6\0"+
    "\32\42\4\0\24\42\1\u024f\6\42\24\0\7\42\6\0"+
    "\4\42\1\u0142\25\42\4\0\33\42\24\0\7\42\6\0"+
    "\10\42\1\u0250\21\42\4\0\33\42\5\0\1\u0251\16\0"+
    "\7\42\6\0\32\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\16\42\1\u0252\14\42\24\0\7\42\6\0"+
    "\17\42\1\u0253\12\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\31\42\1\u0254\1\42\24\0\7\42\6\0"+
    "\32\42\4\0\15\42\1\u0255\15\42\24\0\7\42\6\0"+
    "\15\42\1\u0256\14\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u0257\16\42\24\0\7\42\6\0"+
    "\27\42\1\u0258\2\42\4\0\33\42\24\0\7\42\6\0"+
    "\21\42\1\u01d1\10\42\4\0\33\42\24\0\7\42\6\0"+
    "\21\42\1\u0259\10\42\4\0\33\42\5\0\1\u025a\16\0"+
    "\7\42\6\0\32\42\4\0\33\42\24\0\7\42\6\0"+
    "\23\42\1\u0155\6\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u025b\16\42\24\0\7\42\6\0"+
    "\10\42\1\u025c\5\42\1\u025d\13\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u025e\7\42\24\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u025f\31\42\24\0"+
    "\7\42\6\0\16\42\1\u0260\13\42\4\0\23\42\1\u0261"+
    "\7\42\24\0\7\42\6\0\32\42\4\0\17\42\1\u0262"+
    "\13\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u0263"+
    "\14\42\24\0\7\42\6\0\32\42\4\0\26\42\1\u0264"+
    "\4\42\24\0\7\42\6\0\32\42\4\0\11\42\1\u0265"+
    "\21\42\24\0\7\42\6\0\21\42\1\u0253\10\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\3\42\1\u0230"+
    "\27\42\24\0\7\42\6\0\32\42\4\0\1\42\1\u0266"+
    "\31\42\24\0\7\42\6\0\32\42\4\0\17\42\1\u0267"+
    "\13\42\24\0\7\42\6\0\32\42\4\0\23\42\1\u0268"+
    "\7\42\24\0\7\42\6\0\32\42\4\0\14\42\1\u0269"+
    "\5\42\1\u026a\10\42\24\0\7\42\6\0\1\u026b\31\42"+
    "\4\0\33\42\24\0\7\42\6\0\4\42\1\u026c\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\11\42"+
    "\1\u026d\21\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u0212\25\42\24\0\7\42\6\0\24\42\1\u026e\5\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u026f\25\42\24\0\7\42\6\0\32\42\4\0\15\42"+
    "\1\u0111\15\42\24\0\7\42\6\0\16\42\1\u0270\13\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\26\42"+
    "\1\u0271\4\42\24\0\7\42\6\0\32\42\4\0\15\42"+
    "\1\u0178\15\42\24\0\7\42\6\0\2\42\1\u0272\27\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u0273\25\42\24\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u016b\16\42\24\0\7\42\6\0\32\42\4\0\13\42"+
    "\1\u0212\17\42\24\0\7\42\6\0\32\42\4\0\3\42"+
    "\1\u0274\27\42\24\0\7\42\6\0\4\42\1\u0275\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\2\42\1\u0276\27\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u0277\31\42\24\0\7\42\6\0\16\42\1\u0278\13\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u0279\25\42\24\0\7\42\6\0\15\42\1\u027a\14\42"+
    "\4\0\33\42\24\0\7\42\6\0\24\42\1\u027b\5\42"+
    "\4\0\33\42\24\0\7\42\6\0\23\42\1\u027c\6\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\7\42"+
    "\1\u0219\23\42\24\0\7\42\6\0\4\42\1\u027d\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u027e\14\42\24\0\7\42\6\0\4\42\1\u027f\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u0280\25\42\24\0\7\42\6\0\32\42\4\0\22\42"+
    "\1\u0281\10\42\24\0\7\42\6\0\32\42\4\0\22\42"+
    "\1\u0282\10\42\24\0\7\42\6\0\32\42\4\0\3\42"+
    "\1\u0283\27\42\24\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u0283\6\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u0284\25\42\24\0\7\42\6\0\32\42\4\0\13\42"+
    "\1\u0116\17\42\24\0\7\42\6\0\32\42\4\0\10\42"+
    "\1\u024e\22\42\24\0\7\42\6\0\32\42\4\0\23\42"+
    "\1\u0285\7\42\24\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u0286\16\42\24\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u0287\6\42\24\0\7\42\6\0\32\42\4\0\11\42"+
    "\1\u0288\21\42\24\0\7\42\6\0\32\42\4\0\15\42"+
    "\1\u0289\15\42\24\0\7\42\6\0\32\42\4\0\25\42"+
    "\1\u028a\5\42\24\0\7\42\6\0\32\42\4\0\20\42"+
    "\1\u028b\12\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u028c\14\42\24\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u028d\16\42\24\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u028e\6\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\162\31\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u028f\31\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u0290\25\42\24\0\7\42\6\0\32\42\4\0\22\42"+
    "\1\u0291\10\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u0292\31\42\24\0\5\42\1\u020a\1\42\6\0\32\42"+
    "\4\0\33\42\24\0\2\42\1\u020a\4\42\6\0\32\42"+
    "\4\0\33\42\24\0\4\42\1\u020a\2\42\6\0\32\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\22\42"+
    "\1\u0293\10\42\116\0\1\u0294\37\0\7\42\6\0\32\42"+
    "\4\0\4\42\1\u0295\26\42\24\0\7\42\6\0\32\42"+
    "\4\0\26\42\1\u0296\4\42\24\0\7\42\6\0\32\42"+
    "\4\0\17\42\1\u0297\13\42\110\0\1\u0298\45\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u0299\31\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u029a\6\42\24\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u029b\31\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u029c\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u029d\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u024e\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u029e\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\22\42\1\u029f\10\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u020a\6\42\24\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u02a0\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\3\42\1\u02a1\12\42\1\u0187\14\42"+
    "\24\0\7\42\6\0\32\42\4\0\22\42\1\u02a2\10\42"+
    "\24\0\7\42\6\0\32\42\4\0\3\42\1\u02a3\27\42"+
    "\24\0\7\42\6\0\32\42\4\0\10\42\1\u02a4\22\42"+
    "\24\0\7\42\6\0\32\42\4\0\27\42\1\u02a5\3\42"+
    "\24\0\7\42\6\0\32\42\4\0\23\42\1\u02a6\7\42"+
    "\24\0\1\42\1\u021e\1\42\1\u021f\1\42\1\u0220\1\u020a"+
    "\6\0\32\42\4\0\33\42\24\0\7\42\6\0\32\42"+
    "\4\0\24\42\1\u02a7\6\42\24\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u01bf\25\42\24\0\7\42\6\0\32\42"+
    "\4\0\4\42\1\u02a8\26\42\57\0\1\u02a9\76\0\7\42"+
    "\6\0\32\42\4\0\16\42\1\u02aa\14\42\24\0\7\42"+
    "\6\0\32\42\4\0\23\42\1\u02ab\7\42\24\0\7\42"+
    "\6\0\32\42\4\0\23\42\1\u02ac\7\42\24\0\7\42"+
    "\6\0\17\42\1\u02ad\12\42\4\0\33\42\24\0\7\42"+
    "\6\0\4\42\1\u02ae\25\42\4\0\33\42\24\0\7\42"+
    "\6\0\15\42\1\u02af\14\42\4\0\33\42\24\0\7\42"+
    "\6\0\21\42\1\u02b0\10\42\4\0\33\42\24\0\7\42"+
    "\6\0\4\42\1\u0189\25\42\4\0\33\42\24\0\7\42"+
    "\6\0\1\u02b1\31\42\4\0\33\42\24\0\7\42\6\0"+
    "\4\42\1\u0174\25\42\4\0\33\42\24\0\7\42\6\0"+
    "\15\42\1\u02b2\14\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\1\42\1\u02b3\31\42\24\0\7\42\6\0"+
    "\32\42\4\0\24\42\1\u0159\6\42\24\0\7\42\6\0"+
    "\22\42\1\315\7\42\4\0\33\42\24\0\7\42\6\0"+
    "\6\42\1\u02b4\23\42\4\0\33\42\57\0\1\u02b5\76\0"+
    "\7\42\6\0\32\42\4\0\4\42\1\u013c\26\42\5\0"+
    "\1\u02b6\16\0\7\42\6\0\32\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\20\42\1\u02b7\12\42\24\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u02b8\16\42\24\0"+
    "\7\42\6\0\6\42\1\315\23\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u02b9\25\42\24\0"+
    "\7\42\6\0\23\42\1\u02ba\6\42\4\0\33\42\52\0"+
    "\1\u02bb\103\0\7\42\6\0\32\42\4\0\5\42\1\u02bc"+
    "\25\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u02bd"+
    "\14\42\24\0\7\42\6\0\32\42\4\0\26\42\1\u02be"+
    "\4\42\24\0\7\42\6\0\32\42\4\0\5\42\1\u02a2"+
    "\25\42\24\0\7\42\6\0\32\42\4\0\23\42\1\u019b"+
    "\7\42\24\0\7\42\6\0\32\42\4\0\6\42\1\u02bf"+
    "\24\42\24\0\7\42\6\0\32\42\4\0\20\42\1\u02c0"+
    "\12\42\24\0\7\42\6\0\32\42\4\0\27\42\1\u027e"+
    "\3\42\24\0\7\42\6\0\32\42\4\0\10\42\1\u02c1"+
    "\22\42\24\0\7\42\6\0\32\42\4\0\5\42\1\u02c2"+
    "\25\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u02c3"+
    "\14\42\24\0\7\42\6\0\32\42\4\0\24\42\1\u02c4"+
    "\6\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u02c5"+
    "\14\42\24\0\7\42\6\0\32\42\4\0\5\42\1\327"+
    "\25\42\24\0\7\42\6\0\32\42\4\0\17\42\1\u02c6"+
    "\13\42\24\0\7\42\6\0\32\42\4\0\11\42\1\u02c7"+
    "\21\42\24\0\7\42\6\0\21\42\1\u02c8\10\42\4\0"+
    "\33\42\24\0\7\42\6\0\3\42\1\u02c9\26\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\1\42\1\u02ca"+
    "\31\42\24\0\7\42\6\0\14\42\1\u0155\15\42\4\0"+
    "\33\42\24\0\7\42\6\0\4\42\1\u02cb\25\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u02cc"+
    "\14\42\24\0\7\42\6\0\32\42\4\0\5\42\1\u02cd"+
    "\25\42\24\0\7\42\6\0\23\42\1\u02ce\6\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\4\42\1\u02cf"+
    "\26\42\24\0\7\42\6\0\32\42\4\0\24\42\1\u02d0"+
    "\6\42\24\0\7\42\6\0\1\u01ba\31\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\23\42\1\u0101\7\42"+
    "\24\0\7\42\6\0\32\42\4\0\6\42\1\u02d1\24\42"+
    "\24\0\7\42\6\0\32\42\4\0\7\42\1\u02d2\23\42"+
    "\5\0\1\u02d3\16\0\7\42\6\0\32\42\4\0\33\42"+
    "\24\0\7\42\6\0\4\42\1\u0244\25\42\4\0\33\42"+
    "\24\0\7\42\6\0\4\42\1\u014b\25\42\4\0\33\42"+
    "\24\0\7\42\6\0\22\42\1\u02d4\7\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\11\42\1\145\21\42"+
    "\24\0\7\42\6\0\32\42\4\0\26\42\1\u02d5\4\42"+
    "\24\0\7\42\6\0\16\42\1\u02d6\13\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\u02d7\31\42"+
    "\24\0\7\42\6\0\32\42\4\0\24\42\1\u019e\6\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\u02d8\31\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u02d9\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\16\42\1\u02da\14\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\u02db\31\42"+
    "\24\0\7\42\6\0\32\42\4\0\14\42\1\u02dc\16\42"+
    "\24\0\7\42\6\0\32\42\4\0\24\42\1\u024e\6\42"+
    "\24\0\7\42\6\0\32\42\4\0\4\42\1\u02dd\26\42"+
    "\24\0\7\42\6\0\32\42\4\0\14\42\1\u02de\16\42"+
    "\24\0\3\42\1\u021f\1\42\1\u0220\1\42\6\0\32\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u02cf\16\42\24\0\7\42\6\0\32\42\4\0\15\42"+
    "\1\u02df\15\42\24\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u0219\6\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u02e0\14\42\24\0\7\42\6\0\32\42\4\0\6\42"+
    "\1\u02e1\24\42\123\0\1\u02e2\32\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\u0152\31\42\24\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u0219\25\42\24\0\7\42\6\0\32\42"+
    "\4\0\3\42\1\u021a\27\42\115\0\1\u02e3\40\0\7\42"+
    "\6\0\32\42\4\0\7\42\1\u02e4\23\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u02e5\6\42\24\0\7\42"+
    "\6\0\32\42\4\0\3\42\1\u02e6\27\42\24\0\7\42"+
    "\6\0\32\42\4\0\3\42\1\u02cf\27\42\24\0\7\42"+
    "\6\0\32\42\4\0\22\42\1\u02e7\10\42\24\0\7\42"+
    "\6\0\32\42\4\0\16\42\1\u02a8\14\42\24\0\7\42"+
    "\6\0\32\42\4\0\3\42\1\u0287\27\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u02e8\6\42\24\0\7\42"+
    "\6\0\32\42\4\0\10\42\1\315\22\42\24\0\7\42"+
    "\6\0\32\42\4\0\22\42\1\u02e9\10\42\24\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u02ea\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u02eb\21\42\56\0\1\u02ec"+
    "\77\0\7\42\6\0\32\42\4\0\4\42\1\u02ed\26\42"+
    "\24\0\7\42\6\0\32\42\4\0\23\42\1\u02ee\7\42"+
    "\24\0\7\42\6\0\32\42\4\0\17\42\1\327\13\42"+
    "\24\0\7\42\6\0\15\42\1\u02ef\14\42\4\0\33\42"+
    "\24\0\7\42\6\0\1\u02f0\31\42\4\0\33\42\24\0"+
    "\7\42\6\0\22\42\1\u02f1\7\42\4\0\33\42\24\0"+
    "\7\42\6\0\2\42\1\u01d2\27\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u02f2\6\42\24\0"+
    "\7\42\6\0\15\42\1\u02f3\14\42\4\0\33\42\65\0"+
    "\1\u02f4\106\0\1\u02f5\113\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u02bf\25\42\24\0\7\42\6\0\15\42\1\u02f6"+
    "\14\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\23\42\1\u02f7\7\42\5\0\1\u02f8\16\0\7\42\6\0"+
    "\32\42\4\0\33\42\57\0\1\u02f9\76\0\7\42\6\0"+
    "\32\42\4\0\10\42\1\u02fa\22\42\24\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u02fb\25\42\24\0\7\42\6\0"+
    "\32\42\4\0\1\42\1\u02fc\31\42\24\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u02fd\25\42\24\0\7\42\6\0"+
    "\32\42\4\0\22\42\1\u02fe\10\42\24\0\7\42\6\0"+
    "\32\42\4\0\7\42\1\u01d9\23\42\24\0\7\42\6\0"+
    "\32\42\4\0\17\42\1\u02ff\13\42\24\0\7\42\6\0"+
    "\32\42\4\0\1\42\1\u0300\31\42\24\0\7\42\6\0"+
    "\32\42\4\0\4\42\1\u0301\26\42\24\0\7\42\6\0"+
    "\30\42\1\u02f3\1\42\4\0\33\42\24\0\7\42\6\0"+
    "\24\42\1\u0302\5\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u0303\16\42\24\0\7\42\6\0"+
    "\32\42\4\0\26\42\1\u0304\4\42\24\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u0305\16\42\24\0\7\42\6\0"+
    "\7\42\1\u0306\22\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\25\42\1\u0307\5\42\24\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u016e\25\42\41\0\1\u0308\114\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0309\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u030a\14\42\24\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u020e\27\42\24\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u020a\14\42\24\0"+
    "\7\42\6\0\32\42\4\0\30\42\1\u030b\2\42\24\0"+
    "\7\42\6\0\32\42\4\0\25\42\1\u030c\5\42\24\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u020a\16\42\24\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u02cf\6\42\24\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u030d\7\42\24\0"+
    "\7\42\6\0\32\42\4\0\31\42\1\u01f6\1\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u030e\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u030f\27\42\24\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u0310\31\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0311\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u02cf\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u01ee\6\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0312\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\6\42\1\u0313\24\42\24\0"+
    "\7\42\6\0\32\42\4\0\17\42\1\u0314\13\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0315\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u0316\16\42\63\0"+
    "\1\u0317\72\0\7\42\6\0\32\42\4\0\14\42\1\u0318"+
    "\16\42\24\0\7\42\6\0\16\42\1\u0194\13\42\4\0"+
    "\33\42\24\0\7\42\6\0\10\42\1\u0319\21\42\4\0"+
    "\33\42\24\0\7\42\6\0\4\42\1\u031a\25\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\5\42\1\207"+
    "\25\42\5\0\1\u031b\16\0\7\42\6\0\32\42\4\0"+
    "\33\42\64\0\1\u031c\136\0\1\u031d\64\0\7\42\6\0"+
    "\32\42\4\0\1\42\1\u031e\31\42\51\0\1\u031f\131\0"+
    "\1\u0320\104\0\7\42\6\0\32\42\4\0\5\42\1\u0321"+
    "\25\42\24\0\7\42\6\0\32\42\4\0\22\42\1\u0322"+
    "\10\42\24\0\7\42\6\0\32\42\4\0\3\42\1\u0323"+
    "\27\42\24\0\7\42\6\0\32\42\4\0\22\42\1\u0324"+
    "\10\42\24\0\7\42\6\0\32\42\4\0\22\42\1\u0325"+
    "\10\42\24\0\7\42\6\0\32\42\4\0\22\42\1\u0326"+
    "\10\42\24\0\7\42\6\0\32\42\4\0\4\42\1\u0327"+
    "\26\42\24\0\7\42\6\0\32\42\4\0\1\42\1\u0328"+
    "\3\42\1\u0329\25\42\24\0\7\42\6\0\21\42\1\u032a"+
    "\10\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u032b\25\42\24\0\7\42\6\0\32\42\4\0"+
    "\31\42\1\u0287\1\42\24\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u032c\31\42\24\0\7\42\6\0\32\42\4\0"+
    "\22\42\1\u032d\10\42\54\0\1\u032e\101\0\7\42\6\0"+
    "\32\42\4\0\16\42\1\u032f\14\42\24\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u0330\16\42\24\0\1\42\1\u0331"+
    "\3\42\1\u0220\1\42\6\0\32\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0332\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u0333\14\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0334\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u0335\27\42\24\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u0219\7\42\24\0"+
    "\7\42\6\0\32\42\4\0\20\42\1\u013c\12\42\24\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u0336\14\42\24\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u020e\14\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0287\25\42\64\0"+
    "\1\u0337\71\0\7\42\6\0\32\42\4\0\5\42\1\u0338"+
    "\25\42\24\0\7\42\6\0\15\42\1\u0339\14\42\4\0"+
    "\33\42\53\0\1\u033a\123\0\1\u033b\110\0\7\42\6\0"+
    "\32\42\4\0\15\42\1\u033c\15\42\56\0\1\u033d\131\0"+
    "\1\u033e\77\0\7\42\6\0\32\42\4\0\22\42\1\u033f"+
    "\10\42\24\0\7\42\6\0\32\42\4\0\22\42\1\u0340"+
    "\10\42\24\0\7\42\6\0\32\42\4\0\5\42\1\u0341"+
    "\25\42\24\0\7\42\6\0\32\42\4\0\11\42\1\u0342"+
    "\21\42\24\0\7\42\6\0\32\42\4\0\11\42\1\u0343"+
    "\21\42\24\0\7\42\6\0\32\42\4\0\23\42\1\u013c"+
    "\7\42\24\0\7\42\6\0\32\42\4\0\2\42\1\u02eb"+
    "\30\42\24\0\7\42\6\0\32\42\4\0\23\42\1\u0287"+
    "\7\42\24\0\7\42\6\0\4\42\1\u0152\25\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u028b"+
    "\14\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u0344"+
    "\14\42\24\0\7\42\6\0\32\42\4\0\5\42\1\u0345"+
    "\25\42\54\0\1\u0346\101\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u0327\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\31\42\1\u013c\1\42\24\0\2\42\1\u0347\4\42\6\0"+
    "\32\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u02dd\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\17\42\1\u0348\13\42\24\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u0349\25\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u034a\21\42\62\0\1\u034b\73\0\7\42\6\0"+
    "\32\42\4\0\22\42\1\u02f7\10\42\24\0\7\42\6\0"+
    "\23\42\1\u0244\6\42\4\0\33\42\45\0\1\u034c\146\0"+
    "\1\u034d\73\0\7\42\6\0\32\42\4\0\5\42\1\u034e"+
    "\25\42\64\0\1\u034f\71\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u020e\21\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u0350\21\42\24\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u0351\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\4\42\1\u0351\26\42\24\0\7\42\6\0\32\42\4\0"+
    "\4\42\1\u0352\26\42\24\0\6\42\1\u020a\6\0\32\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\6\42"+
    "\1\u0353\24\42\24\0\7\42\6\0\32\42\4\0\32\42"+
    "\1\u0354\41\0\1\u0355\161\0\1\u0356\45\0\1\u025a\150\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u0357\7\42\57\0"+
    "\1\u0358\76\0\7\42\6\0\32\42\4\0\4\42\1\u0316"+
    "\26\42\24\0\7\42\6\0\32\42\4\0\1\42\1\u0359"+
    "\31\42\24\0\7\42\6\0\32\42\4\0\14\42\1\u035a"+
    "\16\42\24\0\7\42\6\0\32\42\4\0\5\42\1\u035b"+
    "\25\42\51\0\1\u035c\104\0\7\42\6\0\32\42\4\0"+
    "\20\42\1\u035d\12\42\24\0\7\42\6\0\32\42\4\0"+
    "\2\42\1\u035e\30\42\24\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u035f\25\42\24\0\7\42\6\0\32\42\4\0"+
    "\4\42\1\u0287\26\42\56\0\1\u0360\77\0\7\42\6\0"+
    "\32\42\4\0\1\42\1\u0361\31\42\24\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u0362\16\42\24\0\7\42\6\0"+
    "\32\42\4\0\22\42\1\u0174\10\42\64\0\1\u0363\71\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u02b7\27\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u013c\25\42\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[69300];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\2\11\2\1\1\11"+
    "\1\1\1\11\2\1\2\11\34\1\2\11\24\1\1\11"+
    "\1\1\3\11\1\0\3\11\1\0\2\11\2\0\1\11"+
    "\231\1\1\0\226\1\1\0\40\1\1\0\173\1\1\0"+
    "\3\1\1\0\25\1\1\0\24\1\1\0\10\1\1\0"+
    "\71\1\1\0\3\1\1\0\20\1\1\0\13\1\2\0"+
    "\4\1\1\0\27\1\1\0\16\1\2\11\10\1\1\0"+
    "\7\1\2\0\2\1\2\0\16\1\1\0\16\1\1\0"+
    "\3\1\2\0\1\11\1\1\2\0\15\1\1\0\10\1"+
    "\1\0\2\1\2\0\1\1\1\0\1\11\7\1\1\11"+
    "\4\1\3\0\1\1\1\0\5\1\1\0\1\11\1\1"+
    "\1\11\3\1\1\0\3\1\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[867];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int _numberTokens = 0;
    private boolean _thereIsTokens = false;
    private HashMap<String, Integer> identifiers = new HashMap<String, Integer>();
    
    public boolean thereIsTokens() {return this._thereIsTokens;}
    public int numberTokens() {return this._numberTokens;}
    public HashMap<String, Integer> getIdentifiers() {return this.identifiers;}

    // Creates and returns a Token Object
    private Token foundSymbol(String token, String lexeme, int line, int column) {
        this._thereIsTokens = true;
        this._numberTokens++;

        // value given lexeme as a key
        Integer value = identifiers.get(lexeme);
        Integer size = identifiers.size();
        
        // Logic for storing identifiers in the Hashmap
        if (token == "Identificador") {
            if (value == null) {
                identifiers.put(lexeme, size);
                lexeme = size.toString();
            } else {
                lexeme = value.toString();
            }
        }   

        Token t = new Token(token, lexeme, line, column);
        return t;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    this._thereIsTokens = false;
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignore unmatched characters */
            }
          // fall through
          case 92: break;
          case 2:
            { return foundSymbol("Operador Logico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 93: break;
          case 3:
            { return foundSymbol("Comentario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 94: break;
          case 4:
            { return foundSymbol("Operador Aritmetico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 95: break;
          case 5:
            { return foundSymbol("Operador de Bits", yytext(), yyline, yycolumn);
            }
          // fall through
          case 96: break;
          case 6:
            { return foundSymbol("Parentesis Izquierdo", "", yyline, yycolumn);
            }
          // fall through
          case 97: break;
          case 7:
            { return foundSymbol("Parentesis Derecho", "", yyline, yycolumn);
            }
          // fall through
          case 98: break;
          case 8:
            { return foundSymbol("Coma", "", yyline, yycolumn);
            }
          // fall through
          case 99: break;
          case 9:
            { return foundSymbol("Punto", "", yyline, yycolumn);
            }
          // fall through
          case 100: break;
          case 10:
            { return foundSymbol("Entero", yytext(), yyline, yycolumn);
            }
          // fall through
          case 101: break;
          case 11:
            { return foundSymbol("Dos puntos", "", yyline, yycolumn);
            }
          // fall through
          case 102: break;
          case 12:
            { return foundSymbol("Punto y coma", "", yyline, yycolumn);
            }
          // fall through
          case 103: break;
          case 13:
            { return foundSymbol("Comparador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 104: break;
          case 14:
            { return foundSymbol("Asignador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 105: break;
          case 15:
            { return foundSymbol("Identificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 106: break;
          case 16:
            { return foundSymbol("Corchete Izquierdo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 107: break;
          case 17:
            { return foundSymbol("Corchete Derecho", "", yyline, yycolumn);
            }
          // fall through
          case 108: break;
          case 18:
            { return foundSymbol("Llave Izquierda", "", yyline, yycolumn);
            }
          // fall through
          case 109: break;
          case 19:
            { return foundSymbol("Llave Derecha", "yytext", yyline, yycolumn);
            }
          // fall through
          case 110: break;
          case 20:
            { return foundSymbol("Cadena", yytext(), yyline, yycolumn);
            }
          // fall through
          case 111: break;
          case 21:
            { return foundSymbol("Caracter", yytext(), yyline, yycolumn);
            }
          // fall through
          case 112: break;
          case 22:
            { return foundSymbol("Complejo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 23:
            { return foundSymbol("Referencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 114: break;
          case 24:
            { return foundSymbol("Of", "", yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 25:
            { return foundSymbol("Renombrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 116: break;
          case 26:
            { return foundSymbol("Iterador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 117: break;
          case 27:
            { return foundSymbol("Condicional", yytext(), yyline, yycolumn);
            }
          // fall through
          case 118: break;
          case 28:
            { return foundSymbol("Operadot de Pertenencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 119: break;
          case 29:
            { return foundSymbol("Operador de identidad", yytext(), yyline, yycolumn);
            }
          // fall through
          case 120: break;
          case 30:
            { return foundSymbol("Decimal", yytext(), yyline, yycolumn);
            }
          // fall through
          case 121: break;
          case 31:
            { return foundSymbol("Añadir", yytext(), yyline, yycolumn);
            }
          // fall through
          case 122: break;
          case 32:
            { return foundSymbol("Ordenar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 123: break;
          case 33:
            { return foundSymbol("Almacenamiento", yytext(), yyline, yycolumn);
            }
          // fall through
          case 124: break;
          case 34:
            { return foundSymbol("Salida", yytext(), yyline, yycolumn);
            }
          // fall through
          case 125: break;
          case 35:
            { return foundSymbol("Get", yytext(), yyline, yycolumn);
            }
          // fall through
          case 126: break;
          case 36:
            { return foundSymbol("Variable", yytext(), yyline, yycolumn);
            }
          // fall through
          case 127: break;
          case 37:
            { return foundSymbol("Modificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 128: break;
          case 38:
            { return foundSymbol("Update", yytext(), yyline, yycolumn);
            }
          // fall through
          case 129: break;
          case 39:
            { return foundSymbol("Funcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 130: break;
          case 40:
            { return foundSymbol("Limite", yytext(), yyline, yycolumn);
            }
          // fall through
          case 131: break;
          case 41:
            { return foundSymbol("Borrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 132: break;
          case 42:
            { return foundSymbol("Tipo de dato", yytext(), yyline, yycolumn);
            }
          // fall through
          case 133: break;
          case 43:
            { return foundSymbol("Crear", yytext(), yyline, yycolumn);
            }
          // fall through
          case 134: break;
          case 44:
            { return foundSymbol("Intentar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 135: break;
          case 45:
            { return foundSymbol("Cast", yytext(), yyline, yycolumn);
            }
          // fall through
          case 136: break;
          case 46:
            { return foundSymbol("Ejecutar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 137: break;
          case 47:
            { return foundSymbol("GoTo", "", yyline, yycolumn);
            }
          // fall through
          case 138: break;
          case 48:
            { return foundSymbol("Join", yytext(), yyline, yycolumn);
            }
          // fall through
          case 139: break;
          case 49:
            { return foundSymbol("Valor nulo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 140: break;
          case 50:
            { return foundSymbol("Incremento", "", yyline, yycolumn);
            }
          // fall through
          case 141: break;
          case 51:
            { return foundSymbol("Debug", "", yyline, yycolumn);
            }
          // fall through
          case 142: break;
          case 52:
            { return foundSymbol("Consequencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 143: break;
          case 53:
            { return foundSymbol("Booleano", yytext(), yyline, yycolumn);
            }
          // fall through
          case 144: break;
          case 54:
            { return foundSymbol("Vista", "", yyline, yycolumn);
            }
          // fall through
          case 145: break;
          case 55:
            { return foundSymbol("Estructura de datos", yytext(), yyline, yycolumn);
            }
          // fall through
          case 146: break;
          case 56:
            { return foundSymbol("Enum", "", yyline, yycolumn);
            }
          // fall through
          case 147: break;
          case 57:
            { return foundSymbol("Importar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 148: break;
          case 58:
            { return foundSymbol("Pass", "", yyline, yycolumn);
            }
          // fall through
          case 149: break;
          case 59:
            { return foundSymbol("Alterar", "", yyline, yycolumn);
            }
          // fall through
          case 150: break;
          case 60:
            { return foundSymbol("Restriccion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 151: break;
          case 61:
            { return foundSymbol("Excepcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 152: break;
          case 62:
            { return foundSymbol("Evento", "", yyline, yycolumn);
            }
          // fall through
          case 153: break;
          case 63:
            { return foundSymbol("Indice", "", yyline, yycolumn);
            }
          // fall through
          case 154: break;
          case 64:
            { return foundSymbol("Tabla", "", yyline, yycolumn);
            }
          // fall through
          case 155: break;
          case 65:
            { return foundSymbol("Union", yytext(), yyline, yycolumn);
            }
          // fall through
          case 156: break;
          case 66:
            { return foundSymbol("Asyncrono", yytext(), yyline, yycolumn);
            }
          // fall through
          case 157: break;
          case 67:
            { return foundSymbol("Clase", "", yyline, yycolumn);
            }
          // fall through
          case 158: break;
          case 68:
            { return foundSymbol("Modificador de No Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 159: break;
          case 69:
            { return foundSymbol("Imprimir", "", yyline, yycolumn);
            }
          // fall through
          case 160: break;
          case 70:
            { return foundSymbol("Clase Padre", yytext(), yyline, yycolumn);
            }
          // fall through
          case 161: break;
          case 71:
            { return foundSymbol("Regresar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 162: break;
          case 72:
            { return foundSymbol("Backup", "", yyline, yycolumn);
            }
          // fall through
          case 163: break;
          case 73:
            { return foundSymbol("Columna", "", yyline, yycolumn);
            }
          // fall through
          case 164: break;
          case 74:
            { return foundSymbol("Module", "", yyline, yycolumn);
            }
          // fall through
          case 165: break;
          case 75:
            { return foundSymbol("Opcion", "", yyline, yycolumn);
            }
          // fall through
          case 166: break;
          case 76:
            { return foundSymbol("Select", "", yyline, yycolumn);
            }
          // fall through
          case 167: break;
          case 77:
            { return foundSymbol("Modificador de Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 168: break;
          case 78:
            { return foundSymbol("Operador de typo", "", yyline, yycolumn);
            }
          // fall through
          case 169: break;
          case 79:
            { return foundSymbol("Insertar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 170: break;
          case 80:
            { return foundSymbol("Rango", "", yyline, yycolumn);
            }
          // fall through
          case 171: break;
          case 81:
            { return foundSymbol("AddHandler", yytext(), yyline, yycolumn);
            }
          // fall through
          case 172: break;
          case 82:
            { return foundSymbol("Parcial", "", yyline, yycolumn);
            }
          // fall through
          case 173: break;
          case 83:
            { return foundSymbol("Erencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 174: break;
          case 84:
            { return foundSymbol("Paquete", "", yyline, yycolumn);
            }
          // fall through
          case 175: break;
          case 85:
            { return foundSymbol("Database", "", yyline, yycolumn);
            }
          // fall through
          case 176: break;
          case 86:
            { return foundSymbol("Operador de VB", "", yyline, yycolumn);
            }
          // fall through
          case 177: break;
          case 87:
            { return foundSymbol("Continuar", "", yyline, yycolumn);
            }
          // fall through
          case 178: break;
          case 88:
            { return foundSymbol("Namespace", "", yyline, yycolumn);
            }
          // fall through
          case 179: break;
          case 89:
            { return foundSymbol("Estructura", "", yyline, yycolumn);
            }
          // fall through
          case 180: break;
          case 90:
            { return foundSymbol("Interface", "", yyline, yycolumn);
            }
          // fall through
          case 181: break;
          case 91:
            { return foundSymbol("Operador de instancia", "", yyline, yycolumn);
            }
          // fall through
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
