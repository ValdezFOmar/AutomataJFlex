// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/resources/Lexer.flex

// User Code (Import dependencies or declare variables)
import java.util.HashMap;

@SuppressWarnings("fallthrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\2\1\3\1\4\1\5\1\0"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\21\1\26\1\21\1\27\1\21\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\0\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\0\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\6\0\1\1\32\0\1\1\u01df\0\1\1"+
    "\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\3\1\4\1\5\1\0"+
    "\1\6\1\7\2\4\1\10\1\4\1\11\1\4\1\12"+
    "\1\13\1\14\1\15\1\16\1\15\1\17\30\20\1\21"+
    "\1\22\1\5\23\20\1\23\1\5\1\24\1\5\1\15"+
    "\1\25\1\16\1\26\1\0\1\27\1\30\1\31\1\32"+
    "\2\0\1\33\1\34\62\20\1\35\12\20\1\36\45\20"+
    "\1\37\12\20\1\40\11\20\1\41\1\20\1\42\1\43"+
    "\6\20\1\26\25\20\1\44\1\0\1\44\1\45\1\46"+
    "\1\20\1\47\36\20\1\50\4\20\1\51\12\20\1\52"+
    "\13\20\1\53\1\4\16\20\1\54\5\20\1\55\10\20"+
    "\1\56\6\20\1\57\2\20\1\60\35\20\1\57\1\61"+
    "\11\20\1\62\5\20\1\63\1\0\3\20\1\64\1\20"+
    "\1\26\22\20\1\65\7\20\1\0\13\20\1\66\5\20"+
    "\1\67\6\20\1\70\12\20\1\71\5\20\1\72\1\73"+
    "\10\20\1\74\27\20\1\75\1\76\3\20\1\77\1\100"+
    "\10\20\1\101\12\20\1\63\1\102\7\20\1\103\1\104"+
    "\1\105\1\106\5\20\1\107\10\20\1\0\3\20\1\0"+
    "\1\20\1\110\7\20\1\111\10\20\1\63\1\112\3\20"+
    "\1\0\1\113\2\20\1\37\3\20\1\114\11\20\1\115"+
    "\1\116\1\20\1\0\6\20\1\117\1\20\1\0\33\20"+
    "\1\120\4\20\1\121\3\20\1\122\5\20\1\123\1\20"+
    "\1\124\1\20\1\125\5\20\1\125\1\63\5\20\1\0"+
    "\3\20\1\0\1\20\1\126\7\20\1\127\2\20\1\115"+
    "\2\20\1\130\1\131\1\0\3\20\1\132\1\20\1\133"+
    "\5\20\2\0\3\20\1\0\1\134\3\20\1\52\5\20"+
    "\1\135\10\20\1\136\1\137\1\20\1\140\1\20\1\0"+
    "\15\20\1\43\1\141\1\42\5\20\1\142\3\20\1\0"+
    "\2\20\1\143\4\20\2\0\1\20\1\144\1\0\11\20"+
    "\1\145\4\20\1\0\2\20\1\63\1\20\1\146\3\20"+
    "\1\147\5\20\1\0\3\20\1\150\2\0\1\47\1\20"+
    "\1\0\5\20\1\151\7\20\1\0\3\20\1\152\4\20"+
    "\1\0\2\20\2\0\1\20\1\73\2\20\1\153\3\20"+
    "\1\154\1\121\3\20\1\155\1\20\3\0\4\20\1\156"+
    "\1\157\1\20\1\0\1\114\4\20\1\0\3\20\1\0"+
    "\2\20\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[880];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\133\0\266\0\u0111\0\133\0\u016c\0\u01c7\0\u0222"+
    "\0\133\0\133\0\u027d\0\u02d8\0\133\0\u0333\0\133\0\u038e"+
    "\0\u03e9\0\133\0\133\0\u0444\0\266\0\u049f\0\u04fa\0\u0555"+
    "\0\u05b0\0\u060b\0\u0666\0\u06c1\0\u071c\0\u0777\0\u07d2\0\u082d"+
    "\0\u0888\0\u08e3\0\u093e\0\u0999\0\u09f4\0\u0a4f\0\u0aaa\0\u0b05"+
    "\0\u0b60\0\u0bbb\0\u0c16\0\u0c71\0\u0ccc\0\u0d27\0\u0d82\0\133"+
    "\0\133\0\u016c\0\u0ddd\0\u0e38\0\u0e93\0\u0eee\0\u0f49\0\u0fa4"+
    "\0\u0fff\0\u105a\0\u10b5\0\u1110\0\u116b\0\u11c6\0\u1221\0\u127c"+
    "\0\u12d7\0\u1332\0\u138d\0\u13e8\0\u1443\0\133\0\u149e\0\133"+
    "\0\133\0\133\0\133\0\133\0\133\0\u14f9\0\133\0\133"+
    "\0\133\0\133\0\u1554\0\u15af\0\133\0\133\0\u160a\0\u1665"+
    "\0\u16c0\0\u171b\0\u1776\0\u17d1\0\u182c\0\u1887\0\u18e2\0\u193d"+
    "\0\u1998\0\u19f3\0\u1a4e\0\u1aa9\0\u1b04\0\u1b5f\0\u1bba\0\u1c15"+
    "\0\u1c70\0\u1ccb\0\u1d26\0\u1d81\0\u1ddc\0\u1e37\0\u1e92\0\u1eed"+
    "\0\u1f48\0\u1fa3\0\u1ffe\0\u2059\0\u20b4\0\u210f\0\u216a\0\u21c5"+
    "\0\u2220\0\u227b\0\u22d6\0\u2331\0\u238c\0\u23e7\0\u2442\0\u249d"+
    "\0\u24f8\0\u2553\0\u25ae\0\u2609\0\u2664\0\u26bf\0\u271a\0\u2775"+
    "\0\u08e3\0\u27d0\0\u282b\0\u2886\0\u28e1\0\u293c\0\u2997\0\u29f2"+
    "\0\u2a4d\0\u2aa8\0\u2b03\0\u08e3\0\u2b5e\0\u2bb9\0\u2c14\0\u2c6f"+
    "\0\u2cca\0\u2d25\0\u2d80\0\u2ddb\0\u2e36\0\u2e91\0\u2eec\0\u2f47"+
    "\0\u2fa2\0\u2ffd\0\u3058\0\u30b3\0\u310e\0\u3169\0\u31c4\0\u321f"+
    "\0\u327a\0\u32d5\0\u3330\0\u338b\0\u33e6\0\u3441\0\u349c\0\u34f7"+
    "\0\u3552\0\u35ad\0\u3608\0\u3663\0\u36be\0\u3719\0\u3774\0\u37cf"+
    "\0\u382a\0\u3885\0\u38e0\0\u393b\0\u3996\0\u39f1\0\u3a4c\0\u3aa7"+
    "\0\u3b02\0\u3b5d\0\u3bb8\0\u3c13\0\u3c6e\0\u3cc9\0\u3d24\0\u3d7f"+
    "\0\u3dda\0\u3e35\0\u3e90\0\u3eeb\0\u3f46\0\u3fa1\0\u08e3\0\u3ffc"+
    "\0\u4057\0\u40b2\0\u410d\0\u4168\0\u41c3\0\u421e\0\u4279\0\u42d4"+
    "\0\u08e3\0\u432f\0\u438a\0\u43e5\0\u4440\0\u449b\0\u44f6\0\u4551"+
    "\0\u45ac\0\u4607\0\u4662\0\u46bd\0\u4718\0\u4773\0\u47ce\0\u4829"+
    "\0\u4884\0\u48df\0\u493a\0\u4995\0\u49f0\0\u4a4b\0\u4aa6\0\u4b01"+
    "\0\u4b5c\0\u4bb7\0\u08e3\0\u4c12\0\u08e3\0\u4c6d\0\u4cc8\0\u4d23"+
    "\0\u4d7e\0\u4dd9\0\u4e34\0\u4e8f\0\u4eea\0\u4f45\0\u4fa0\0\u4ffb"+
    "\0\u5056\0\u50b1\0\u510c\0\u5167\0\u51c2\0\u521d\0\u5278\0\u52d3"+
    "\0\u532e\0\u5389\0\u53e4\0\u543f\0\u549a\0\u54f5\0\u5550\0\u55ab"+
    "\0\u5606\0\u5661\0\u56bc\0\u08e3\0\u5717\0\u5772\0\u57cd\0\u5828"+
    "\0\u08e3\0\u5883\0\u58de\0\u5939\0\u5994\0\u59ef\0\u5a4a\0\u5aa5"+
    "\0\u5b00\0\u5b5b\0\u5bb6\0\u5c11\0\u5c6c\0\u5cc7\0\u5d22\0\u5d7d"+
    "\0\u5dd8\0\u5e33\0\u5e8e\0\u5ee9\0\u5f44\0\u5f9f\0\u5ffa\0\u08e3"+
    "\0\u6055\0\u60b0\0\u610b\0\u6166\0\u61c1\0\u621c\0\u6277\0\u62d2"+
    "\0\u632d\0\u6388\0\u63e3\0\u643e\0\u6499\0\u64f4\0\u654f\0\u08e3"+
    "\0\u65aa\0\u6605\0\u6660\0\u66bb\0\u6716\0\u08e3\0\u6771\0\u67cc"+
    "\0\u6827\0\u6882\0\u68dd\0\u6938\0\u6993\0\u69ee\0\u08e3\0\u6a49"+
    "\0\u6aa4\0\u6aff\0\u6b5a\0\u6bb5\0\u6c10\0\u08e3\0\u6c6b\0\u6cc6"+
    "\0\u08e3\0\u6d21\0\u6d7c\0\u6dd7\0\u6e32\0\u6e8d\0\u6ee8\0\u6f43"+
    "\0\u6f9e\0\u6ff9\0\u7054\0\u70af\0\u710a\0\u7165\0\u71c0\0\u721b"+
    "\0\u7276\0\u72d1\0\u732c\0\u7387\0\u73e2\0\u743d\0\u7498\0\u74f3"+
    "\0\u754e\0\u75a9\0\u7604\0\u765f\0\u76ba\0\u7715\0\u7770\0\u08e3"+
    "\0\u77cb\0\u7826\0\u7881\0\u78dc\0\u7937\0\u7992\0\u79ed\0\u7a48"+
    "\0\u7aa3\0\u7afe\0\u7b59\0\u7bb4\0\u7c0f\0\u7c6a\0\u7cc5\0\u7d20"+
    "\0\u7d7b\0\u7dd6\0\u7e31\0\u7e8c\0\u08e3\0\u7ee7\0\u7f42\0\u7f9d"+
    "\0\u7ff8\0\u8053\0\u80ae\0\u8109\0\u8164\0\u81bf\0\u821a\0\u8275"+
    "\0\u82d0\0\u832b\0\u8386\0\u83e1\0\u843c\0\u8497\0\u84f2\0\u854d"+
    "\0\u85a8\0\u08e3\0\u8603\0\u865e\0\u86b9\0\u8714\0\u876f\0\u87ca"+
    "\0\u8825\0\u8880\0\u88db\0\u8936\0\u8991\0\u89ec\0\u8a47\0\u8aa2"+
    "\0\u8afd\0\u8b58\0\u8bb3\0\u8c0e\0\u8c69\0\u08e3\0\u8cc4\0\u8d1f"+
    "\0\u8d7a\0\u8dd5\0\u8e30\0\u08e3\0\u8e8b\0\u8ee6\0\u8f41\0\u8f9c"+
    "\0\u8ff7\0\u9052\0\u08e3\0\u90ad\0\u9108\0\u9163\0\u91be\0\u9219"+
    "\0\u9274\0\u92cf\0\u932a\0\u9385\0\u93e0\0\u08e3\0\u943b\0\u9496"+
    "\0\u94f1\0\u954c\0\u95a7\0\u08e3\0\u08e3\0\u9602\0\u965d\0\u96b8"+
    "\0\u9713\0\u976e\0\u97c9\0\u9824\0\u987f\0\u08e3\0\u98da\0\u9935"+
    "\0\u9990\0\u99eb\0\u9a46\0\u9aa1\0\u9afc\0\u9b57\0\u9bb2\0\u9c0d"+
    "\0\u9c68\0\u9cc3\0\u9d1e\0\u9d79\0\u9dd4\0\u9e2f\0\u9e8a\0\u9ee5"+
    "\0\u9f40\0\u9f9b\0\u9ff6\0\ua051\0\ua0ac\0\u08e3\0\u08e3\0\ua107"+
    "\0\ua162\0\ua1bd\0\u08e3\0\u08e3\0\ua218\0\ua273\0\ua2ce\0\ua329"+
    "\0\ua384\0\ua3df\0\ua43a\0\ua495\0\u08e3\0\ua4f0\0\ua54b\0\ua5a6"+
    "\0\ua601\0\ua65c\0\ua6b7\0\ua712\0\ua76d\0\ua7c8\0\ua823\0\u08e3"+
    "\0\u08e3\0\ua87e\0\ua8d9\0\ua934\0\ua98f\0\ua9ea\0\uaa45\0\uaaa0"+
    "\0\u08e3\0\u08e3\0\u08e3\0\u08e3\0\uaafb\0\uab56\0\uabb1\0\uac0c"+
    "\0\uac67\0\u08e3\0\uacc2\0\uad1d\0\uad78\0\uadd3\0\uae2e\0\uae89"+
    "\0\uaee4\0\uaf3f\0\uaf9a\0\uaff5\0\ub050\0\ub0ab\0\ub106\0\ub161"+
    "\0\u08e3\0\ub1bc\0\ub217\0\ub272\0\ub2cd\0\ub328\0\ub383\0\ub3de"+
    "\0\u08e3\0\ub439\0\ub494\0\ub4ef\0\ub54a\0\ub5a5\0\ub600\0\ub65b"+
    "\0\ub6b6\0\ub711\0\u08e3\0\ub76c\0\ub7c7\0\ub822\0\ub87d\0\u08e3"+
    "\0\ub8d8\0\ub933\0\u08e3\0\ub98e\0\ub9e9\0\uba44\0\u08e3\0\uba9f"+
    "\0\ubafa\0\ubb55\0\ubbb0\0\ubc0b\0\ubc66\0\ubcc1\0\ubd1c\0\ubd77"+
    "\0\u08e3\0\u08e3\0\ubdd2\0\ube2d\0\ube88\0\ubee3\0\ubf3e\0\ubf99"+
    "\0\ubff4\0\uc04f\0\u08e3\0\uc0aa\0\uc105\0\uc160\0\uc1bb\0\uc216"+
    "\0\uc271\0\uc2cc\0\uc327\0\uc382\0\uc3dd\0\uc438\0\uc493\0\uc4ee"+
    "\0\uc549\0\uc5a4\0\uc5ff\0\uc65a\0\uc6b5\0\uc710\0\uc76b\0\uc7c6"+
    "\0\uc821\0\uc87c\0\uc8d7\0\uc932\0\uc98d\0\uc9e8\0\uca43\0\uca9e"+
    "\0\u08e3\0\ucaf9\0\ucb54\0\ucbaf\0\ucc0a\0\ucc65\0\uccc0\0\ucd1b"+
    "\0\ucd76\0\u08e3\0\ucdd1\0\uce2c\0\uce87\0\ucee2\0\ucf3d\0\u08e3"+
    "\0\ucf98\0\u08e3\0\ucff3\0\u08e3\0\ud04e\0\ud0a9\0\ud104\0\ud15f"+
    "\0\ud1ba\0\ud215\0\ud270\0\ud2cb\0\ud326\0\ud381\0\ud3dc\0\ud437"+
    "\0\ud492\0\ud4ed\0\ud548\0\ud5a3\0\ud5fe\0\ud659\0\u08e3\0\ud6b4"+
    "\0\ud70f\0\ud76a\0\ud7c5\0\ud820\0\ud87b\0\ud8d6\0\u08e3\0\ud931"+
    "\0\ud98c\0\ud9e7\0\uda42\0\uda9d\0\u08e3\0\u08e3\0\udaf8\0\udb53"+
    "\0\udbae\0\udc09\0\u08e3\0\udc64\0\u08e3\0\udcbf\0\udd1a\0\udd75"+
    "\0\uddd0\0\ude2b\0\ude86\0\udee1\0\udf3c\0\udf97\0\udff2\0\ue04d"+
    "\0\u08e3\0\ue0a8\0\ue103\0\ud9e7\0\u08e3\0\ue15e\0\ue1b9\0\ue214"+
    "\0\ue26f\0\ue2ca\0\u4eea\0\ue325\0\ue380\0\ue3db\0\ue436\0\ue491"+
    "\0\ue4ec\0\ue547\0\ue5a2\0\u08e3\0\u08e3\0\ue5fd\0\u08e3\0\ue658"+
    "\0\ue6b3\0\ue70e\0\ue769\0\ue7c4\0\ue81f\0\ue87a\0\ue8d5\0\ue930"+
    "\0\ue98b\0\ue9e6\0\uea41\0\uea9c\0\ueaf7\0\ueb52\0\133\0\u08e3"+
    "\0\133\0\uebad\0\uec08\0\uec63\0\uecbe\0\ued19\0\u08e3\0\ued74"+
    "\0\uedcf\0\uee2a\0\uee85\0\ueee0\0\uef3b\0\u08e3\0\uef96\0\ueff1"+
    "\0\uf04c\0\uf0a7\0\uf102\0\uf15d\0\uf1b8\0\u08e3\0\uf213\0\uf26e"+
    "\0\uf2c9\0\uf324\0\uf37f\0\uf3da\0\uf435\0\uf490\0\uf4eb\0\uf546"+
    "\0\u08e3\0\uf5a1\0\uf5fc\0\uf657\0\uf6b2\0\uf70d\0\uf768\0\uf7c3"+
    "\0\uf81e\0\uf879\0\u08e3\0\uf8d4\0\uf92f\0\uf98a\0\u08e3\0\uf9e5"+
    "\0\ufa40\0\ufa9b\0\ufaf6\0\ufb51\0\ufbac\0\ufc07\0\ufc62\0\ufcbd"+
    "\0\u08e3\0\ufd18\0\ufd73\0\133\0\ufdce\0\ufe29\0\ufe84\0\ufedf"+
    "\0\uff3a\0\uff95\0\ufff0\0\u08e3\1\113\1\246\1\u0101\1\u015c"+
    "\1\u01b7\1\u0212\1\u026d\1\u02c8\1\u0323\1\u037e\1\u03d9\0\u08e3"+
    "\1\u0434\1\u048f\1\u04ea\1\u0545\1\u05a0\1\u05fb\1\u0656\1\u06b1"+
    "\1\u070c\1\u0767\0\133\1\u07c2\1\u081d\0\u08e3\1\u0878\1\u08d3"+
    "\1\u092e\0\u08e3\0\133\1\u0989\1\u09e4\1\u0a3f\0\u08e3\1\u0a9a"+
    "\1\u0af5\1\u0b50\1\u0bab\1\u0c06\1\u0c61\1\u0cbc\1\u0d17\0\u08e3"+
    "\0\u08e3\1\u0d72\1\u0dcd\0\133\1\u0e28\1\u0e83\1\u0ede\1\u0f39"+
    "\1\u0f94\1\u0fef\1\u104a\1\u10a5\1\u1100\1\u115b\1\u11b6\0\133";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[880];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\7\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\2\42"+
    "\1\60\1\0\1\61\1\62\1\0\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\42\1\72\2\42\1\73"+
    "\1\42\1\74\1\75\1\76\1\42\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\42\1\105\1\42\1\106\1\107"+
    "\1\110\1\111\166\0\1\112\77\0\4\4\1\113\3\4"+
    "\1\0\122\4\33\0\1\114\106\0\1\115\23\0\1\114"+
    "\77\0\4\116\1\0\3\116\1\117\60\116\1\0\41\116"+
    "\13\0\1\6\4\0\1\120\12\0\1\114\113\0\1\121"+
    "\4\0\7\21\3\0\1\114\115\0\1\121\2\0\7\21"+
    "\3\0\1\114\112\0\1\122\4\0\1\6\12\0\1\114"+
    "\116\0\1\123\1\0\7\21\12\0\1\124\36\0\1\124"+
    "\3\0\1\125\57\0\1\62\1\112\132\0\1\112\1\62"+
    "\133\0\1\126\116\0\7\42\6\0\3\42\1\127\7\42"+
    "\1\130\1\42\1\131\4\42\1\132\7\42\4\0\4\42"+
    "\1\133\7\42\1\134\1\42\1\135\3\42\1\136\10\42"+
    "\25\0\7\42\6\0\1\137\3\42\1\140\25\42\4\0"+
    "\31\42\1\141\1\42\25\0\7\42\6\0\1\42\1\142"+
    "\1\143\1\144\3\42\1\145\1\146\2\42\1\147\2\42"+
    "\1\150\2\42\1\151\1\152\1\42\1\153\5\42\4\0"+
    "\1\42\1\154\31\42\25\0\7\42\6\0\1\155\3\42"+
    "\1\156\3\42\1\157\10\42\1\160\10\42\4\0\5\42"+
    "\1\161\3\42\1\162\21\42\25\0\7\42\6\0\27\42"+
    "\1\163\2\42\4\0\1\42\1\164\14\42\1\165\3\42"+
    "\1\166\3\42\1\167\1\42\1\170\2\42\25\0\7\42"+
    "\6\0\10\42\1\171\5\42\1\172\5\42\1\173\5\42"+
    "\4\0\1\42\1\174\20\42\1\175\10\42\25\0\7\42"+
    "\6\0\21\42\1\176\10\42\4\0\5\42\1\177\11\42"+
    "\1\200\13\42\25\0\7\42\6\0\1\201\31\42\4\0"+
    "\1\42\1\202\31\42\25\0\7\42\6\0\15\42\1\203"+
    "\14\42\4\0\33\42\25\0\7\42\6\0\16\42\1\204"+
    "\13\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\33\42\25\0\7\42\6\0\4\42\1\205\3\42\1\206"+
    "\21\42\4\0\5\42\1\207\3\42\1\210\21\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\211\11\42\1\212"+
    "\5\42\1\213\3\42\1\214\1\42\25\0\7\42\6\0"+
    "\32\42\4\0\1\42\1\215\3\42\1\216\11\42\1\217"+
    "\5\42\1\220\5\42\25\0\7\42\6\0\21\42\1\221"+
    "\2\42\1\222\5\42\4\0\2\42\1\223\3\42\1\224"+
    "\11\42\1\225\1\42\1\226\2\42\1\227\1\230\4\42"+
    "\25\0\7\42\6\0\21\42\1\231\10\42\4\0\1\42"+
    "\1\232\31\42\25\0\7\42\6\0\32\42\4\0\25\42"+
    "\1\233\5\42\25\0\7\42\6\0\4\42\1\234\3\42"+
    "\1\235\5\42\1\236\13\42\4\0\1\42\1\237\3\42"+
    "\1\240\25\42\25\0\7\42\6\0\1\42\1\241\2\42"+
    "\1\242\25\42\4\0\10\42\1\243\1\244\12\42\1\245"+
    "\1\246\5\42\25\0\7\42\6\0\1\247\15\42\1\250"+
    "\2\42\1\251\10\42\4\0\10\42\1\252\11\42\1\253"+
    "\6\42\1\254\1\42\25\0\7\42\6\0\10\42\1\255"+
    "\2\42\1\256\1\42\1\257\1\42\1\260\2\42\1\261"+
    "\7\42\4\0\23\42\1\262\7\42\25\0\7\42\6\0"+
    "\1\263\7\42\1\264\21\42\4\0\33\42\25\0\7\42"+
    "\6\0\7\42\1\265\22\42\4\0\11\42\1\266\10\42"+
    "\1\267\10\42\25\0\7\42\6\0\32\42\4\0\17\42"+
    "\1\75\13\42\25\0\7\42\6\0\32\42\4\0\2\42"+
    "\1\270\13\42\1\271\4\42\1\272\3\42\1\273\3\42"+
    "\25\0\7\42\6\0\32\42\4\0\17\42\1\274\2\42"+
    "\1\275\6\42\1\276\1\42\25\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\277\6\42\1\300\3\42\1\301\2\42"+
    "\1\302\13\42\25\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\276\3\42\1\303\3\42\1\304\5\42\1\305\13\42"+
    "\25\0\7\42\6\0\32\42\4\0\14\42\1\306\1\42"+
    "\1\307\11\42\1\310\2\42\25\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\174\7\42\1\311\2\42\1\312\2\42"+
    "\1\313\2\42\1\314\2\42\1\315\5\42\25\0\7\42"+
    "\6\0\32\42\4\0\14\42\1\316\16\42\25\0\7\42"+
    "\6\0\32\42\4\0\6\42\1\317\6\42\1\320\1\321"+
    "\4\42\1\322\7\42\25\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\323\7\42\1\324\5\42\1\325\13\42\25\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\326\3\42\1\327"+
    "\11\42\1\330\5\42\1\220\5\42\25\0\7\42\6\0"+
    "\32\42\4\0\22\42\1\331\10\42\25\0\7\42\6\0"+
    "\32\42\4\0\1\42\1\332\20\42\1\333\2\42\1\334"+
    "\5\42\25\0\7\42\6\0\32\42\4\0\1\42\1\335"+
    "\3\42\1\336\25\42\25\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\337\2\42\1\340\13\42\1\341\1\342\1\42"+
    "\1\343\1\42\1\344\1\42\25\0\7\42\6\0\32\42"+
    "\4\0\10\42\1\345\1\346\10\42\1\347\2\42\1\350"+
    "\5\42\25\0\7\42\6\0\32\42\4\0\11\42\1\351"+
    "\21\42\25\0\7\42\6\0\32\42\4\0\1\42\1\352"+
    "\15\42\1\353\13\42\25\0\7\42\6\0\32\42\4\0"+
    "\10\42\1\354\1\355\21\42\25\0\7\42\6\0\32\42"+
    "\4\0\11\42\1\356\21\42\37\0\1\114\74\0\1\115"+
    "\12\0\1\117\143\0\7\357\117\0\1\360\1\0\1\360"+
    "\2\0\7\361\124\0\7\42\6\0\3\42\1\362\26\42"+
    "\4\0\33\42\25\0\7\42\6\0\13\42\1\363\7\42"+
    "\1\364\6\42\4\0\33\42\25\0\7\42\6\0\30\42"+
    "\1\363\1\42\4\0\33\42\25\0\7\42\6\0\2\42"+
    "\1\365\27\42\4\0\33\42\25\0\7\42\6\0\32\42"+
    "\4\0\4\42\1\366\26\42\25\0\7\42\6\0\32\42"+
    "\4\0\11\42\1\367\21\42\25\0\7\42\6\0\32\42"+
    "\4\0\4\42\1\370\26\42\25\0\7\42\6\0\32\42"+
    "\4\0\22\42\1\371\10\42\25\0\7\42\6\0\2\42"+
    "\1\372\27\42\4\0\33\42\25\0\7\42\6\0\23\42"+
    "\1\373\6\42\4\0\33\42\25\0\7\42\6\0\21\42"+
    "\1\374\3\42\1\375\4\42\4\0\33\42\25\0\7\42"+
    "\6\0\32\42\4\0\17\42\1\376\11\42\1\377\1\42"+
    "\25\0\7\42\6\0\32\42\4\0\10\42\1\u0100\22\42"+
    "\25\0\7\42\6\0\32\42\4\0\1\42\1\377\1\u0101"+
    "\2\42\1\u0102\25\42\25\0\7\42\6\0\4\42\1\u0103"+
    "\25\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u0104\14\42\25\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u0105\14\42\25\0\7\42\6\0\13\42\1\u0106"+
    "\1\42\1\u0107\14\42\4\0\2\42\1\u0108\30\42\25\0"+
    "\7\42\6\0\4\42\1\u0109\25\42\4\0\33\42\25\0"+
    "\7\42\6\0\1\42\1\u010a\30\42\4\0\10\42\1\u010b"+
    "\5\42\1\u0105\5\42\1\u010c\6\42\25\0\7\42\6\0"+
    "\10\42\1\146\2\42\1\147\6\42\1\u010d\7\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\14\42\1\u010e"+
    "\16\42\25\0\7\42\6\0\23\42\1\u010f\6\42\4\0"+
    "\33\42\25\0\7\42\6\0\13\42\1\u0110\6\42\1\132"+
    "\7\42\4\0\33\42\25\0\7\42\6\0\22\42\1\u0111"+
    "\7\42\4\0\33\42\25\0\7\42\6\0\16\42\1\u0112"+
    "\13\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u0113\16\42\25\0\7\42\6\0\32\42\4\0"+
    "\15\42\1\u0114\4\42\1\u0115\10\42\25\0\7\42\6\0"+
    "\4\42\1\u0116\3\42\1\u0117\21\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u0118\27\42\25\0"+
    "\7\42\6\0\32\42\4\0\4\42\1\u0119\26\42\25\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u011a\20\42\1\u011b"+
    "\10\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u011c"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\11\42\1\u011d"+
    "\21\42\25\0\7\42\6\0\27\42\1\u011e\2\42\4\0"+
    "\33\42\25\0\7\42\6\0\21\42\1\u011f\10\42\4\0"+
    "\33\42\25\0\7\42\6\0\13\42\1\u0120\16\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\14\42\1\u0121"+
    "\16\42\25\0\7\42\6\0\32\42\4\0\11\42\1\u0122"+
    "\21\42\25\0\7\42\6\0\16\42\1\u0123\13\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\24\42\1\u0124"+
    "\6\42\25\0\7\42\6\0\23\42\1\u0125\6\42\4\0"+
    "\33\42\25\0\7\42\6\0\25\42\1\u0126\4\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\16\42\1\u0127"+
    "\14\42\25\0\7\42\6\0\3\42\1\u0128\11\42\1\u0129"+
    "\4\42\1\u012a\1\u012b\6\42\4\0\33\42\25\0\7\42"+
    "\6\0\10\42\1\u012c\21\42\4\0\33\42\25\0\7\42"+
    "\6\0\5\42\1\u012d\24\42\4\0\33\42\25\0\7\42"+
    "\6\0\12\42\1\u012e\1\42\1\u012f\15\42\4\0\33\42"+
    "\25\0\7\42\6\0\32\42\4\0\24\42\1\u0130\6\42"+
    "\25\0\7\42\6\0\32\42\4\0\2\42\1\211\30\42"+
    "\25\0\7\42\6\0\32\42\4\0\4\42\1\u0131\26\42"+
    "\25\0\7\42\6\0\32\42\4\0\23\42\1\u0132\7\42"+
    "\25\0\7\42\6\0\1\42\1\u0133\1\u0134\27\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\15\42\1\u0135"+
    "\4\42\1\u0136\10\42\25\0\7\42\6\0\32\42\4\0"+
    "\30\42\1\u0137\2\42\25\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u0138\5\42\1\u0139\6\42\25\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u013a\16\42\25\0\7\42\6\0"+
    "\3\42\1\u013b\26\42\4\0\33\42\25\0\7\42\6\0"+
    "\23\42\1\u0129\6\42\4\0\33\42\25\0\7\42\6\0"+
    "\32\42\4\0\12\42\1\u013c\20\42\25\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u013d\16\42\1\u013e\6\42\25\0"+
    "\7\42\6\0\4\42\1\u013f\25\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u0140\6\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0141\25\42\25\0"+
    "\7\42\6\0\10\42\1\u0142\5\42\1\u0143\13\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\22\42\1\u0144"+
    "\10\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u0145"+
    "\25\42\25\0\7\42\6\0\14\42\1\u0146\15\42\4\0"+
    "\33\42\25\0\7\42\6\0\6\42\1\u0147\23\42\4\0"+
    "\33\42\25\0\7\42\6\0\26\42\1\u0148\3\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\11\42\1\u0149"+
    "\21\42\25\0\7\42\6\0\3\42\1\u014a\26\42\4\0"+
    "\1\42\1\u014b\13\42\1\u014c\5\42\1\u014d\7\42\25\0"+
    "\7\42\6\0\32\42\4\0\31\42\1\276\1\42\25\0"+
    "\7\42\6\0\13\42\1\u014e\7\42\1\u014f\6\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\1\42\1\u0150"+
    "\31\42\25\0\7\42\6\0\32\42\4\0\16\42\1\u0151"+
    "\14\42\25\0\7\42\6\0\32\42\4\0\1\42\1\u0152"+
    "\3\42\1\u0153\11\42\1\u0154\2\42\1\u0155\10\42\25\0"+
    "\7\42\6\0\32\42\4\0\2\42\1\u0156\30\42\25\0"+
    "\7\42\6\0\1\42\1\u0157\30\42\4\0\33\42\25\0"+
    "\7\42\6\0\3\42\1\u0158\13\42\1\u0159\12\42\4\0"+
    "\33\42\25\0\7\42\6\0\24\42\1\u015a\5\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u015b"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\25\42\1\u015c"+
    "\3\42\1\u015d\1\42\25\0\7\42\6\0\32\42\4\0"+
    "\20\42\1\u015e\12\42\25\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u015f\14\42\25\0\7\42\6\0\32\42\4\0"+
    "\17\42\1\325\13\42\25\0\7\42\6\0\10\42\1\u0160"+
    "\21\42\4\0\33\42\25\0\7\42\6\0\3\42\1\u0161"+
    "\26\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\10\42\1\340\22\42\25\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u0162\21\42\25\0\7\42\6\0\13\42\1\u0163"+
    "\16\42\4\0\33\42\25\0\7\42\6\0\4\42\1\u0164"+
    "\25\42\4\0\33\42\25\0\7\42\6\0\4\42\1\u0165"+
    "\25\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\4\42\1\u0166\17\42\1\u0167\6\42\25\0\7\42\6\0"+
    "\32\42\4\0\11\42\1\u0168\21\42\25\0\7\42\6\0"+
    "\32\42\4\0\23\42\1\u0169\7\42\25\0\7\42\6\0"+
    "\32\42\4\0\4\42\1\331\26\42\25\0\7\42\6\0"+
    "\32\42\4\0\23\42\1\u016a\5\42\1\u016b\1\42\25\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u016c\31\42\25\0"+
    "\7\42\6\0\32\42\4\0\17\42\1\u016d\13\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u016e\25\42\25\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u016f\6\42\25\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u0170\1\u0171\6\42"+
    "\25\0\7\42\6\0\32\42\4\0\1\42\1\u0172\31\42"+
    "\25\0\7\42\6\0\32\42\4\0\1\42\1\u0173\31\42"+
    "\25\0\7\42\6\0\32\42\4\0\15\42\1\u0174\1\u0175"+
    "\14\42\25\0\7\42\6\0\32\42\4\0\3\42\1\u0176"+
    "\2\42\1\u0177\5\42\1\u0178\16\42\25\0\7\42\6\0"+
    "\32\42\4\0\3\42\1\u0179\27\42\25\0\7\42\6\0"+
    "\32\42\4\0\25\42\1\u017a\5\42\25\0\7\42\6\0"+
    "\32\42\4\0\11\42\1\u017b\11\42\1\u017c\7\42\25\0"+
    "\7\42\6\0\32\42\4\0\25\42\1\u017d\5\42\25\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u017e\20\42\1\u017f"+
    "\6\42\25\0\7\42\6\0\32\42\4\0\16\42\1\u0180"+
    "\14\42\25\0\7\42\6\0\32\42\4\0\17\42\1\u0181"+
    "\13\42\25\0\7\42\6\0\32\42\4\0\22\42\1\u0182"+
    "\10\42\25\0\7\42\6\0\32\42\4\0\17\42\1\u0183"+
    "\13\42\25\0\7\42\6\0\32\42\4\0\16\42\1\u0184"+
    "\14\42\25\0\7\42\6\0\32\42\4\0\17\42\1\u0185"+
    "\13\42\25\0\7\42\6\0\32\42\4\0\20\42\1\u0186"+
    "\12\42\25\0\7\42\6\0\32\42\4\0\23\42\1\u0187"+
    "\1\u0188\6\42\6\0\1\u0189\16\0\7\42\6\0\32\42"+
    "\4\0\33\42\25\0\7\42\6\0\32\42\4\0\15\42"+
    "\1\u018a\15\42\25\0\7\42\6\0\32\42\4\0\23\42"+
    "\1\u0179\7\42\25\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u018b\14\42\25\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u018c\6\42\25\0\7\42\6\0\32\42\4\0\27\42"+
    "\1\u018d\3\42\25\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u018e\5\42\1\u018f\6\42\25\0\7\42\6\0\32\42"+
    "\4\0\3\42\1\u0190\17\42\1\u0191\7\42\25\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u0192\5\42\1\u0193\13\42"+
    "\25\0\7\42\6\0\32\42\4\0\2\42\1\u0194\30\42"+
    "\25\0\7\42\6\0\32\42\4\0\11\42\1\u0195\21\42"+
    "\25\0\7\42\6\0\32\42\4\0\21\42\1\u0196\2\42"+
    "\1\u0197\6\42\25\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u0198\16\42\25\0\7\42\6\0\32\42\4\0\17\42"+
    "\1\u0199\13\42\25\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u019a\20\42\1\u019b\10\42\25\0\7\42\6\0\32\42"+
    "\4\0\20\42\1\u019c\12\42\25\0\7\42\6\0\32\42"+
    "\4\0\11\42\1\u019d\21\42\25\0\7\42\6\0\32\42"+
    "\4\0\16\42\1\u019e\14\42\25\0\7\42\6\0\32\42"+
    "\4\0\11\42\1\u019f\10\42\1\u01a0\10\42\25\0\7\42"+
    "\6\0\32\42\4\0\15\42\1\u016f\15\42\25\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u01a1\23\42\1\u015c\3\42"+
    "\1\u01a2\1\42\25\0\7\42\6\0\32\42\4\0\20\42"+
    "\1\u01a3\12\42\25\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u01a4\14\42\25\0\7\42\6\0\32\42\4\0\22\42"+
    "\1\u0130\10\42\25\0\7\42\6\0\32\42\4\0\11\42"+
    "\1\u01a5\2\42\1\u01a6\16\42\25\0\7\42\6\0\32\42"+
    "\4\0\11\42\1\u01a7\21\42\25\0\7\42\6\0\32\42"+
    "\4\0\24\42\1\u01a8\6\42\25\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u01a9\25\42\25\0\7\357\12\0\1\124"+
    "\36\0\1\124\3\0\1\125\46\0\7\361\124\0\7\361"+
    "\55\0\1\125\27\0\1\u01aa\16\0\7\42\6\0\32\42"+
    "\4\0\33\42\25\0\7\42\6\0\4\42\1\u01ab\25\42"+
    "\4\0\33\42\25\0\7\42\6\0\7\42\1\u01ac\22\42"+
    "\4\0\22\42\1\u01ad\10\42\25\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\u01ae\31\42\25\0\7\42\6\0\1\u01af"+
    "\31\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u01b0\31\42\25\0\7\42\6\0\12\42\1\u01b1"+
    "\17\42\4\0\33\42\25\0\7\42\6\0\26\42\1\u01b2"+
    "\3\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u01b3\25\42\25\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u01b4\31\42\25\0\7\42\6\0\32\42\4\0"+
    "\17\42\1\u0101\13\42\25\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u01b5\6\42\25\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u010c\31\42\25\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u01b6\16\42\25\0\7\42\6\0\32\42\4\0"+
    "\3\42\1\u01b6\27\42\25\0\7\42\6\0\2\42\1\u01b7"+
    "\27\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u01b6\6\42\25\0\7\42\6\0\32\42\4\0"+
    "\7\42\1\u01b6\23\42\25\0\7\42\6\0\24\42\1\u01b8"+
    "\5\42\4\0\33\42\25\0\7\42\6\0\22\42\1\u01b9"+
    "\7\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\12\42\1\u01b6\20\42\25\0\7\42\6\0\1\u01ba\31\42"+
    "\4\0\33\42\25\0\7\42\6\0\32\42\4\0\31\42"+
    "\1\377\1\42\25\0\7\42\6\0\32\42\4\0\17\42"+
    "\1\u01bb\13\42\25\0\7\42\6\0\32\42\4\0\22\42"+
    "\1\u01b6\10\42\25\0\7\42\6\0\32\42\4\0\10\42"+
    "\1\u010b\22\42\25\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u01bc\16\42\25\0\7\42\6\0\1\u01bd\31\42\4\0"+
    "\33\42\25\0\7\42\6\0\4\42\1\u01be\25\42\4\0"+
    "\33\42\25\0\7\42\6\0\23\42\1\u01bf\6\42\4\0"+
    "\33\42\25\0\7\42\6\0\17\42\1\u0178\12\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u01c0"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u01c1"+
    "\25\42\25\0\7\42\6\0\2\42\1\u01bc\27\42\4\0"+
    "\33\42\25\0\7\42\6\0\22\42\1\u01c2\7\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\10\42\1\u01c3"+
    "\22\42\25\0\7\42\6\0\32\42\4\0\23\42\1\u01c4"+
    "\7\42\25\0\7\42\6\0\32\42\4\0\17\42\1\u01c5"+
    "\13\42\25\0\7\42\6\0\32\42\4\0\16\42\1\u01c6"+
    "\14\42\25\0\7\42\6\0\32\42\4\0\24\42\1\u0119"+
    "\6\42\25\0\7\42\6\0\14\42\1\u01c7\15\42\4\0"+
    "\33\42\25\0\7\42\6\0\4\42\1\u01c8\25\42\4\0"+
    "\33\42\25\0\7\42\6\0\13\42\1\u01c9\16\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\23\42\1\u015c"+
    "\7\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u01ca"+
    "\25\42\25\0\7\42\6\0\24\42\1\u01cb\5\42\4\0"+
    "\33\42\25\0\7\42\6\0\23\42\1\u01cc\3\42\1\u01cd"+
    "\2\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\17\42\1\u01ce\13\42\25\0\7\42\6\0\10\42\1\u01cf"+
    "\21\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\4\42\1\u01d0\26\42\25\0\7\42\6\0\4\42\1\u01d1"+
    "\25\42\4\0\33\42\25\0\7\42\6\0\4\42\1\u01d2"+
    "\25\42\4\0\33\42\25\0\7\42\6\0\4\42\1\u01d3"+
    "\25\42\4\0\33\42\25\0\7\42\6\0\16\42\1\u01d4"+
    "\13\42\4\0\33\42\25\0\7\42\6\0\15\42\1\u01d5"+
    "\14\42\4\0\33\42\25\0\7\42\6\0\23\42\1\u01d6"+
    "\6\42\4\0\33\42\25\0\7\42\6\0\4\42\1\363"+
    "\25\42\4\0\33\42\25\0\7\42\6\0\10\42\1\u01d7"+
    "\21\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\25\42\1\u01d8\5\42\25\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u01d9\6\42\25\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u01da\31\42\25\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u01db\16\42\25\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u01dc\25\42\25\0\7\42\6\0\32\42\4\0"+
    "\22\42\1\u01dd\10\42\25\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u01c3\6\42\25\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u01de\25\42\25\0\7\42\6\0\10\42\1\u01df"+
    "\5\42\1\u01e0\13\42\4\0\10\42\1\u01e1\22\42\25\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u01de\16\42\25\0"+
    "\7\42\6\0\4\42\1\u01e2\25\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u01e3\25\42\25\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u01e4\10\42\25\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u01e5\21\42\25\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u01e6\16\42\25\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u01e7\10\42\25\0"+
    "\7\42\6\0\14\42\1\u01e8\15\42\4\0\33\42\25\0"+
    "\7\42\6\0\2\42\1\u01e9\27\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u01ea\6\42\25\0"+
    "\7\42\6\0\32\42\4\0\25\42\1\u01eb\5\42\25\0"+
    "\7\42\6\0\7\42\1\u012d\22\42\4\0\33\42\25\0"+
    "\7\42\6\0\15\42\1\u01ec\14\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u01ed\7\42\25\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u01ee\21\42\25\0"+
    "\7\42\6\0\32\42\4\0\4\42\1\u01ef\26\42\25\0"+
    "\7\42\6\0\32\42\4\0\17\42\1\u01f0\13\42\25\0"+
    "\7\42\6\0\32\42\4\0\25\42\1\u01f1\5\42\25\0"+
    "\7\42\6\0\4\42\1\u01f2\25\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u01f3\10\42\25\0"+
    "\7\42\6\0\32\42\4\0\7\42\1\u01f4\23\42\25\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u01f5\27\42\25\0"+
    "\7\42\6\0\32\42\4\0\20\42\1\u01f6\12\42\25\0"+
    "\7\42\6\0\32\42\4\0\20\42\1\u01f7\12\42\25\0"+
    "\7\42\6\0\32\42\4\0\25\42\1\u01f8\5\42\25\0"+
    "\7\42\6\0\13\42\1\u01f9\16\42\4\0\33\42\25\0"+
    "\7\42\6\0\16\42\1\u0146\13\42\4\0\33\42\25\0"+
    "\7\42\6\0\15\42\1\u01fa\14\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u01fb\14\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u01fc\25\42\25\0"+
    "\7\42\6\0\2\42\1\u01fd\27\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u01fe\25\42\25\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u01ff\6\42\25\0"+
    "\7\42\6\0\16\42\1\u0200\1\42\1\u0201\11\42\4\0"+
    "\33\42\25\0\7\42\6\0\1\u0202\31\42\4\0\33\42"+
    "\25\0\7\42\6\0\32\42\4\0\16\42\1\u0203\14\42"+
    "\25\0\7\42\6\0\24\42\1\u0204\5\42\4\0\33\42"+
    "\25\0\7\42\6\0\26\42\1\u0205\3\42\4\0\33\42"+
    "\25\0\7\42\6\0\21\42\1\u0206\10\42\4\0\33\42"+
    "\25\0\7\42\6\0\32\42\4\0\5\42\1\u0207\25\42"+
    "\25\0\7\42\6\0\32\42\4\0\10\42\1\u0208\22\42"+
    "\25\0\7\42\6\0\32\42\4\0\24\42\1\u0209\6\42"+
    "\25\0\7\42\6\0\32\42\4\0\24\42\1\u020a\6\42"+
    "\25\0\7\42\6\0\32\42\4\0\5\42\1\u020b\25\42"+
    "\25\0\7\42\6\0\32\42\4\0\16\42\1\u020c\14\42"+
    "\25\0\7\42\6\0\32\42\4\0\11\42\1\u020d\21\42"+
    "\25\0\7\42\6\0\32\42\4\0\14\42\1\u020e\16\42"+
    "\25\0\7\42\6\0\32\42\4\0\1\42\1\u020f\31\42"+
    "\25\0\7\42\6\0\32\42\4\0\5\42\1\u0210\25\42"+
    "\25\0\7\42\6\0\32\42\4\0\5\42\1\u0211\25\42"+
    "\25\0\7\42\6\0\32\42\4\0\3\42\1\u0212\27\42"+
    "\25\0\7\42\6\0\32\42\4\0\22\42\1\u0210\10\42"+
    "\25\0\7\42\6\0\32\42\4\0\23\42\1\u0213\7\42"+
    "\25\0\7\42\6\0\32\42\4\0\20\42\1\u0214\12\42"+
    "\25\0\7\42\6\0\32\42\4\0\23\42\1\u0215\1\u0216"+
    "\6\42\25\0\7\42\6\0\32\42\4\0\11\42\1\u0217"+
    "\21\42\25\0\7\42\6\0\32\42\4\0\1\42\1\u0218"+
    "\31\42\25\0\7\42\6\0\32\42\4\0\24\42\1\u0219"+
    "\6\42\25\0\7\42\6\0\32\42\4\0\2\42\1\u01f4"+
    "\30\42\25\0\7\42\6\0\32\42\4\0\6\42\1\u021a"+
    "\24\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u021b"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\15\42\1\u021c"+
    "\15\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u021d"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u021e"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\1\42\1\u021f"+
    "\31\42\25\0\7\42\6\0\32\42\4\0\1\42\1\u0220"+
    "\31\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u0221"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\15\42\1\u0222"+
    "\15\42\25\0\7\42\6\0\32\42\4\0\3\42\1\u0156"+
    "\27\42\25\0\7\42\6\0\32\42\4\0\2\42\1\u0223"+
    "\30\42\25\0\7\42\6\0\32\42\4\0\14\42\1\u0224"+
    "\2\42\1\u0225\13\42\25\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u0226\6\42\25\0\1\42\1\u0227\1\42\1\u0228"+
    "\1\42\1\u0229\1\u0210\6\0\32\42\4\0\5\42\1\u022a"+
    "\25\42\116\0\1\u022b\41\0\7\42\6\0\32\42\4\0"+
    "\2\42\1\u022c\30\42\25\0\7\42\6\0\32\42\4\0"+
    "\7\42\1\u0210\23\42\25\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u022d\21\42\25\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u022e\16\42\6\0\1\u022f\16\0\7\42\6\0"+
    "\32\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\13\42\1\u0230\17\42\25\0\7\42\6\0\32\42\4\0"+
    "\23\42\1\u0231\7\42\25\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u0232\7\42\1\u0233\4\42\25\0\7\42\6\0"+
    "\32\42\4\0\24\42\1\u0234\6\42\25\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u0235\16\42\25\0\7\42\6\0"+
    "\32\42\4\0\23\42\1\u0236\7\42\25\0\7\42\6\0"+
    "\32\42\4\0\25\42\1\u0237\5\42\25\0\7\42\6\0"+
    "\32\42\4\0\25\42\1\u0238\5\42\25\0\7\42\6\0"+
    "\32\42\4\0\6\42\1\u0239\24\42\25\0\7\42\6\0"+
    "\32\42\4\0\22\42\1\u023a\10\42\25\0\7\42\6\0"+
    "\32\42\4\0\24\42\1\u023b\6\42\25\0\7\42\6\0"+
    "\32\42\4\0\11\42\1\u023c\21\42\25\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u023d\25\42\25\0\7\42\6\0"+
    "\32\42\4\0\24\42\1\u023e\6\42\25\0\7\42\6\0"+
    "\32\42\4\0\3\42\1\u023f\27\42\25\0\7\42\6\0"+
    "\32\42\4\0\23\42\1\u0239\7\42\25\0\7\42\6\0"+
    "\32\42\4\0\17\42\1\u0240\13\42\25\0\7\42\6\0"+
    "\32\42\4\0\16\42\1\u0241\14\42\25\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u01eb\16\42\25\0\7\42\6\0"+
    "\32\42\4\0\24\42\1\u0242\6\42\25\0\7\42\6\0"+
    "\32\42\4\0\4\42\1\u0243\26\42\25\0\7\42\6\0"+
    "\32\42\4\0\1\42\1\u0244\31\42\25\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u0245\16\42\25\0\7\42\6\0"+
    "\32\42\4\0\10\42\1\u01a2\22\42\25\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u0246\16\42\44\0\1\u0247\113\0"+
    "\7\42\6\0\21\42\1\u0248\10\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u0249\31\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u024a\25\42\25\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u024b\7\42\25\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u024c\16\42\25\0"+
    "\7\42\6\0\32\42\4\0\31\42\1\u0219\1\42\25\0"+
    "\7\42\6\0\24\42\1\u024d\5\42\4\0\33\42\25\0"+
    "\7\42\6\0\4\42\1\u024e\25\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\6\42\1\u0140\24\42\25\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u0140\16\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u01b6\25\42\25\0"+
    "\7\42\6\0\12\42\1\u024f\17\42\4\0\33\42\25\0"+
    "\7\42\6\0\14\42\1\u0250\15\42\4\0\33\42\25\0"+
    "\7\42\6\0\23\42\1\u0251\6\42\4\0\33\42\25\0"+
    "\7\42\6\0\23\42\1\u0252\6\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u0104\10\42\25\0"+
    "\7\42\6\0\1\42\1\u0253\30\42\4\0\33\42\25\0"+
    "\7\42\6\0\23\42\1\u0254\6\42\4\0\33\42\25\0"+
    "\7\42\6\0\10\42\1\u0255\21\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\7\42\1\u0256\23\42\25\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u0257\27\42\25\0"+
    "\7\42\6\0\23\42\1\u0258\6\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0178\25\42\25\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u0259\10\42\25\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u025a\6\42\25\0"+
    "\7\42\6\0\4\42\1\u0146\25\42\4\0\33\42\25\0"+
    "\7\42\6\0\10\42\1\u025b\21\42\4\0\33\42\6\0"+
    "\1\u025c\16\0\7\42\6\0\32\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u025d\14\42\25\0"+
    "\7\42\6\0\17\42\1\u025e\12\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\31\42\1\u025f\1\42\25\0"+
    "\7\42\6\0\32\42\4\0\15\42\1\u0260\15\42\25\0"+
    "\7\42\6\0\15\42\1\u0261\14\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u0262\16\42\25\0"+
    "\7\42\6\0\27\42\1\u0263\2\42\4\0\33\42\25\0"+
    "\7\42\6\0\21\42\1\u01d6\10\42\4\0\33\42\25\0"+
    "\7\42\6\0\21\42\1\u0264\10\42\4\0\33\42\6\0"+
    "\1\u0265\16\0\7\42\6\0\32\42\4\0\33\42\25\0"+
    "\7\42\6\0\23\42\1\u0159\6\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u0266\16\42\25\0"+
    "\7\42\6\0\10\42\1\u0267\5\42\1\u0268\13\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\23\42\1\u0269"+
    "\7\42\25\0\7\42\6\0\32\42\4\0\1\42\1\u026a"+
    "\31\42\25\0\7\42\6\0\16\42\1\u026b\13\42\4\0"+
    "\23\42\1\u026c\7\42\25\0\7\42\6\0\32\42\4\0"+
    "\17\42\1\u026d\13\42\25\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u026e\14\42\25\0\7\42\6\0\32\42\4\0"+
    "\26\42\1\u026f\4\42\25\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u0270\21\42\25\0\7\42\6\0\21\42\1\u025e"+
    "\10\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\3\42\1\u023a\27\42\25\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u0271\31\42\25\0\7\42\6\0\32\42\4\0"+
    "\17\42\1\u0272\13\42\25\0\7\42\6\0\32\42\4\0"+
    "\23\42\1\u0273\7\42\25\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u0274\5\42\1\u0275\10\42\25\0\7\42\6\0"+
    "\1\u0276\31\42\4\0\33\42\25\0\7\42\6\0\4\42"+
    "\1\u0277\25\42\4\0\33\42\25\0\7\42\6\0\32\42"+
    "\4\0\11\42\1\u0278\21\42\25\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u0219\25\42\25\0\7\42\6\0\24\42"+
    "\1\u0279\5\42\4\0\33\42\25\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u027a\25\42\25\0\7\42\6\0\32\42"+
    "\4\0\15\42\1\u0114\15\42\25\0\7\42\6\0\16\42"+
    "\1\u027b\13\42\4\0\33\42\25\0\7\42\6\0\32\42"+
    "\4\0\26\42\1\u027c\4\42\25\0\7\42\6\0\32\42"+
    "\4\0\15\42\1\u027d\15\42\25\0\7\42\6\0\2\42"+
    "\1\u027e\27\42\4\0\33\42\25\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u027f\25\42\25\0\7\42\6\0\32\42"+
    "\4\0\14\42\1\u016f\16\42\25\0\7\42\6\0\32\42"+
    "\4\0\13\42\1\u0219\17\42\25\0\7\42\6\0\32\42"+
    "\4\0\3\42\1\u0280\27\42\25\0\7\42\6\0\4\42"+
    "\1\u0281\25\42\4\0\33\42\25\0\7\42\6\0\2\42"+
    "\1\u0282\27\42\4\0\33\42\25\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\u0283\31\42\25\0\7\42\6\0\16\42"+
    "\1\u0284\13\42\4\0\33\42\25\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u0285\25\42\25\0\7\42\6\0\15\42"+
    "\1\u0286\14\42\4\0\33\42\25\0\7\42\6\0\24\42"+
    "\1\u0287\5\42\4\0\33\42\25\0\7\42\6\0\23\42"+
    "\1\u0288\6\42\4\0\33\42\25\0\7\42\6\0\32\42"+
    "\4\0\7\42\1\u0222\23\42\25\0\7\42\6\0\4\42"+
    "\1\u0289\25\42\4\0\33\42\25\0\7\42\6\0\4\42"+
    "\1\u028a\25\42\4\0\33\42\25\0\7\42\6\0\32\42"+
    "\4\0\16\42\1\u028b\14\42\25\0\7\42\6\0\4\42"+
    "\1\u028c\25\42\4\0\33\42\25\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u028d\25\42\25\0\7\42\6\0\32\42"+
    "\4\0\22\42\1\u028e\10\42\25\0\7\42\6\0\32\42"+
    "\4\0\22\42\1\u028f\10\42\25\0\7\42\6\0\32\42"+
    "\4\0\3\42\1\u0290\27\42\25\0\7\42\6\0\32\42"+
    "\4\0\24\42\1\u0290\6\42\25\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u0291\25\42\25\0\7\42\6\0\32\42"+
    "\4\0\13\42\1\u0119\17\42\25\0\7\42\6\0\32\42"+
    "\4\0\10\42\1\u0259\22\42\25\0\7\42\6\0\32\42"+
    "\4\0\23\42\1\u0292\7\42\25\0\7\42\6\0\32\42"+
    "\4\0\14\42\1\u0293\16\42\25\0\7\42\6\0\32\42"+
    "\4\0\24\42\1\u0294\6\42\25\0\7\42\6\0\32\42"+
    "\4\0\11\42\1\u0295\21\42\25\0\7\42\6\0\32\42"+
    "\4\0\15\42\1\u0296\15\42\25\0\7\42\6\0\32\42"+
    "\4\0\25\42\1\u0297\5\42\25\0\7\42\6\0\32\42"+
    "\4\0\20\42\1\u0298\12\42\25\0\7\42\6\0\32\42"+
    "\4\0\16\42\1\u0299\14\42\25\0\7\42\6\0\32\42"+
    "\4\0\14\42\1\u029a\16\42\25\0\7\42\6\0\32\42"+
    "\4\0\24\42\1\u029b\6\42\25\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\164\31\42\25\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\u029c\31\42\25\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u029d\25\42\25\0\7\42\6\0\32\42"+
    "\4\0\22\42\1\u029e\10\42\25\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\u029f\31\42\25\0\5\42\1\u0210\1\42"+
    "\6\0\32\42\4\0\33\42\25\0\2\42\1\u0210\4\42"+
    "\6\0\32\42\4\0\33\42\25\0\4\42\1\u0210\2\42"+
    "\6\0\32\42\4\0\33\42\25\0\7\42\6\0\32\42"+
    "\4\0\22\42\1\u02a0\10\42\117\0\1\u02a1\40\0\7\42"+
    "\6\0\32\42\4\0\4\42\1\u02a2\26\42\25\0\7\42"+
    "\6\0\32\42\4\0\26\42\1\u02a3\4\42\25\0\7\42"+
    "\6\0\32\42\4\0\17\42\1\u02a4\13\42\111\0\1\u02a5"+
    "\46\0\7\42\6\0\32\42\4\0\1\42\1\u02a6\31\42"+
    "\25\0\7\42\6\0\32\42\4\0\24\42\1\u02a7\6\42"+
    "\25\0\7\42\6\0\32\42\4\0\1\42\1\u02a8\31\42"+
    "\25\0\7\42\6\0\32\42\4\0\5\42\1\u02a9\25\42"+
    "\25\0\7\42\6\0\32\42\4\0\11\42\1\u02aa\21\42"+
    "\25\0\7\42\6\0\32\42\4\0\5\42\1\u0259\25\42"+
    "\25\0\7\42\6\0\32\42\4\0\11\42\1\u02ab\21\42"+
    "\25\0\7\42\6\0\32\42\4\0\22\42\1\u02ac\10\42"+
    "\25\0\7\42\6\0\32\42\4\0\24\42\1\u0210\6\42"+
    "\25\0\7\42\6\0\32\42\4\0\11\42\1\u02ad\21\42"+
    "\25\0\7\42\6\0\32\42\4\0\3\42\1\u02ae\12\42"+
    "\1\u018b\14\42\25\0\7\42\6\0\32\42\4\0\22\42"+
    "\1\u02af\10\42\25\0\7\42\6\0\32\42\4\0\3\42"+
    "\1\u02b0\27\42\25\0\7\42\6\0\32\42\4\0\10\42"+
    "\1\u02b1\22\42\25\0\7\42\6\0\32\42\4\0\27\42"+
    "\1\u02b2\3\42\25\0\7\42\6\0\32\42\4\0\23\42"+
    "\1\u02b3\7\42\25\0\1\42\1\u0227\1\42\1\u0228\1\42"+
    "\1\u0229\1\u0210\6\0\32\42\4\0\33\42\25\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u02b4\6\42\25\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u02b5\25\42\25\0\7\42"+
    "\6\0\32\42\4\0\4\42\1\u02b6\26\42\60\0\1\u02b7"+
    "\77\0\7\42\6\0\32\42\4\0\16\42\1\u02b8\14\42"+
    "\25\0\7\42\6\0\32\42\4\0\23\42\1\u02b9\7\42"+
    "\25\0\7\42\6\0\32\42\4\0\23\42\1\u02ba\7\42"+
    "\25\0\7\42\6\0\17\42\1\u02bb\12\42\4\0\33\42"+
    "\25\0\7\42\6\0\4\42\1\u02bc\25\42\4\0\33\42"+
    "\25\0\7\42\6\0\15\42\1\u02bd\14\42\4\0\33\42"+
    "\25\0\7\42\6\0\21\42\1\u02be\10\42\4\0\33\42"+
    "\25\0\7\42\6\0\4\42\1\u018d\25\42\4\0\33\42"+
    "\25\0\7\42\6\0\1\u02bf\31\42\4\0\33\42\25\0"+
    "\7\42\6\0\4\42\1\u0178\25\42\4\0\33\42\25\0"+
    "\7\42\6\0\15\42\1\u02c0\14\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u02c1\31\42\25\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u015d\6\42\25\0"+
    "\7\42\6\0\22\42\1\363\7\42\4\0\33\42\25\0"+
    "\7\42\6\0\6\42\1\u02c2\23\42\4\0\33\42\60\0"+
    "\1\u02c3\77\0\7\42\6\0\32\42\4\0\4\42\1\u0140"+
    "\26\42\6\0\1\u02c4\16\0\7\42\6\0\32\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\20\42\1\u02c5"+
    "\12\42\25\0\7\42\6\0\32\42\4\0\14\42\1\u02c6"+
    "\16\42\25\0\7\42\6\0\6\42\1\u028a\23\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u02c7"+
    "\25\42\25\0\7\42\6\0\23\42\1\u01d4\6\42\4\0"+
    "\33\42\53\0\1\u02c8\104\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u02c9\25\42\25\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u02ca\14\42\25\0\7\42\6\0\32\42\4\0"+
    "\26\42\1\u02cb\4\42\25\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u02af\25\42\25\0\7\42\6\0\32\42\4\0"+
    "\23\42\1\u02cc\7\42\25\0\7\42\6\0\32\42\4\0"+
    "\6\42\1\u02cd\24\42\25\0\7\42\6\0\32\42\4\0"+
    "\20\42\1\u02ce\12\42\25\0\7\42\6\0\32\42\4\0"+
    "\27\42\1\u028b\3\42\25\0\7\42\6\0\32\42\4\0"+
    "\10\42\1\u02cf\22\42\25\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u02d0\25\42\25\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u02d1\14\42\25\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u02d2\6\42\25\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u02d3\14\42\25\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\331\25\42\25\0\7\42\6\0\32\42\4\0"+
    "\17\42\1\u02d4\13\42\25\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u02d5\21\42\25\0\7\42\6\0\21\42\1\u02d6"+
    "\10\42\4\0\33\42\25\0\7\42\6\0\3\42\1\u02d7"+
    "\26\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u02d8\31\42\25\0\7\42\6\0\14\42\1\u0159"+
    "\15\42\4\0\33\42\25\0\7\42\6\0\4\42\1\u02d9"+
    "\25\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u02da\14\42\25\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u02db\25\42\25\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u01fb\25\42\25\0\7\42\6\0\23\42\1\u02dc"+
    "\6\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\4\42\1\u02dd\26\42\25\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u02de\6\42\25\0\7\42\6\0\1\u01be\31\42"+
    "\4\0\33\42\25\0\7\42\6\0\32\42\4\0\23\42"+
    "\1\u0104\7\42\25\0\7\42\6\0\32\42\4\0\6\42"+
    "\1\u02df\24\42\25\0\7\42\6\0\32\42\4\0\7\42"+
    "\1\u02e0\23\42\6\0\1\u02e1\16\0\7\42\6\0\32\42"+
    "\4\0\33\42\25\0\7\42\6\0\4\42\1\u024f\25\42"+
    "\4\0\33\42\25\0\7\42\6\0\4\42\1\u014f\25\42"+
    "\4\0\33\42\25\0\7\42\6\0\22\42\1\u01d4\7\42"+
    "\4\0\33\42\25\0\7\42\6\0\32\42\4\0\11\42"+
    "\1\147\21\42\25\0\7\42\6\0\32\42\4\0\26\42"+
    "\1\u02e2\4\42\25\0\7\42\6\0\16\42\1\u02e3\13\42"+
    "\4\0\33\42\25\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u02e4\31\42\25\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u01a2\6\42\25\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u02e5\31\42\25\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u02e6\25\42\25\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u02e7\14\42\25\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u02e8\31\42\25\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u02e9\16\42\25\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u0259\6\42\25\0\7\42\6\0\32\42\4\0\4\42"+
    "\1\u02ea\26\42\25\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u02eb\16\42\25\0\3\42\1\u0228\1\42\1\u0229\1\42"+
    "\6\0\32\42\4\0\33\42\25\0\7\42\6\0\32\42"+
    "\4\0\14\42\1\u02dd\16\42\25\0\7\42\6\0\32\42"+
    "\4\0\15\42\1\u02ec\15\42\25\0\7\42\6\0\32\42"+
    "\4\0\24\42\1\u0222\6\42\25\0\7\42\6\0\32\42"+
    "\4\0\16\42\1\u02ed\14\42\25\0\7\42\6\0\32\42"+
    "\4\0\6\42\1\u02ee\24\42\124\0\1\u02ef\33\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u02f0\31\42\25\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u0222\25\42\25\0\7\42"+
    "\6\0\32\42\4\0\3\42\1\u0223\27\42\116\0\1\u02f1"+
    "\41\0\7\42\6\0\32\42\4\0\7\42\1\u02f2\23\42"+
    "\25\0\7\42\6\0\32\42\4\0\24\42\1\u02f3\6\42"+
    "\25\0\7\42\6\0\32\42\4\0\3\42\1\u02f4\27\42"+
    "\25\0\7\42\6\0\32\42\4\0\3\42\1\u02dd\27\42"+
    "\25\0\7\42\6\0\32\42\4\0\22\42\1\u02f5\10\42"+
    "\25\0\7\42\6\0\32\42\4\0\16\42\1\u02b6\14\42"+
    "\25\0\7\42\6\0\32\42\4\0\3\42\1\u0294\27\42"+
    "\25\0\7\42\6\0\32\42\4\0\24\42\1\u02f6\6\42"+
    "\25\0\7\42\6\0\32\42\4\0\10\42\1\u02f7\22\42"+
    "\25\0\7\42\6\0\32\42\4\0\22\42\1\u02f8\10\42"+
    "\25\0\7\42\6\0\32\42\4\0\23\42\1\211\7\42"+
    "\25\0\7\42\6\0\32\42\4\0\11\42\1\u02f9\21\42"+
    "\25\0\7\42\6\0\32\42\4\0\11\42\1\u02fa\21\42"+
    "\57\0\1\u02fb\100\0\7\42\6\0\32\42\4\0\4\42"+
    "\1\u02fc\26\42\25\0\7\42\6\0\32\42\4\0\23\42"+
    "\1\u02fd\7\42\25\0\7\42\6\0\32\42\4\0\17\42"+
    "\1\331\13\42\25\0\7\42\6\0\15\42\1\u02fe\14\42"+
    "\4\0\33\42\25\0\7\42\6\0\1\u02ff\31\42\4\0"+
    "\33\42\25\0\7\42\6\0\22\42\1\u0300\7\42\4\0"+
    "\33\42\25\0\7\42\6\0\2\42\1\u01d7\27\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\24\42\1\u0301"+
    "\6\42\25\0\7\42\6\0\15\42\1\u0302\14\42\4\0"+
    "\33\42\66\0\1\u0303\107\0\1\u0304\114\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u02cd\25\42\25\0\7\42\6\0"+
    "\15\42\1\u0305\14\42\4\0\33\42\25\0\7\42\6\0"+
    "\32\42\4\0\23\42\1\u0306\7\42\60\0\1\u0307\77\0"+
    "\7\42\6\0\32\42\4\0\10\42\1\u0308\22\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0309\25\42\25\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u030a\31\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u030b\25\42\25\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u030c\10\42\25\0"+
    "\7\42\6\0\32\42\4\0\7\42\1\u01de\23\42\25\0"+
    "\7\42\6\0\32\42\4\0\17\42\1\u030d\13\42\25\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u030e\31\42\25\0"+
    "\7\42\6\0\32\42\4\0\4\42\1\u030f\26\42\25\0"+
    "\7\42\6\0\30\42\1\u0302\1\42\4\0\33\42\25\0"+
    "\7\42\6\0\24\42\1\u0310\5\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u0311\16\42\25\0"+
    "\7\42\6\0\32\42\4\0\26\42\1\u0312\4\42\25\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u0313\16\42\25\0"+
    "\7\42\6\0\7\42\1\u0314\22\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\25\42\1\u0315\5\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0172\25\42\42\0"+
    "\1\u0316\115\0\7\42\6\0\32\42\4\0\5\42\1\u0317"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\16\42\1\u0318"+
    "\14\42\25\0\7\42\6\0\32\42\4\0\3\42\1\u0215"+
    "\27\42\25\0\7\42\6\0\32\42\4\0\16\42\1\u0210"+
    "\14\42\25\0\7\42\6\0\32\42\4\0\30\42\1\u0319"+
    "\2\42\25\0\7\42\6\0\32\42\4\0\25\42\1\u031a"+
    "\5\42\25\0\7\42\6\0\32\42\4\0\14\42\1\u0210"+
    "\16\42\25\0\7\42\6\0\32\42\4\0\24\42\1\u02dd"+
    "\6\42\25\0\7\42\6\0\32\42\4\0\23\42\1\u031b"+
    "\7\42\25\0\7\42\6\0\32\42\4\0\31\42\1\u01fb"+
    "\1\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u031c"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\3\42\1\u031d"+
    "\27\42\25\0\7\42\6\0\32\42\4\0\1\42\1\u031e"+
    "\31\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u031f"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u02dd"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\24\42\1\u01f3"+
    "\6\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u0320"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\6\42\1\u0321"+
    "\24\42\25\0\7\42\6\0\32\42\4\0\17\42\1\u0322"+
    "\13\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u0323"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\14\42\1\u0324"+
    "\16\42\64\0\1\u0325\73\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u0326\16\42\25\0\7\42\6\0\16\42\1\u0327"+
    "\13\42\4\0\33\42\25\0\7\42\6\0\10\42\1\u0328"+
    "\21\42\4\0\33\42\25\0\7\42\6\0\4\42\1\u0329"+
    "\25\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\211\25\42\6\0\1\u032a\16\0\7\42\6\0"+
    "\32\42\4\0\33\42\65\0\1\u032b\137\0\1\u032c\65\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u032d\31\42\52\0"+
    "\1\u032e\105\0\7\42\6\0\32\42\4\0\5\42\1\u032f"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\22\42\1\u0330"+
    "\10\42\25\0\7\42\6\0\32\42\4\0\3\42\1\u0331"+
    "\27\42\25\0\7\42\6\0\32\42\4\0\22\42\1\u0332"+
    "\10\42\25\0\7\42\6\0\32\42\4\0\22\42\1\u0333"+
    "\10\42\25\0\7\42\6\0\32\42\4\0\22\42\1\u0334"+
    "\10\42\25\0\7\42\6\0\32\42\4\0\4\42\1\u0335"+
    "\26\42\25\0\7\42\6\0\32\42\4\0\1\42\1\u0336"+
    "\3\42\1\u0337\25\42\25\0\7\42\6\0\21\42\1\u0338"+
    "\10\42\4\0\33\42\25\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u0339\25\42\25\0\7\42\6\0\32\42\4\0"+
    "\31\42\1\u0294\1\42\25\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u033a\31\42\25\0\7\42\6\0\32\42\4\0"+
    "\22\42\1\u033b\10\42\55\0\1\u033c\102\0\7\42\6\0"+
    "\32\42\4\0\16\42\1\u033d\14\42\25\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\u033e\16\42\25\0\1\42\1\u033f"+
    "\3\42\1\u0229\1\42\6\0\32\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0340\25\42\25\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u0341\14\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0342\25\42\25\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u0343\27\42\25\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u0222\7\42\25\0"+
    "\7\42\6\0\32\42\4\0\20\42\1\u0140\12\42\25\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u0344\14\42\25\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u0215\14\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0294\25\42\65\0"+
    "\1\u0345\72\0\7\42\6\0\32\42\4\0\5\42\1\u0346"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\6\42\1\211"+
    "\24\42\25\0\7\42\6\0\15\42\1\u0347\14\42\4\0"+
    "\33\42\54\0\1\u0348\124\0\1\u0349\111\0\7\42\6\0"+
    "\32\42\4\0\15\42\1\u034a\15\42\57\0\1\u034b\100\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u034c\10\42\25\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u034d\10\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u034e\25\42\25\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u034f\21\42\25\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u0350\21\42\25\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u0140\7\42\25\0"+
    "\7\42\6\0\32\42\4\0\2\42\1\u02fa\30\42\25\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u0294\7\42\25\0"+
    "\7\42\6\0\4\42\1\u0156\25\42\4\0\33\42\25\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u0298\14\42\25\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u0351\14\42\25\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0352\25\42\55\0"+
    "\1\u0353\102\0\7\42\6\0\32\42\4\0\24\42\1\u0335"+
    "\6\42\25\0\7\42\6\0\32\42\4\0\31\42\1\u0140"+
    "\1\42\25\0\2\42\1\u0354\4\42\6\0\32\42\4\0"+
    "\33\42\25\0\7\42\6\0\32\42\4\0\24\42\1\u0355"+
    "\6\42\25\0\7\42\6\0\32\42\4\0\17\42\1\u0356"+
    "\13\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u0357"+
    "\25\42\25\0\7\42\6\0\32\42\4\0\11\42\1\u0358"+
    "\21\42\63\0\1\u0359\74\0\7\42\6\0\32\42\4\0"+
    "\22\42\1\u0306\10\42\25\0\7\42\6\0\23\42\1\u024f"+
    "\6\42\4\0\33\42\46\0\1\u035a\147\0\1\u035b\74\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u035c\25\42\25\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u0215\21\42\25\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u035d\21\42\25\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u035e\6\42\25\0"+
    "\7\42\6\0\32\42\4\0\4\42\1\u035e\26\42\25\0"+
    "\7\42\6\0\32\42\4\0\4\42\1\u035f\26\42\25\0"+
    "\6\42\1\u0210\6\0\32\42\4\0\33\42\25\0\7\42"+
    "\6\0\32\42\4\0\23\42\1\u0360\7\42\25\0\7\42"+
    "\6\0\32\42\4\0\6\42\1\u0361\24\42\25\0\7\42"+
    "\6\0\32\42\4\0\32\42\1\u0362\42\0\1\u0363\162\0"+
    "\1\u0364\46\0\1\u0265\151\0\7\42\6\0\32\42\4\0"+
    "\23\42\1\u0365\7\42\25\0\7\42\6\0\32\42\4\0"+
    "\4\42\1\u0324\26\42\25\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u0366\31\42\25\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u0367\16\42\25\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u0368\25\42\52\0\1\u0369\105\0\7\42\6\0"+
    "\32\42\4\0\20\42\1\u036a\12\42\25\0\7\42\6\0"+
    "\32\42\4\0\2\42\1\u036b\30\42\25\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u036c\25\42\25\0\7\42\6\0"+
    "\32\42\4\0\4\42\1\u0294\26\42\57\0\1\u036d\100\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u036e\31\42\25\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u036f\16\42\25\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u0178\10\42\65\0"+
    "\1\u0370\72\0\7\42\6\0\32\42\4\0\3\42\1\u02c5"+
    "\27\42\25\0\7\42\6\0\32\42\4\0\5\42\1\u0140"+
    "\25\42\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[70161];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\0\1\11\2\1\1\0\2\11"+
    "\2\1\1\11\1\1\1\11\2\1\2\11\34\1\2\11"+
    "\24\1\1\11\1\1\6\11\1\0\4\11\2\0\2\11"+
    "\231\1\1\0\230\1\1\0\40\1\1\0\200\1\1\0"+
    "\3\1\1\0\27\1\1\0\24\1\1\0\10\1\1\0"+
    "\73\1\1\0\3\1\1\0\21\1\1\0\13\1\2\0"+
    "\3\1\1\0\30\1\1\0\15\1\1\11\1\1\1\11"+
    "\11\1\1\0\7\1\2\0\2\1\1\0\16\1\1\0"+
    "\16\1\1\0\4\1\2\0\1\11\1\1\1\0\15\1"+
    "\1\0\10\1\1\0\2\1\2\0\1\1\1\11\7\1"+
    "\1\11\5\1\3\0\7\1\1\0\1\11\4\1\1\0"+
    "\3\1\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[880];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int _numberTokens = 0;
    private boolean _thereIsTokens = false;
    private HashMap<String, Integer> identifiers = new HashMap<String, Integer>();
    
    public boolean thereIsTokens() {return this._thereIsTokens;}
    public int numberTokens() {return this._numberTokens;}
    public HashMap<String, Integer> getIdentifiers() {return this.identifiers;}

    // Creates and returns a Token Object
    private Token foundSymbol(String token, String lexeme, int line, int column) {
        this._thereIsTokens = true;
        this._numberTokens++;

        // value given lexeme as a key
        Integer value = identifiers.get(lexeme);
        Integer size = identifiers.size();
        
        // Logic for storing identifiers in the Hashmap
        if (token == "Identificador") {
            if (value == null) {
                identifiers.put(lexeme, size);
                lexeme = size.toString();
            } else {
                lexeme = value.toString();
            }
        }   

        Token t = new Token(token, lexeme, line, column);
        return t;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    this._thereIsTokens = false;
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignore space, tab, new line and carriage return characters */
            }
          // fall through
          case 112: break;
          case 2:
            { return foundSymbol("Negacion", "", yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 3:
            { return foundSymbol("Comentario en linea", yytext(), yyline, yycolumn);
            }
          // fall through
          case 114: break;
          case 4:
            { return foundSymbol("Operador Aritmetico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 5:
            { return foundSymbol("Operador de Bits", yytext(), yyline, yycolumn);
            }
          // fall through
          case 116: break;
          case 6:
            { return foundSymbol("Parentesis Izquierdo", "", yyline, yycolumn);
            }
          // fall through
          case 117: break;
          case 7:
            { return foundSymbol("Parentesis Derecho", "", yyline, yycolumn);
            }
          // fall through
          case 118: break;
          case 8:
            { return foundSymbol("Coma", "", yyline, yycolumn);
            }
          // fall through
          case 119: break;
          case 9:
            { return foundSymbol("Punto", "", yyline, yycolumn);
            }
          // fall through
          case 120: break;
          case 10:
            { return foundSymbol("Entero", yytext(), yyline, yycolumn);
            }
          // fall through
          case 121: break;
          case 11:
            { return foundSymbol("Dos puntos", "", yyline, yycolumn);
            }
          // fall through
          case 122: break;
          case 12:
            { return foundSymbol("Punto y coma", "", yyline, yycolumn);
            }
          // fall through
          case 123: break;
          case 13:
            { return foundSymbol("Comparador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 124: break;
          case 14:
            { return foundSymbol("Asignador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 125: break;
          case 15:
            { return foundSymbol("Operador Ternario", "", yyline, yycolumn);
            }
          // fall through
          case 126: break;
          case 16:
            { return foundSymbol("Identificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 127: break;
          case 17:
            { return foundSymbol("Corchete Izquierdo", "", yyline, yycolumn);
            }
          // fall through
          case 128: break;
          case 18:
            { return foundSymbol("Corchete Derecho", "", yyline, yycolumn);
            }
          // fall through
          case 129: break;
          case 19:
            { return foundSymbol("Llave Izquierda", "", yyline, yycolumn);
            }
          // fall through
          case 130: break;
          case 20:
            { return foundSymbol("Llave Derecha", "", yyline, yycolumn);
            }
          // fall through
          case 131: break;
          case 21:
            { return foundSymbol("Cadena", yytext(), yyline, yycolumn);
            }
          // fall through
          case 132: break;
          case 22:
            { return foundSymbol("Operador Logico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 133: break;
          case 23:
            { return foundSymbol("Caracter", yytext(), yyline, yycolumn);
            }
          // fall through
          case 134: break;
          case 24:
            { return foundSymbol("Termina comentario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 135: break;
          case 25:
            { return foundSymbol("Operador Unario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 136: break;
          case 26:
            { return foundSymbol("Inicia comentario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 137: break;
          case 27:
            { return foundSymbol("Complejo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 138: break;
          case 28:
            { return foundSymbol("Operador Nulo", "", yyline, yycolumn);
            }
          // fall through
          case 139: break;
          case 29:
            { return foundSymbol("Referencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 140: break;
          case 30:
            { return foundSymbol("Of", "", yyline, yycolumn);
            }
          // fall through
          case 141: break;
          case 31:
            { return foundSymbol("Renombrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 142: break;
          case 32:
            { return foundSymbol("Ciclo Do", "", yyline, yycolumn);
            }
          // fall through
          case 143: break;
          case 33:
            { return foundSymbol("Condicional", "", yyline, yycolumn);
            }
          // fall through
          case 144: break;
          case 34:
            { return foundSymbol("Operador de Pertenencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 145: break;
          case 35:
            { return foundSymbol("Operador de identidad", yytext(), yyline, yycolumn);
            }
          // fall through
          case 146: break;
          case 36:
            { return foundSymbol("Decimal", yytext(), yyline, yycolumn);
            }
          // fall through
          case 147: break;
          case 37:
            { return foundSymbol("Añadir", yytext(), yyline, yycolumn);
            }
          // fall through
          case 148: break;
          case 38:
            { return foundSymbol("Condiciones Query", yytext(), yyline, yycolumn);
            }
          // fall through
          case 149: break;
          case 39:
            { return foundSymbol("Ordenar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 150: break;
          case 40:
            { return foundSymbol("Almacenamiento", yytext(), yyline, yycolumn);
            }
          // fall through
          case 151: break;
          case 41:
            { return foundSymbol("Salida", yytext(), yyline, yycolumn);
            }
          // fall through
          case 152: break;
          case 42:
            { return foundSymbol("Get", yytext(), yyline, yycolumn);
            }
          // fall through
          case 153: break;
          case 43:
            { return foundSymbol("Variable", yytext(), yyline, yycolumn);
            }
          // fall through
          case 154: break;
          case 44:
            { return foundSymbol("Modificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 155: break;
          case 45:
            { return foundSymbol("Comentario especial", yytext(), yyline, yycolumn);
            }
          // fall through
          case 156: break;
          case 46:
            { return foundSymbol("Update", yytext(), yyline, yycolumn);
            }
          // fall through
          case 157: break;
          case 47:
            { return foundSymbol("Funcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 158: break;
          case 48:
            { return foundSymbol("Limite", yytext(), yyline, yycolumn);
            }
          // fall through
          case 159: break;
          case 49:
            { return foundSymbol("Borrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 160: break;
          case 50:
            { return foundSymbol("Ciclo For", "", yyline, yycolumn);
            }
          // fall through
          case 161: break;
          case 51:
            { return foundSymbol("Tipo de dato", yytext(), yyline, yycolumn);
            }
          // fall through
          case 162: break;
          case 52:
            { return foundSymbol("Crear", yytext(), yyline, yycolumn);
            }
          // fall through
          case 163: break;
          case 53:
            { return foundSymbol("Intentar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 164: break;
          case 54:
            { return foundSymbol("Cast", yytext(), yyline, yycolumn);
            }
          // fall through
          case 165: break;
          case 55:
            { return foundSymbol("Ejecutar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 166: break;
          case 56:
            { return foundSymbol("Iterador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 167: break;
          case 57:
            { return foundSymbol("GoTo", "", yyline, yycolumn);
            }
          // fall through
          case 168: break;
          case 58:
            { return foundSymbol("Insertar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 169: break;
          case 59:
            { return foundSymbol("Join", yytext(), yyline, yycolumn);
            }
          // fall through
          case 170: break;
          case 60:
            { return foundSymbol("Valor nulo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 171: break;
          case 61:
            { return foundSymbol("Incremento", "", yyline, yycolumn);
            }
          // fall through
          case 172: break;
          case 62:
            { return foundSymbol("Debug", "", yyline, yycolumn);
            }
          // fall through
          case 173: break;
          case 63:
            { return foundSymbol("Consecuencia Itentar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 174: break;
          case 64:
            { return foundSymbol("Booleano", yytext(), yyline, yycolumn);
            }
          // fall through
          case 175: break;
          case 65:
            { return foundSymbol("Vista", "", yyline, yycolumn);
            }
          // fall through
          case 176: break;
          case 66:
            { return foundSymbol("Case", "", yyline, yycolumn);
            }
          // fall through
          case 177: break;
          case 67:
            { return foundSymbol("Estructura de datos", yytext(), yyline, yycolumn);
            }
          // fall through
          case 178: break;
          case 68:
            { return foundSymbol("Consecuencia Condicional", "", yyline, yycolumn);
            }
          // fall through
          case 179: break;
          case 69:
            { return foundSymbol("Consequencia", "", yyline, yycolumn);
            }
          // fall through
          case 180: break;
          case 70:
            { return foundSymbol("Enum", "", yyline, yycolumn);
            }
          // fall through
          case 181: break;
          case 71:
            { return foundSymbol("Importar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 182: break;
          case 72:
            { return foundSymbol("Pass", "", yyline, yycolumn);
            }
          // fall through
          case 183: break;
          case 73:
            { return foundSymbol("This", yytext(), yyline, yycolumn);
            }
          // fall through
          case 184: break;
          case 74:
            { return foundSymbol("Void", "", yyline, yycolumn);
            }
          // fall through
          case 185: break;
          case 75:
            { return foundSymbol("Alterar", "", yyline, yycolumn);
            }
          // fall through
          case 186: break;
          case 76:
            { return foundSymbol("Restriccion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 187: break;
          case 77:
            { return foundSymbol("Excepcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 188: break;
          case 78:
            { return foundSymbol("Evento", "", yyline, yycolumn);
            }
          // fall through
          case 189: break;
          case 79:
            { return foundSymbol("Indice", "", yyline, yycolumn);
            }
          // fall through
          case 190: break;
          case 80:
            { return foundSymbol("Tabla", "", yyline, yycolumn);
            }
          // fall through
          case 191: break;
          case 81:
            { return foundSymbol("Union", yytext(), yyline, yycolumn);
            }
          // fall through
          case 192: break;
          case 82:
            { return foundSymbol("Query Condicional", yytext(), yyline, yycolumn);
            }
          // fall through
          case 193: break;
          case 83:
            { return foundSymbol("Asyncrono", yytext(), yyline, yycolumn);
            }
          // fall through
          case 194: break;
          case 84:
            { return foundSymbol("Clase", "", yyline, yycolumn);
            }
          // fall through
          case 195: break;
          case 85:
            { return foundSymbol("Modificador de No Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 196: break;
          case 86:
            { return foundSymbol("Imprimir", "", yyline, yycolumn);
            }
          // fall through
          case 197: break;
          case 87:
            { return foundSymbol("Clase Padre", yytext(), yyline, yycolumn);
            }
          // fall through
          case 198: break;
          case 88:
            { return foundSymbol("Ciclo While", "", yyline, yycolumn);
            }
          // fall through
          case 199: break;
          case 89:
            { return foundSymbol("Regresar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 200: break;
          case 90:
            { return foundSymbol("Backup", "", yyline, yycolumn);
            }
          // fall through
          case 201: break;
          case 91:
            { return foundSymbol("Columna", "", yyline, yycolumn);
            }
          // fall through
          case 202: break;
          case 92:
            { return foundSymbol("Module", "", yyline, yycolumn);
            }
          // fall through
          case 203: break;
          case 93:
            { return foundSymbol("Opcion", "", yyline, yycolumn);
            }
          // fall through
          case 204: break;
          case 94:
            { return foundSymbol("Select", "", yyline, yycolumn);
            }
          // fall through
          case 205: break;
          case 95:
            { return foundSymbol("Modificador de Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 206: break;
          case 96:
            { return foundSymbol("Operador de typo", "", yyline, yycolumn);
            }
          // fall through
          case 207: break;
          case 97:
            { return foundSymbol("Lamda", "", yyline, yycolumn);
            }
          // fall through
          case 208: break;
          case 98:
            { return foundSymbol("Switch", "", yyline, yycolumn);
            }
          // fall through
          case 209: break;
          case 99:
            { return foundSymbol("Rango", "", yyline, yycolumn);
            }
          // fall through
          case 210: break;
          case 100:
            { return foundSymbol("AddHandler", yytext(), yyline, yycolumn);
            }
          // fall through
          case 211: break;
          case 101:
            { return foundSymbol("Parcial", "", yyline, yycolumn);
            }
          // fall through
          case 212: break;
          case 102:
            { return foundSymbol("Extiende", "", yyline, yycolumn);
            }
          // fall through
          case 213: break;
          case 103:
            { return foundSymbol("Paquete", "", yyline, yycolumn);
            }
          // fall through
          case 214: break;
          case 104:
            { return foundSymbol("Database", "", yyline, yycolumn);
            }
          // fall through
          case 215: break;
          case 105:
            { return foundSymbol("Operador de VB", "", yyline, yycolumn);
            }
          // fall through
          case 216: break;
          case 106:
            { return foundSymbol("Continuar", "", yyline, yycolumn);
            }
          // fall through
          case 217: break;
          case 107:
            { return foundSymbol("Namespace", "", yyline, yycolumn);
            }
          // fall through
          case 218: break;
          case 108:
            { return foundSymbol("Estructura", "", yyline, yycolumn);
            }
          // fall through
          case 219: break;
          case 109:
            { return foundSymbol("Interface", "", yyline, yycolumn);
            }
          // fall through
          case 220: break;
          case 110:
            { return foundSymbol("Implementa", "", yyline, yycolumn);
            }
          // fall through
          case 221: break;
          case 111:
            { return foundSymbol("Operador de instancia", "", yyline, yycolumn);
            }
          // fall through
          case 222: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
