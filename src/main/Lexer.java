// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/resources/Lexer.flex

// User Code (Import dependencies or declare variables)
import java.util.HashMap;

@SuppressWarnings("fallthrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\40\0\1\1\1\2\1\3\1\4\1\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\13\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\17\1\24"+
    "\1\17\1\25\1\17\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\0\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\0\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\2\4\1\10\1\11\1\4\1\12\1\13"+
    "\1\14\1\15\1\16\1\15\1\17\30\20\1\21\1\22"+
    "\1\5\23\20\1\23\1\5\1\24\1\5\1\15\1\0"+
    "\1\25\1\16\1\26\1\0\1\27\1\30\1\31\2\0"+
    "\1\32\1\33\62\20\1\34\12\20\1\35\45\20\1\36"+
    "\12\20\1\37\11\20\1\40\1\20\1\41\1\42\6\20"+
    "\1\26\25\20\1\43\1\0\1\43\1\44\1\45\1\20"+
    "\1\46\36\20\1\47\4\20\1\50\12\20\1\51\13\20"+
    "\1\52\1\4\16\20\1\53\5\20\1\54\10\20\1\55"+
    "\6\20\1\56\2\20\1\57\35\20\1\56\1\60\11\20"+
    "\1\61\5\20\1\62\1\0\3\20\1\63\1\20\1\26"+
    "\22\20\1\64\7\20\1\0\13\20\1\65\5\20\1\66"+
    "\6\20\1\67\12\20\1\70\5\20\1\71\1\72\10\20"+
    "\1\73\27\20\1\74\1\75\3\20\1\76\1\77\10\20"+
    "\1\100\12\20\1\62\1\101\7\20\1\102\1\103\1\104"+
    "\1\105\5\20\1\106\10\20\1\0\3\20\1\0\1\20"+
    "\1\107\7\20\1\110\10\20\1\62\1\111\3\20\1\0"+
    "\1\112\2\20\1\36\3\20\1\113\11\20\1\114\1\115"+
    "\1\20\1\0\6\20\1\116\1\20\1\0\33\20\1\117"+
    "\4\20\1\120\3\20\1\121\5\20\1\122\1\20\1\123"+
    "\1\20\1\124\5\20\1\124\1\62\5\20\1\0\3\20"+
    "\1\0\1\20\1\125\7\20\1\126\2\20\1\114\2\20"+
    "\1\127\1\130\1\0\3\20\1\131\1\20\1\132\5\20"+
    "\2\0\3\20\1\0\1\133\3\20\1\51\5\20\1\134"+
    "\10\20\1\135\1\136\1\20\1\137\1\20\1\0\15\20"+
    "\1\42\1\140\1\41\5\20\1\141\3\20\1\0\2\20"+
    "\1\142\4\20\2\0\1\20\1\143\1\0\11\20\1\144"+
    "\4\20\1\0\2\20\1\62\1\20\1\145\3\20\1\146"+
    "\5\20\1\0\3\20\1\147\2\0\1\46\1\20\1\0"+
    "\5\20\1\150\7\20\1\0\3\20\1\151\4\20\1\0"+
    "\2\20\2\0\1\20\1\72\2\20\1\152\3\20\1\153"+
    "\1\120\3\20\1\154\1\20\3\0\4\20\1\155\1\156"+
    "\1\20\1\0\1\113\4\20\1\0\3\20\1\0\2\20"+
    "\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[879];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\131\0\262\0\u010b\0\131\0\u0164\0\u01bd\0\u0216"+
    "\0\131\0\131\0\u026f\0\u02c8\0\131\0\131\0\u0321\0\u037a"+
    "\0\131\0\131\0\u03d3\0\262\0\u042c\0\u0485\0\u04de\0\u0537"+
    "\0\u0590\0\u05e9\0\u0642\0\u069b\0\u06f4\0\u074d\0\u07a6\0\u07ff"+
    "\0\u0858\0\u08b1\0\u090a\0\u0963\0\u09bc\0\u0a15\0\u0a6e\0\u0ac7"+
    "\0\u0b20\0\u0b79\0\u0bd2\0\u0c2b\0\u0c84\0\u0cdd\0\131\0\131"+
    "\0\u0164\0\u0d36\0\u0d8f\0\u0de8\0\u0e41\0\u0e9a\0\u0ef3\0\u0f4c"+
    "\0\u0fa5\0\u0ffe\0\u1057\0\u10b0\0\u1109\0\u1162\0\u11bb\0\u1214"+
    "\0\u126d\0\u12c6\0\u131f\0\u1378\0\131\0\u13d1\0\131\0\131"+
    "\0\131\0\u010b\0\131\0\131\0\131\0\u142a\0\131\0\131"+
    "\0\131\0\u1483\0\u14dc\0\131\0\131\0\u1535\0\u158e\0\u15e7"+
    "\0\u1640\0\u1699\0\u16f2\0\u174b\0\u17a4\0\u17fd\0\u1856\0\u18af"+
    "\0\u1908\0\u1961\0\u19ba\0\u1a13\0\u1a6c\0\u1ac5\0\u1b1e\0\u1b77"+
    "\0\u1bd0\0\u1c29\0\u1c82\0\u1cdb\0\u1d34\0\u1d8d\0\u1de6\0\u1e3f"+
    "\0\u1e98\0\u1ef1\0\u1f4a\0\u1fa3\0\u1ffc\0\u2055\0\u20ae\0\u2107"+
    "\0\u2160\0\u21b9\0\u2212\0\u226b\0\u22c4\0\u231d\0\u2376\0\u23cf"+
    "\0\u2428\0\u2481\0\u24da\0\u2533\0\u258c\0\u25e5\0\u263e\0\u0858"+
    "\0\u2697\0\u26f0\0\u2749\0\u27a2\0\u27fb\0\u2854\0\u28ad\0\u2906"+
    "\0\u295f\0\u29b8\0\u0858\0\u2a11\0\u2a6a\0\u2ac3\0\u2b1c\0\u2b75"+
    "\0\u2bce\0\u2c27\0\u2c80\0\u2cd9\0\u2d32\0\u2d8b\0\u2de4\0\u2e3d"+
    "\0\u2e96\0\u2eef\0\u2f48\0\u2fa1\0\u2ffa\0\u3053\0\u30ac\0\u3105"+
    "\0\u315e\0\u31b7\0\u3210\0\u3269\0\u32c2\0\u331b\0\u3374\0\u33cd"+
    "\0\u3426\0\u347f\0\u34d8\0\u3531\0\u358a\0\u35e3\0\u363c\0\u3695"+
    "\0\u36ee\0\u3747\0\u37a0\0\u37f9\0\u3852\0\u38ab\0\u3904\0\u395d"+
    "\0\u39b6\0\u3a0f\0\u3a68\0\u3ac1\0\u3b1a\0\u3b73\0\u3bcc\0\u3c25"+
    "\0\u3c7e\0\u3cd7\0\u3d30\0\u3d89\0\u3de2\0\u0858\0\u3e3b\0\u3e94"+
    "\0\u3eed\0\u3f46\0\u3f9f\0\u3ff8\0\u4051\0\u40aa\0\u4103\0\u0858"+
    "\0\u415c\0\u41b5\0\u420e\0\u4267\0\u42c0\0\u4319\0\u4372\0\u43cb"+
    "\0\u4424\0\u447d\0\u44d6\0\u452f\0\u4588\0\u45e1\0\u463a\0\u4693"+
    "\0\u46ec\0\u4745\0\u479e\0\u47f7\0\u4850\0\u48a9\0\u4902\0\u495b"+
    "\0\u49b4\0\u0858\0\u4a0d\0\u0858\0\u4a66\0\u4abf\0\u4b18\0\u4b71"+
    "\0\u4bca\0\u4c23\0\u4c7c\0\u4cd5\0\u4d2e\0\u4d87\0\u4de0\0\u4e39"+
    "\0\u4e92\0\u4eeb\0\u4f44\0\u4f9d\0\u4ff6\0\u504f\0\u50a8\0\u5101"+
    "\0\u515a\0\u51b3\0\u520c\0\u5265\0\u52be\0\u5317\0\u5370\0\u53c9"+
    "\0\u5422\0\u547b\0\u0858\0\u54d4\0\u552d\0\u5586\0\u55df\0\u0858"+
    "\0\u5638\0\u5691\0\u56ea\0\u5743\0\u579c\0\u57f5\0\u584e\0\u58a7"+
    "\0\u5900\0\u5959\0\u59b2\0\u5a0b\0\u5a64\0\u5abd\0\u5b16\0\u5b6f"+
    "\0\u5bc8\0\u5c21\0\u5c7a\0\u5cd3\0\u5d2c\0\u5d85\0\u0858\0\u5dde"+
    "\0\u5e37\0\u5e90\0\u5ee9\0\u5f42\0\u5f9b\0\u5ff4\0\u604d\0\u60a6"+
    "\0\u60ff\0\u6158\0\u61b1\0\u620a\0\u6263\0\u62bc\0\u0858\0\u6315"+
    "\0\u636e\0\u63c7\0\u6420\0\u6479\0\u0858\0\u64d2\0\u652b\0\u6584"+
    "\0\u65dd\0\u6636\0\u668f\0\u66e8\0\u6741\0\u0858\0\u679a\0\u67f3"+
    "\0\u684c\0\u68a5\0\u68fe\0\u6957\0\u0858\0\u69b0\0\u6a09\0\u0858"+
    "\0\u6a62\0\u6abb\0\u6b14\0\u6b6d\0\u6bc6\0\u6c1f\0\u6c78\0\u6cd1"+
    "\0\u6d2a\0\u6d83\0\u6ddc\0\u6e35\0\u6e8e\0\u6ee7\0\u6f40\0\u6f99"+
    "\0\u6ff2\0\u704b\0\u70a4\0\u70fd\0\u7156\0\u71af\0\u7208\0\u7261"+
    "\0\u72ba\0\u7313\0\u736c\0\u73c5\0\u741e\0\u7477\0\u0858\0\u74d0"+
    "\0\u7529\0\u7582\0\u75db\0\u7634\0\u768d\0\u76e6\0\u773f\0\u7798"+
    "\0\u77f1\0\u784a\0\u78a3\0\u78fc\0\u7955\0\u79ae\0\u7a07\0\u7a60"+
    "\0\u7ab9\0\u7b12\0\u7b6b\0\u0858\0\u7bc4\0\u7c1d\0\u7c76\0\u7ccf"+
    "\0\u7d28\0\u7d81\0\u7dda\0\u7e33\0\u7e8c\0\u7ee5\0\u7f3e\0\u7f97"+
    "\0\u7ff0\0\u8049\0\u80a2\0\u80fb\0\u8154\0\u81ad\0\u8206\0\u825f"+
    "\0\u0858\0\u82b8\0\u8311\0\u836a\0\u83c3\0\u841c\0\u8475\0\u84ce"+
    "\0\u8527\0\u8580\0\u85d9\0\u8632\0\u868b\0\u86e4\0\u873d\0\u8796"+
    "\0\u87ef\0\u8848\0\u88a1\0\u88fa\0\u0858\0\u8953\0\u89ac\0\u8a05"+
    "\0\u8a5e\0\u8ab7\0\u0858\0\u8b10\0\u8b69\0\u8bc2\0\u8c1b\0\u8c74"+
    "\0\u8ccd\0\u0858\0\u8d26\0\u8d7f\0\u8dd8\0\u8e31\0\u8e8a\0\u8ee3"+
    "\0\u8f3c\0\u8f95\0\u8fee\0\u9047\0\u0858\0\u90a0\0\u90f9\0\u9152"+
    "\0\u91ab\0\u9204\0\u0858\0\u0858\0\u925d\0\u92b6\0\u930f\0\u9368"+
    "\0\u93c1\0\u941a\0\u9473\0\u94cc\0\u0858\0\u9525\0\u957e\0\u95d7"+
    "\0\u9630\0\u9689\0\u96e2\0\u973b\0\u9794\0\u97ed\0\u9846\0\u989f"+
    "\0\u98f8\0\u9951\0\u99aa\0\u9a03\0\u9a5c\0\u9ab5\0\u9b0e\0\u9b67"+
    "\0\u9bc0\0\u9c19\0\u9c72\0\u9ccb\0\u0858\0\u0858\0\u9d24\0\u9d7d"+
    "\0\u9dd6\0\u0858\0\u0858\0\u9e2f\0\u9e88\0\u9ee1\0\u9f3a\0\u9f93"+
    "\0\u9fec\0\ua045\0\ua09e\0\u0858\0\ua0f7\0\ua150\0\ua1a9\0\ua202"+
    "\0\ua25b\0\ua2b4\0\ua30d\0\ua366\0\ua3bf\0\ua418\0\u0858\0\u0858"+
    "\0\ua471\0\ua4ca\0\ua523\0\ua57c\0\ua5d5\0\ua62e\0\ua687\0\u0858"+
    "\0\u0858\0\u0858\0\u0858\0\ua6e0\0\ua739\0\ua792\0\ua7eb\0\ua844"+
    "\0\u0858\0\ua89d\0\ua8f6\0\ua94f\0\ua9a8\0\uaa01\0\uaa5a\0\uaab3"+
    "\0\uab0c\0\uab65\0\uabbe\0\uac17\0\uac70\0\uacc9\0\uad22\0\u0858"+
    "\0\uad7b\0\uadd4\0\uae2d\0\uae86\0\uaedf\0\uaf38\0\uaf91\0\u0858"+
    "\0\uafea\0\ub043\0\ub09c\0\ub0f5\0\ub14e\0\ub1a7\0\ub200\0\ub259"+
    "\0\ub2b2\0\u0858\0\ub30b\0\ub364\0\ub3bd\0\ub416\0\u0858\0\ub46f"+
    "\0\ub4c8\0\u0858\0\ub521\0\ub57a\0\ub5d3\0\u0858\0\ub62c\0\ub685"+
    "\0\ub6de\0\ub737\0\ub790\0\ub7e9\0\ub842\0\ub89b\0\ub8f4\0\u0858"+
    "\0\u0858\0\ub94d\0\ub9a6\0\ub9ff\0\uba58\0\ubab1\0\ubb0a\0\ubb63"+
    "\0\ubbbc\0\u0858\0\ubc15\0\ubc6e\0\ubcc7\0\ubd20\0\ubd79\0\ubdd2"+
    "\0\ube2b\0\ube84\0\ubedd\0\ubf36\0\ubf8f\0\ubfe8\0\uc041\0\uc09a"+
    "\0\uc0f3\0\uc14c\0\uc1a5\0\uc1fe\0\uc257\0\uc2b0\0\uc309\0\uc362"+
    "\0\uc3bb\0\uc414\0\uc46d\0\uc4c6\0\uc51f\0\uc578\0\uc5d1\0\u0858"+
    "\0\uc62a\0\uc683\0\uc6dc\0\uc735\0\uc78e\0\uc7e7\0\uc840\0\uc899"+
    "\0\u0858\0\uc8f2\0\uc94b\0\uc9a4\0\uc9fd\0\uca56\0\u0858\0\ucaaf"+
    "\0\u0858\0\ucb08\0\u0858\0\ucb61\0\ucbba\0\ucc13\0\ucc6c\0\uccc5"+
    "\0\ucd1e\0\ucd77\0\ucdd0\0\uce29\0\uce82\0\ucedb\0\ucf34\0\ucf8d"+
    "\0\ucfe6\0\ud03f\0\ud098\0\ud0f1\0\ud14a\0\u0858\0\ud1a3\0\ud1fc"+
    "\0\ud255\0\ud2ae\0\ud307\0\ud360\0\ud3b9\0\u0858\0\ud412\0\ud46b"+
    "\0\ud4c4\0\ud51d\0\ud576\0\u0858\0\u0858\0\ud5cf\0\ud628\0\ud681"+
    "\0\ud6da\0\u0858\0\ud733\0\u0858\0\ud78c\0\ud7e5\0\ud83e\0\ud897"+
    "\0\ud8f0\0\ud949\0\ud9a2\0\ud9fb\0\uda54\0\udaad\0\udb06\0\u0858"+
    "\0\udb5f\0\udbb8\0\ud4c4\0\u0858\0\udc11\0\udc6a\0\udcc3\0\udd1c"+
    "\0\udd75\0\u4cd5\0\uddce\0\ude27\0\ude80\0\uded9\0\udf32\0\udf8b"+
    "\0\udfe4\0\ue03d\0\u0858\0\u0858\0\ue096\0\u0858\0\ue0ef\0\ue148"+
    "\0\ue1a1\0\ue1fa\0\ue253\0\ue2ac\0\ue305\0\ue35e\0\ue3b7\0\ue410"+
    "\0\ue469\0\ue4c2\0\ue51b\0\ue574\0\ue5cd\0\131\0\u0858\0\131"+
    "\0\ue626\0\ue67f\0\ue6d8\0\ue731\0\ue78a\0\u0858\0\ue7e3\0\ue83c"+
    "\0\ue895\0\ue8ee\0\ue947\0\ue9a0\0\u0858\0\ue9f9\0\uea52\0\ueaab"+
    "\0\ueb04\0\ueb5d\0\uebb6\0\uec0f\0\u0858\0\uec68\0\uecc1\0\ued1a"+
    "\0\ued73\0\uedcc\0\uee25\0\uee7e\0\ueed7\0\uef30\0\uef89\0\u0858"+
    "\0\uefe2\0\uf03b\0\uf094\0\uf0ed\0\uf146\0\uf19f\0\uf1f8\0\uf251"+
    "\0\uf2aa\0\u0858\0\uf303\0\uf35c\0\uf3b5\0\u0858\0\uf40e\0\uf467"+
    "\0\uf4c0\0\uf519\0\uf572\0\uf5cb\0\uf624\0\uf67d\0\uf6d6\0\u0858"+
    "\0\uf72f\0\uf788\0\131\0\uf7e1\0\uf83a\0\uf893\0\uf8ec\0\uf945"+
    "\0\uf99e\0\uf9f7\0\u0858\0\ufa50\0\ufaa9\0\ufb02\0\ufb5b\0\ufbb4"+
    "\0\ufc0d\0\ufc66\0\ufcbf\0\ufd18\0\ufd71\0\ufdca\0\u0858\0\ufe23"+
    "\0\ufe7c\0\ufed5\0\uff2e\0\uff87\0\uffe0\1\71\1\222\1\353"+
    "\1\u0144\0\131\1\u019d\1\u01f6\0\u0858\1\u024f\1\u02a8\1\u0301"+
    "\0\u0858\0\131\1\u035a\1\u03b3\1\u040c\0\u0858\1\u0465\1\u04be"+
    "\1\u0517\1\u0570\1\u05c9\1\u0622\1\u067b\1\u06d4\0\u0858\0\u0858"+
    "\1\u072d\1\u0786\0\131\1\u07df\1\u0838\1\u0891\1\u08ea\1\u0943"+
    "\1\u099c\1\u09f5\1\u0a4e\1\u0aa7\1\u0b00\1\u0b59\0\131";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[879];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\7\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\2\41\1\57\1\2"+
    "\1\60\1\61\1\2\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\41\1\71\2\41\1\72\1\41\1\73"+
    "\1\74\1\75\1\41\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\41\1\104\1\41\1\105\1\106\1\107\1\110"+
    "\162\0\1\111\77\0\3\112\1\113\3\112\1\0\121\112"+
    "\31\0\1\114\105\0\1\115\22\0\1\114\77\0\3\116"+
    "\1\0\3\116\1\117\57\116\1\0\41\116\12\0\1\6"+
    "\3\0\1\120\12\0\1\114\116\0\7\20\3\0\1\114"+
    "\111\0\1\121\3\0\1\6\12\0\1\114\114\0\1\122"+
    "\1\0\7\20\12\0\1\123\36\0\1\123\3\0\1\124"+
    "\55\0\1\61\1\111\130\0\1\111\1\61\131\0\1\125"+
    "\114\0\7\41\6\0\3\41\1\126\7\41\1\127\1\41"+
    "\1\130\4\41\1\131\7\41\4\0\4\41\1\132\7\41"+
    "\1\133\1\41\1\134\3\41\1\135\10\41\23\0\7\41"+
    "\6\0\1\136\3\41\1\137\25\41\4\0\31\41\1\140"+
    "\1\41\23\0\7\41\6\0\1\41\1\141\1\142\1\143"+
    "\3\41\1\144\1\145\2\41\1\146\2\41\1\147\2\41"+
    "\1\150\1\151\1\41\1\152\5\41\4\0\1\41\1\153"+
    "\31\41\23\0\7\41\6\0\1\154\3\41\1\155\3\41"+
    "\1\156\10\41\1\157\10\41\4\0\5\41\1\160\3\41"+
    "\1\161\21\41\23\0\7\41\6\0\27\41\1\162\2\41"+
    "\4\0\1\41\1\163\14\41\1\164\3\41\1\165\3\41"+
    "\1\166\1\41\1\167\2\41\23\0\7\41\6\0\10\41"+
    "\1\170\5\41\1\171\5\41\1\172\5\41\4\0\1\41"+
    "\1\173\20\41\1\174\10\41\23\0\7\41\6\0\21\41"+
    "\1\175\10\41\4\0\5\41\1\176\11\41\1\177\13\41"+
    "\23\0\7\41\6\0\1\200\31\41\4\0\1\41\1\201"+
    "\31\41\23\0\7\41\6\0\15\41\1\202\14\41\4\0"+
    "\33\41\23\0\7\41\6\0\16\41\1\203\13\41\4\0"+
    "\33\41\23\0\7\41\6\0\32\41\4\0\33\41\23\0"+
    "\7\41\6\0\4\41\1\204\3\41\1\205\21\41\4\0"+
    "\5\41\1\206\3\41\1\207\21\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\210\11\41\1\211\5\41\1\212"+
    "\3\41\1\213\1\41\23\0\7\41\6\0\32\41\4\0"+
    "\1\41\1\214\3\41\1\215\11\41\1\216\5\41\1\217"+
    "\5\41\23\0\7\41\6\0\21\41\1\220\2\41\1\221"+
    "\5\41\4\0\2\41\1\222\3\41\1\223\11\41\1\224"+
    "\1\41\1\225\2\41\1\226\1\227\4\41\23\0\7\41"+
    "\6\0\21\41\1\230\10\41\4\0\1\41\1\231\31\41"+
    "\23\0\7\41\6\0\32\41\4\0\25\41\1\232\5\41"+
    "\23\0\7\41\6\0\4\41\1\233\3\41\1\234\5\41"+
    "\1\235\13\41\4\0\1\41\1\236\3\41\1\237\25\41"+
    "\23\0\7\41\6\0\1\41\1\240\2\41\1\241\25\41"+
    "\4\0\10\41\1\242\1\243\12\41\1\244\1\245\5\41"+
    "\23\0\7\41\6\0\1\246\15\41\1\247\2\41\1\250"+
    "\10\41\4\0\10\41\1\251\11\41\1\252\6\41\1\253"+
    "\1\41\23\0\7\41\6\0\10\41\1\254\2\41\1\255"+
    "\1\41\1\256\1\41\1\257\2\41\1\260\7\41\4\0"+
    "\23\41\1\261\7\41\23\0\7\41\6\0\1\262\7\41"+
    "\1\263\21\41\4\0\33\41\23\0\7\41\6\0\7\41"+
    "\1\264\22\41\4\0\11\41\1\265\10\41\1\266\10\41"+
    "\23\0\7\41\6\0\32\41\4\0\17\41\1\74\13\41"+
    "\23\0\7\41\6\0\32\41\4\0\2\41\1\267\13\41"+
    "\1\270\4\41\1\271\3\41\1\272\3\41\23\0\7\41"+
    "\6\0\32\41\4\0\17\41\1\273\2\41\1\274\6\41"+
    "\1\275\1\41\23\0\7\41\6\0\32\41\4\0\1\41"+
    "\1\276\6\41\1\277\3\41\1\300\2\41\1\301\13\41"+
    "\23\0\7\41\6\0\32\41\4\0\1\41\1\275\3\41"+
    "\1\302\3\41\1\303\5\41\1\304\13\41\23\0\7\41"+
    "\6\0\32\41\4\0\14\41\1\305\1\41\1\306\11\41"+
    "\1\307\2\41\23\0\7\41\6\0\32\41\4\0\1\41"+
    "\1\173\7\41\1\310\2\41\1\311\2\41\1\312\2\41"+
    "\1\313\2\41\1\314\5\41\23\0\7\41\6\0\32\41"+
    "\4\0\14\41\1\315\16\41\23\0\7\41\6\0\32\41"+
    "\4\0\6\41\1\316\6\41\1\317\1\320\4\41\1\321"+
    "\7\41\23\0\7\41\6\0\32\41\4\0\1\41\1\322"+
    "\7\41\1\323\5\41\1\324\13\41\23\0\7\41\6\0"+
    "\32\41\4\0\1\41\1\325\3\41\1\326\11\41\1\327"+
    "\5\41\1\217\5\41\23\0\7\41\6\0\32\41\4\0"+
    "\22\41\1\330\10\41\23\0\7\41\6\0\32\41\4\0"+
    "\1\41\1\331\20\41\1\332\2\41\1\333\5\41\23\0"+
    "\7\41\6\0\32\41\4\0\1\41\1\334\3\41\1\335"+
    "\25\41\23\0\7\41\6\0\32\41\4\0\5\41\1\336"+
    "\2\41\1\337\13\41\1\340\1\341\1\41\1\342\1\41"+
    "\1\343\1\41\23\0\7\41\6\0\32\41\4\0\10\41"+
    "\1\344\1\345\10\41\1\346\2\41\1\347\5\41\23\0"+
    "\7\41\6\0\32\41\4\0\11\41\1\350\21\41\23\0"+
    "\7\41\6\0\32\41\4\0\1\41\1\351\15\41\1\352"+
    "\13\41\23\0\7\41\6\0\32\41\4\0\10\41\1\353"+
    "\1\354\21\41\23\0\7\41\6\0\32\41\4\0\11\41"+
    "\1\355\21\41\35\0\1\114\74\0\1\115\11\0\1\117"+
    "\140\0\7\356\116\0\1\357\3\0\7\360\122\0\7\41"+
    "\6\0\3\41\1\361\26\41\4\0\33\41\23\0\7\41"+
    "\6\0\13\41\1\362\7\41\1\363\6\41\4\0\33\41"+
    "\23\0\7\41\6\0\30\41\1\362\1\41\4\0\33\41"+
    "\23\0\7\41\6\0\2\41\1\364\27\41\4\0\33\41"+
    "\23\0\7\41\6\0\32\41\4\0\4\41\1\365\26\41"+
    "\23\0\7\41\6\0\32\41\4\0\11\41\1\366\21\41"+
    "\23\0\7\41\6\0\32\41\4\0\4\41\1\367\26\41"+
    "\23\0\7\41\6\0\32\41\4\0\22\41\1\370\10\41"+
    "\23\0\7\41\6\0\2\41\1\371\27\41\4\0\33\41"+
    "\23\0\7\41\6\0\23\41\1\372\6\41\4\0\33\41"+
    "\23\0\7\41\6\0\21\41\1\373\3\41\1\374\4\41"+
    "\4\0\33\41\23\0\7\41\6\0\32\41\4\0\17\41"+
    "\1\375\11\41\1\376\1\41\23\0\7\41\6\0\32\41"+
    "\4\0\10\41\1\377\22\41\23\0\7\41\6\0\32\41"+
    "\4\0\1\41\1\376\1\u0100\2\41\1\u0101\25\41\23\0"+
    "\7\41\6\0\4\41\1\u0102\25\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\16\41\1\u0103\14\41\23\0"+
    "\7\41\6\0\32\41\4\0\16\41\1\u0104\14\41\23\0"+
    "\7\41\6\0\13\41\1\u0105\1\41\1\u0106\14\41\4\0"+
    "\2\41\1\u0107\30\41\23\0\7\41\6\0\4\41\1\u0108"+
    "\25\41\4\0\33\41\23\0\7\41\6\0\1\41\1\u0109"+
    "\30\41\4\0\10\41\1\u010a\5\41\1\u0104\5\41\1\u010b"+
    "\6\41\23\0\7\41\6\0\10\41\1\145\2\41\1\146"+
    "\6\41\1\u010c\7\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\14\41\1\u010d\16\41\23\0\7\41\6\0"+
    "\23\41\1\u010e\6\41\4\0\33\41\23\0\7\41\6\0"+
    "\13\41\1\u010f\6\41\1\131\7\41\4\0\33\41\23\0"+
    "\7\41\6\0\22\41\1\u0110\7\41\4\0\33\41\23\0"+
    "\7\41\6\0\16\41\1\u0111\13\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\14\41\1\u0112\16\41\23\0"+
    "\7\41\6\0\32\41\4\0\15\41\1\u0113\4\41\1\u0114"+
    "\10\41\23\0\7\41\6\0\4\41\1\u0115\3\41\1\u0116"+
    "\21\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\3\41\1\u0117\27\41\23\0\7\41\6\0\32\41\4\0"+
    "\4\41\1\u0118\26\41\23\0\7\41\6\0\32\41\4\0"+
    "\1\41\1\u0119\20\41\1\u011a\10\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u011b\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\11\41\1\u011c\21\41\23\0\7\41\6\0"+
    "\27\41\1\u011d\2\41\4\0\33\41\23\0\7\41\6\0"+
    "\21\41\1\u011e\10\41\4\0\33\41\23\0\7\41\6\0"+
    "\13\41\1\u011f\16\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\14\41\1\u0120\16\41\23\0\7\41\6\0"+
    "\32\41\4\0\11\41\1\u0121\21\41\23\0\7\41\6\0"+
    "\16\41\1\u0122\13\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\24\41\1\u0123\6\41\23\0\7\41\6\0"+
    "\23\41\1\u0124\6\41\4\0\33\41\23\0\7\41\6\0"+
    "\25\41\1\u0125\4\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\16\41\1\u0126\14\41\23\0\7\41\6\0"+
    "\3\41\1\u0127\11\41\1\u0128\4\41\1\u0129\1\u012a\6\41"+
    "\4\0\33\41\23\0\7\41\6\0\10\41\1\u012b\21\41"+
    "\4\0\33\41\23\0\7\41\6\0\5\41\1\u012c\24\41"+
    "\4\0\33\41\23\0\7\41\6\0\12\41\1\u012d\1\41"+
    "\1\u012e\15\41\4\0\33\41\23\0\7\41\6\0\32\41"+
    "\4\0\24\41\1\u012f\6\41\23\0\7\41\6\0\32\41"+
    "\4\0\2\41\1\210\30\41\23\0\7\41\6\0\32\41"+
    "\4\0\4\41\1\u0130\26\41\23\0\7\41\6\0\32\41"+
    "\4\0\23\41\1\u0131\7\41\23\0\7\41\6\0\1\41"+
    "\1\u0132\1\u0133\27\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\15\41\1\u0134\4\41\1\u0135\10\41\23\0"+
    "\7\41\6\0\32\41\4\0\30\41\1\u0136\2\41\23\0"+
    "\7\41\6\0\32\41\4\0\16\41\1\u0137\5\41\1\u0138"+
    "\6\41\23\0\7\41\6\0\32\41\4\0\14\41\1\u0139"+
    "\16\41\23\0\7\41\6\0\3\41\1\u013a\26\41\4\0"+
    "\33\41\23\0\7\41\6\0\23\41\1\u0128\6\41\4\0"+
    "\33\41\23\0\7\41\6\0\32\41\4\0\12\41\1\u013b"+
    "\20\41\23\0\7\41\6\0\32\41\4\0\5\41\1\u013c"+
    "\16\41\1\u013d\6\41\23\0\7\41\6\0\4\41\1\u013e"+
    "\25\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\24\41\1\u013f\6\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u0140\25\41\23\0\7\41\6\0\10\41\1\u0141"+
    "\5\41\1\u0142\13\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\22\41\1\u0143\10\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u0144\25\41\23\0\7\41\6\0"+
    "\14\41\1\u0145\15\41\4\0\33\41\23\0\7\41\6\0"+
    "\6\41\1\u0146\23\41\4\0\33\41\23\0\7\41\6\0"+
    "\26\41\1\u0147\3\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\11\41\1\u0148\21\41\23\0\7\41\6\0"+
    "\3\41\1\u0149\26\41\4\0\1\41\1\u014a\13\41\1\u014b"+
    "\5\41\1\u014c\7\41\23\0\7\41\6\0\32\41\4\0"+
    "\31\41\1\275\1\41\23\0\7\41\6\0\13\41\1\u014d"+
    "\7\41\1\u014e\6\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\1\41\1\u014f\31\41\23\0\7\41\6\0"+
    "\32\41\4\0\16\41\1\u0150\14\41\23\0\7\41\6\0"+
    "\32\41\4\0\1\41\1\u0151\3\41\1\u0152\11\41\1\u0153"+
    "\2\41\1\u0154\10\41\23\0\7\41\6\0\32\41\4\0"+
    "\2\41\1\u0155\30\41\23\0\7\41\6\0\1\41\1\u0156"+
    "\30\41\4\0\33\41\23\0\7\41\6\0\3\41\1\u0157"+
    "\13\41\1\u0158\12\41\4\0\33\41\23\0\7\41\6\0"+
    "\24\41\1\u0159\5\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u015a\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\25\41\1\u015b\3\41\1\u015c\1\41\23\0"+
    "\7\41\6\0\32\41\4\0\20\41\1\u015d\12\41\23\0"+
    "\7\41\6\0\32\41\4\0\16\41\1\u015e\14\41\23\0"+
    "\7\41\6\0\32\41\4\0\17\41\1\324\13\41\23\0"+
    "\7\41\6\0\10\41\1\u015f\21\41\4\0\33\41\23\0"+
    "\7\41\6\0\3\41\1\u0160\26\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\10\41\1\337\22\41\23\0"+
    "\7\41\6\0\32\41\4\0\11\41\1\u0161\21\41\23\0"+
    "\7\41\6\0\13\41\1\u0162\16\41\4\0\33\41\23\0"+
    "\7\41\6\0\4\41\1\u0163\25\41\4\0\33\41\23\0"+
    "\7\41\6\0\4\41\1\u0164\25\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\4\41\1\u0165\17\41\1\u0166"+
    "\6\41\23\0\7\41\6\0\32\41\4\0\11\41\1\u0167"+
    "\21\41\23\0\7\41\6\0\32\41\4\0\23\41\1\u0168"+
    "\7\41\23\0\7\41\6\0\32\41\4\0\4\41\1\330"+
    "\26\41\23\0\7\41\6\0\32\41\4\0\23\41\1\u0169"+
    "\5\41\1\u016a\1\41\23\0\7\41\6\0\32\41\4\0"+
    "\1\41\1\u016b\31\41\23\0\7\41\6\0\32\41\4\0"+
    "\17\41\1\u016c\13\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u016d\25\41\23\0\7\41\6\0\32\41\4\0"+
    "\24\41\1\u016e\6\41\23\0\7\41\6\0\32\41\4\0"+
    "\23\41\1\u016f\1\u0170\6\41\23\0\7\41\6\0\32\41"+
    "\4\0\1\41\1\u0171\31\41\23\0\7\41\6\0\32\41"+
    "\4\0\1\41\1\u0172\31\41\23\0\7\41\6\0\32\41"+
    "\4\0\15\41\1\u0173\1\u0174\14\41\23\0\7\41\6\0"+
    "\32\41\4\0\3\41\1\u0175\2\41\1\u0176\5\41\1\u0177"+
    "\16\41\23\0\7\41\6\0\32\41\4\0\3\41\1\u0178"+
    "\27\41\23\0\7\41\6\0\32\41\4\0\25\41\1\u0179"+
    "\5\41\23\0\7\41\6\0\32\41\4\0\11\41\1\u017a"+
    "\11\41\1\u017b\7\41\23\0\7\41\6\0\32\41\4\0"+
    "\25\41\1\u017c\5\41\23\0\7\41\6\0\32\41\4\0"+
    "\3\41\1\u017d\20\41\1\u017e\6\41\23\0\7\41\6\0"+
    "\32\41\4\0\16\41\1\u017f\14\41\23\0\7\41\6\0"+
    "\32\41\4\0\17\41\1\u0180\13\41\23\0\7\41\6\0"+
    "\32\41\4\0\22\41\1\u0181\10\41\23\0\7\41\6\0"+
    "\32\41\4\0\17\41\1\u0182\13\41\23\0\7\41\6\0"+
    "\32\41\4\0\16\41\1\u0183\14\41\23\0\7\41\6\0"+
    "\32\41\4\0\17\41\1\u0184\13\41\23\0\7\41\6\0"+
    "\32\41\4\0\20\41\1\u0185\12\41\23\0\7\41\6\0"+
    "\32\41\4\0\23\41\1\u0186\1\u0187\6\41\5\0\1\u0188"+
    "\15\0\7\41\6\0\32\41\4\0\33\41\23\0\7\41"+
    "\6\0\32\41\4\0\15\41\1\u0189\15\41\23\0\7\41"+
    "\6\0\32\41\4\0\23\41\1\u0178\7\41\23\0\7\41"+
    "\6\0\32\41\4\0\16\41\1\u018a\14\41\23\0\7\41"+
    "\6\0\32\41\4\0\24\41\1\u018b\6\41\23\0\7\41"+
    "\6\0\32\41\4\0\27\41\1\u018c\3\41\23\0\7\41"+
    "\6\0\32\41\4\0\16\41\1\u018d\5\41\1\u018e\6\41"+
    "\23\0\7\41\6\0\32\41\4\0\3\41\1\u018f\17\41"+
    "\1\u0190\7\41\23\0\7\41\6\0\32\41\4\0\11\41"+
    "\1\u0191\5\41\1\u0192\13\41\23\0\7\41\6\0\32\41"+
    "\4\0\2\41\1\u0193\30\41\23\0\7\41\6\0\32\41"+
    "\4\0\11\41\1\u0194\21\41\23\0\7\41\6\0\32\41"+
    "\4\0\21\41\1\u0195\2\41\1\u0196\6\41\23\0\7\41"+
    "\6\0\32\41\4\0\14\41\1\u0197\16\41\23\0\7\41"+
    "\6\0\32\41\4\0\17\41\1\u0198\13\41\23\0\7\41"+
    "\6\0\32\41\4\0\1\41\1\u0199\20\41\1\u019a\10\41"+
    "\23\0\7\41\6\0\32\41\4\0\20\41\1\u019b\12\41"+
    "\23\0\7\41\6\0\32\41\4\0\11\41\1\u019c\21\41"+
    "\23\0\7\41\6\0\32\41\4\0\16\41\1\u019d\14\41"+
    "\23\0\7\41\6\0\32\41\4\0\11\41\1\u019e\10\41"+
    "\1\u019f\10\41\23\0\7\41\6\0\32\41\4\0\15\41"+
    "\1\u016e\15\41\23\0\7\41\6\0\32\41\4\0\1\41"+
    "\1\u01a0\23\41\1\u015b\3\41\1\u01a1\1\41\23\0\7\41"+
    "\6\0\32\41\4\0\20\41\1\u01a2\12\41\23\0\7\41"+
    "\6\0\32\41\4\0\16\41\1\u01a3\14\41\23\0\7\41"+
    "\6\0\32\41\4\0\22\41\1\u012f\10\41\23\0\7\41"+
    "\6\0\32\41\4\0\11\41\1\u01a4\2\41\1\u01a5\16\41"+
    "\23\0\7\41\6\0\32\41\4\0\11\41\1\u01a6\21\41"+
    "\23\0\7\41\6\0\32\41\4\0\24\41\1\u01a7\6\41"+
    "\23\0\7\41\6\0\32\41\4\0\5\41\1\u01a8\25\41"+
    "\23\0\7\356\12\0\1\123\36\0\1\123\3\0\1\124"+
    "\44\0\7\360\122\0\7\360\55\0\1\124\26\0\1\u01a9"+
    "\15\0\7\41\6\0\32\41\4\0\33\41\23\0\7\41"+
    "\6\0\4\41\1\u01aa\25\41\4\0\33\41\23\0\7\41"+
    "\6\0\7\41\1\u01ab\22\41\4\0\22\41\1\u01ac\10\41"+
    "\23\0\7\41\6\0\32\41\4\0\1\41\1\u01ad\31\41"+
    "\23\0\7\41\6\0\1\u01ae\31\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\1\41\1\u01af\31\41\23\0"+
    "\7\41\6\0\12\41\1\u01b0\17\41\4\0\33\41\23\0"+
    "\7\41\6\0\26\41\1\u01b1\3\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\5\41\1\u01b2\25\41\23\0"+
    "\7\41\6\0\32\41\4\0\1\41\1\u01b3\31\41\23\0"+
    "\7\41\6\0\32\41\4\0\17\41\1\u0100\13\41\23\0"+
    "\7\41\6\0\32\41\4\0\24\41\1\u01b4\6\41\23\0"+
    "\7\41\6\0\32\41\4\0\1\41\1\u010b\31\41\23\0"+
    "\7\41\6\0\32\41\4\0\14\41\1\u01b5\16\41\23\0"+
    "\7\41\6\0\32\41\4\0\3\41\1\u01b5\27\41\23\0"+
    "\7\41\6\0\2\41\1\u01b6\27\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\24\41\1\u01b5\6\41\23\0"+
    "\7\41\6\0\32\41\4\0\7\41\1\u01b5\23\41\23\0"+
    "\7\41\6\0\24\41\1\u01b7\5\41\4\0\33\41\23\0"+
    "\7\41\6\0\22\41\1\u01b8\7\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\12\41\1\u01b5\20\41\23\0"+
    "\7\41\6\0\1\u01b9\31\41\4\0\33\41\23\0\7\41"+
    "\6\0\32\41\4\0\31\41\1\376\1\41\23\0\7\41"+
    "\6\0\32\41\4\0\17\41\1\u01ba\13\41\23\0\7\41"+
    "\6\0\32\41\4\0\22\41\1\u01b5\10\41\23\0\7\41"+
    "\6\0\32\41\4\0\10\41\1\u010a\22\41\23\0\7\41"+
    "\6\0\32\41\4\0\14\41\1\u01bb\16\41\23\0\7\41"+
    "\6\0\1\u01bc\31\41\4\0\33\41\23\0\7\41\6\0"+
    "\4\41\1\u01bd\25\41\4\0\33\41\23\0\7\41\6\0"+
    "\23\41\1\u01be\6\41\4\0\33\41\23\0\7\41\6\0"+
    "\17\41\1\u0177\12\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u01bf\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u01c0\25\41\23\0\7\41\6\0"+
    "\2\41\1\u01bb\27\41\4\0\33\41\23\0\7\41\6\0"+
    "\22\41\1\u01c1\7\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\10\41\1\u01c2\22\41\23\0\7\41\6\0"+
    "\32\41\4\0\23\41\1\u01c3\7\41\23\0\7\41\6\0"+
    "\32\41\4\0\17\41\1\u01c4\13\41\23\0\7\41\6\0"+
    "\32\41\4\0\16\41\1\u01c5\14\41\23\0\7\41\6\0"+
    "\32\41\4\0\24\41\1\u0118\6\41\23\0\7\41\6\0"+
    "\14\41\1\u01c6\15\41\4\0\33\41\23\0\7\41\6\0"+
    "\4\41\1\u01c7\25\41\4\0\33\41\23\0\7\41\6\0"+
    "\13\41\1\u01c8\16\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\23\41\1\u015b\7\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u01c9\25\41\23\0\7\41\6\0"+
    "\24\41\1\u01ca\5\41\4\0\33\41\23\0\7\41\6\0"+
    "\23\41\1\u01cb\3\41\1\u01cc\2\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\17\41\1\u01cd\13\41\23\0"+
    "\7\41\6\0\10\41\1\u01ce\21\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\4\41\1\u01cf\26\41\23\0"+
    "\7\41\6\0\4\41\1\u01d0\25\41\4\0\33\41\23\0"+
    "\7\41\6\0\4\41\1\u01d1\25\41\4\0\33\41\23\0"+
    "\7\41\6\0\4\41\1\u01d2\25\41\4\0\33\41\23\0"+
    "\7\41\6\0\16\41\1\u01d3\13\41\4\0\33\41\23\0"+
    "\7\41\6\0\15\41\1\u01d4\14\41\4\0\33\41\23\0"+
    "\7\41\6\0\23\41\1\u01d5\6\41\4\0\33\41\23\0"+
    "\7\41\6\0\4\41\1\362\25\41\4\0\33\41\23\0"+
    "\7\41\6\0\10\41\1\u01d6\21\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\25\41\1\u01d7\5\41\23\0"+
    "\7\41\6\0\32\41\4\0\24\41\1\u01d8\6\41\23\0"+
    "\7\41\6\0\32\41\4\0\1\41\1\u01d9\31\41\23\0"+
    "\7\41\6\0\32\41\4\0\14\41\1\u01da\16\41\23\0"+
    "\7\41\6\0\32\41\4\0\5\41\1\u01db\25\41\23\0"+
    "\7\41\6\0\32\41\4\0\22\41\1\u01dc\10\41\23\0"+
    "\7\41\6\0\32\41\4\0\24\41\1\u01c2\6\41\23\0"+
    "\7\41\6\0\32\41\4\0\5\41\1\u01dd\25\41\23\0"+
    "\7\41\6\0\10\41\1\u01de\5\41\1\u01df\13\41\4\0"+
    "\10\41\1\u01e0\22\41\23\0\7\41\6\0\32\41\4\0"+
    "\14\41\1\u01dd\16\41\23\0\7\41\6\0\4\41\1\u01e1"+
    "\25\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u01e2\25\41\23\0\7\41\6\0\32\41\4\0"+
    "\22\41\1\u01e3\10\41\23\0\7\41\6\0\32\41\4\0"+
    "\11\41\1\u01e4\21\41\23\0\7\41\6\0\32\41\4\0"+
    "\14\41\1\u01e5\16\41\23\0\7\41\6\0\32\41\4\0"+
    "\22\41\1\u01e6\10\41\23\0\7\41\6\0\14\41\1\u01e7"+
    "\15\41\4\0\33\41\23\0\7\41\6\0\2\41\1\u01e8"+
    "\27\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\24\41\1\u01e9\6\41\23\0\7\41\6\0\32\41\4\0"+
    "\25\41\1\u01ea\5\41\23\0\7\41\6\0\7\41\1\u012c"+
    "\22\41\4\0\33\41\23\0\7\41\6\0\15\41\1\u01eb"+
    "\14\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\23\41\1\u01ec\7\41\23\0\7\41\6\0\32\41\4\0"+
    "\11\41\1\u01ed\21\41\23\0\7\41\6\0\32\41\4\0"+
    "\4\41\1\u01ee\26\41\23\0\7\41\6\0\32\41\4\0"+
    "\17\41\1\u01ef\13\41\23\0\7\41\6\0\32\41\4\0"+
    "\25\41\1\u01f0\5\41\23\0\7\41\6\0\4\41\1\u01f1"+
    "\25\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\22\41\1\u01f2\10\41\23\0\7\41\6\0\32\41\4\0"+
    "\7\41\1\u01f3\23\41\23\0\7\41\6\0\32\41\4\0"+
    "\3\41\1\u01f4\27\41\23\0\7\41\6\0\32\41\4\0"+
    "\20\41\1\u01f5\12\41\23\0\7\41\6\0\32\41\4\0"+
    "\20\41\1\u01f6\12\41\23\0\7\41\6\0\32\41\4\0"+
    "\25\41\1\u01f7\5\41\23\0\7\41\6\0\13\41\1\u01f8"+
    "\16\41\4\0\33\41\23\0\7\41\6\0\16\41\1\u0145"+
    "\13\41\4\0\33\41\23\0\7\41\6\0\15\41\1\u01f9"+
    "\14\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\16\41\1\u01fa\14\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u01fb\25\41\23\0\7\41\6\0\2\41\1\u01fc"+
    "\27\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u01fd\25\41\23\0\7\41\6\0\32\41\4\0"+
    "\24\41\1\u01fe\6\41\23\0\7\41\6\0\16\41\1\u01ff"+
    "\1\41\1\u0200\11\41\4\0\33\41\23\0\7\41\6\0"+
    "\1\u0201\31\41\4\0\33\41\23\0\7\41\6\0\32\41"+
    "\4\0\16\41\1\u0202\14\41\23\0\7\41\6\0\24\41"+
    "\1\u0203\5\41\4\0\33\41\23\0\7\41\6\0\26\41"+
    "\1\u0204\3\41\4\0\33\41\23\0\7\41\6\0\21\41"+
    "\1\u0205\10\41\4\0\33\41\23\0\7\41\6\0\32\41"+
    "\4\0\5\41\1\u0206\25\41\23\0\7\41\6\0\32\41"+
    "\4\0\10\41\1\u0207\22\41\23\0\7\41\6\0\32\41"+
    "\4\0\24\41\1\u0208\6\41\23\0\7\41\6\0\32\41"+
    "\4\0\24\41\1\u0209\6\41\23\0\7\41\6\0\32\41"+
    "\4\0\5\41\1\u020a\25\41\23\0\7\41\6\0\32\41"+
    "\4\0\16\41\1\u020b\14\41\23\0\7\41\6\0\32\41"+
    "\4\0\11\41\1\u020c\21\41\23\0\7\41\6\0\32\41"+
    "\4\0\14\41\1\u020d\16\41\23\0\7\41\6\0\32\41"+
    "\4\0\1\41\1\u020e\31\41\23\0\7\41\6\0\32\41"+
    "\4\0\5\41\1\u020f\25\41\23\0\7\41\6\0\32\41"+
    "\4\0\5\41\1\u0210\25\41\23\0\7\41\6\0\32\41"+
    "\4\0\3\41\1\u0211\27\41\23\0\7\41\6\0\32\41"+
    "\4\0\22\41\1\u020f\10\41\23\0\7\41\6\0\32\41"+
    "\4\0\23\41\1\u0212\7\41\23\0\7\41\6\0\32\41"+
    "\4\0\20\41\1\u0213\12\41\23\0\7\41\6\0\32\41"+
    "\4\0\23\41\1\u0214\1\u0215\6\41\23\0\7\41\6\0"+
    "\32\41\4\0\11\41\1\u0216\21\41\23\0\7\41\6\0"+
    "\32\41\4\0\1\41\1\u0217\31\41\23\0\7\41\6\0"+
    "\32\41\4\0\24\41\1\u0218\6\41\23\0\7\41\6\0"+
    "\32\41\4\0\2\41\1\u01f3\30\41\23\0\7\41\6\0"+
    "\32\41\4\0\6\41\1\u0219\24\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u021a\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\15\41\1\u021b\15\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u021c\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u021d\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\1\41\1\u021e\31\41\23\0\7\41\6\0"+
    "\32\41\4\0\1\41\1\u021f\31\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u0220\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\15\41\1\u0221\15\41\23\0\7\41\6\0"+
    "\32\41\4\0\3\41\1\u0155\27\41\23\0\7\41\6\0"+
    "\32\41\4\0\2\41\1\u0222\30\41\23\0\7\41\6\0"+
    "\32\41\4\0\14\41\1\u0223\2\41\1\u0224\13\41\23\0"+
    "\7\41\6\0\32\41\4\0\24\41\1\u0225\6\41\23\0"+
    "\1\41\1\u0226\1\41\1\u0227\1\41\1\u0228\1\u020f\6\0"+
    "\32\41\4\0\5\41\1\u0229\25\41\114\0\1\u022a\37\0"+
    "\7\41\6\0\32\41\4\0\2\41\1\u022b\30\41\23\0"+
    "\7\41\6\0\32\41\4\0\7\41\1\u020f\23\41\23\0"+
    "\7\41\6\0\32\41\4\0\11\41\1\u022c\21\41\23\0"+
    "\7\41\6\0\32\41\4\0\14\41\1\u022d\16\41\5\0"+
    "\1\u022e\15\0\7\41\6\0\32\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\13\41\1\u022f\17\41\23\0"+
    "\7\41\6\0\32\41\4\0\23\41\1\u0230\7\41\23\0"+
    "\7\41\6\0\32\41\4\0\16\41\1\u0231\7\41\1\u0232"+
    "\4\41\23\0\7\41\6\0\32\41\4\0\24\41\1\u0233"+
    "\6\41\23\0\7\41\6\0\32\41\4\0\14\41\1\u0234"+
    "\16\41\23\0\7\41\6\0\32\41\4\0\23\41\1\u0235"+
    "\7\41\23\0\7\41\6\0\32\41\4\0\25\41\1\u0236"+
    "\5\41\23\0\7\41\6\0\32\41\4\0\25\41\1\u0237"+
    "\5\41\23\0\7\41\6\0\32\41\4\0\6\41\1\u0238"+
    "\24\41\23\0\7\41\6\0\32\41\4\0\22\41\1\u0239"+
    "\10\41\23\0\7\41\6\0\32\41\4\0\24\41\1\u023a"+
    "\6\41\23\0\7\41\6\0\32\41\4\0\11\41\1\u023b"+
    "\21\41\23\0\7\41\6\0\32\41\4\0\5\41\1\u023c"+
    "\25\41\23\0\7\41\6\0\32\41\4\0\24\41\1\u023d"+
    "\6\41\23\0\7\41\6\0\32\41\4\0\3\41\1\u023e"+
    "\27\41\23\0\7\41\6\0\32\41\4\0\23\41\1\u0238"+
    "\7\41\23\0\7\41\6\0\32\41\4\0\17\41\1\u023f"+
    "\13\41\23\0\7\41\6\0\32\41\4\0\16\41\1\u0240"+
    "\14\41\23\0\7\41\6\0\32\41\4\0\14\41\1\u01ea"+
    "\16\41\23\0\7\41\6\0\32\41\4\0\24\41\1\u0241"+
    "\6\41\23\0\7\41\6\0\32\41\4\0\4\41\1\u0242"+
    "\26\41\23\0\7\41\6\0\32\41\4\0\1\41\1\u0243"+
    "\31\41\23\0\7\41\6\0\32\41\4\0\14\41\1\u0244"+
    "\16\41\23\0\7\41\6\0\32\41\4\0\10\41\1\u01a1"+
    "\22\41\23\0\7\41\6\0\32\41\4\0\14\41\1\u0245"+
    "\16\41\42\0\1\u0246\111\0\7\41\6\0\21\41\1\u0247"+
    "\10\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\1\41\1\u0248\31\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u0249\25\41\23\0\7\41\6\0\32\41\4\0"+
    "\23\41\1\u024a\7\41\23\0\7\41\6\0\32\41\4\0"+
    "\14\41\1\u024b\16\41\23\0\7\41\6\0\32\41\4\0"+
    "\31\41\1\u0218\1\41\23\0\7\41\6\0\24\41\1\u024c"+
    "\5\41\4\0\33\41\23\0\7\41\6\0\4\41\1\u024d"+
    "\25\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\6\41\1\u013f\24\41\23\0\7\41\6\0\32\41\4\0"+
    "\14\41\1\u013f\16\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u01b5\25\41\23\0\7\41\6\0\12\41\1\u024e"+
    "\17\41\4\0\33\41\23\0\7\41\6\0\14\41\1\u024f"+
    "\15\41\4\0\33\41\23\0\7\41\6\0\23\41\1\u0250"+
    "\6\41\4\0\33\41\23\0\7\41\6\0\23\41\1\u0251"+
    "\6\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\22\41\1\u0103\10\41\23\0\7\41\6\0\1\41\1\u0252"+
    "\30\41\4\0\33\41\23\0\7\41\6\0\23\41\1\u0253"+
    "\6\41\4\0\33\41\23\0\7\41\6\0\10\41\1\u0254"+
    "\21\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\7\41\1\u0255\23\41\23\0\7\41\6\0\32\41\4\0"+
    "\3\41\1\u0256\27\41\23\0\7\41\6\0\23\41\1\u0257"+
    "\6\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u0177\25\41\23\0\7\41\6\0\32\41\4\0"+
    "\22\41\1\u0258\10\41\23\0\7\41\6\0\32\41\4\0"+
    "\24\41\1\u0259\6\41\23\0\7\41\6\0\4\41\1\u0145"+
    "\25\41\4\0\33\41\23\0\7\41\6\0\10\41\1\u025a"+
    "\21\41\4\0\33\41\5\0\1\u025b\15\0\7\41\6\0"+
    "\32\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\16\41\1\u025c\14\41\23\0\7\41\6\0\17\41\1\u025d"+
    "\12\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\31\41\1\u025e\1\41\23\0\7\41\6\0\32\41\4\0"+
    "\15\41\1\u025f\15\41\23\0\7\41\6\0\15\41\1\u0260"+
    "\14\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\14\41\1\u0261\16\41\23\0\7\41\6\0\27\41\1\u0262"+
    "\2\41\4\0\33\41\23\0\7\41\6\0\21\41\1\u01d5"+
    "\10\41\4\0\33\41\23\0\7\41\6\0\21\41\1\u0263"+
    "\10\41\4\0\33\41\5\0\1\u0264\15\0\7\41\6\0"+
    "\32\41\4\0\33\41\23\0\7\41\6\0\23\41\1\u0158"+
    "\6\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\14\41\1\u0265\16\41\23\0\7\41\6\0\10\41\1\u0266"+
    "\5\41\1\u0267\13\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\23\41\1\u0268\7\41\23\0\7\41\6\0"+
    "\32\41\4\0\1\41\1\u0269\31\41\23\0\7\41\6\0"+
    "\16\41\1\u026a\13\41\4\0\23\41\1\u026b\7\41\23\0"+
    "\7\41\6\0\32\41\4\0\17\41\1\u026c\13\41\23\0"+
    "\7\41\6\0\32\41\4\0\16\41\1\u026d\14\41\23\0"+
    "\7\41\6\0\32\41\4\0\26\41\1\u026e\4\41\23\0"+
    "\7\41\6\0\32\41\4\0\11\41\1\u026f\21\41\23\0"+
    "\7\41\6\0\21\41\1\u025d\10\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\3\41\1\u0239\27\41\23\0"+
    "\7\41\6\0\32\41\4\0\1\41\1\u0270\31\41\23\0"+
    "\7\41\6\0\32\41\4\0\17\41\1\u0271\13\41\23\0"+
    "\7\41\6\0\32\41\4\0\23\41\1\u0272\7\41\23\0"+
    "\7\41\6\0\32\41\4\0\14\41\1\u0273\5\41\1\u0274"+
    "\10\41\23\0\7\41\6\0\1\u0275\31\41\4\0\33\41"+
    "\23\0\7\41\6\0\4\41\1\u0276\25\41\4\0\33\41"+
    "\23\0\7\41\6\0\32\41\4\0\11\41\1\u0277\21\41"+
    "\23\0\7\41\6\0\32\41\4\0\5\41\1\u0218\25\41"+
    "\23\0\7\41\6\0\24\41\1\u0278\5\41\4\0\33\41"+
    "\23\0\7\41\6\0\32\41\4\0\5\41\1\u0279\25\41"+
    "\23\0\7\41\6\0\32\41\4\0\15\41\1\u0113\15\41"+
    "\23\0\7\41\6\0\16\41\1\u027a\13\41\4\0\33\41"+
    "\23\0\7\41\6\0\32\41\4\0\26\41\1\u027b\4\41"+
    "\23\0\7\41\6\0\32\41\4\0\15\41\1\u027c\15\41"+
    "\23\0\7\41\6\0\2\41\1\u027d\27\41\4\0\33\41"+
    "\23\0\7\41\6\0\32\41\4\0\5\41\1\u027e\25\41"+
    "\23\0\7\41\6\0\32\41\4\0\14\41\1\u016e\16\41"+
    "\23\0\7\41\6\0\32\41\4\0\13\41\1\u0218\17\41"+
    "\23\0\7\41\6\0\32\41\4\0\3\41\1\u027f\27\41"+
    "\23\0\7\41\6\0\4\41\1\u0280\25\41\4\0\33\41"+
    "\23\0\7\41\6\0\2\41\1\u0281\27\41\4\0\33\41"+
    "\23\0\7\41\6\0\32\41\4\0\1\41\1\u0282\31\41"+
    "\23\0\7\41\6\0\16\41\1\u0283\13\41\4\0\33\41"+
    "\23\0\7\41\6\0\32\41\4\0\5\41\1\u0284\25\41"+
    "\23\0\7\41\6\0\15\41\1\u0285\14\41\4\0\33\41"+
    "\23\0\7\41\6\0\24\41\1\u0286\5\41\4\0\33\41"+
    "\23\0\7\41\6\0\23\41\1\u0287\6\41\4\0\33\41"+
    "\23\0\7\41\6\0\32\41\4\0\7\41\1\u0221\23\41"+
    "\23\0\7\41\6\0\4\41\1\u0288\25\41\4\0\33\41"+
    "\23\0\7\41\6\0\4\41\1\u0289\25\41\4\0\33\41"+
    "\23\0\7\41\6\0\32\41\4\0\16\41\1\u028a\14\41"+
    "\23\0\7\41\6\0\4\41\1\u028b\25\41\4\0\33\41"+
    "\23\0\7\41\6\0\32\41\4\0\5\41\1\u028c\25\41"+
    "\23\0\7\41\6\0\32\41\4\0\22\41\1\u028d\10\41"+
    "\23\0\7\41\6\0\32\41\4\0\22\41\1\u028e\10\41"+
    "\23\0\7\41\6\0\32\41\4\0\3\41\1\u028f\27\41"+
    "\23\0\7\41\6\0\32\41\4\0\24\41\1\u028f\6\41"+
    "\23\0\7\41\6\0\32\41\4\0\5\41\1\u0290\25\41"+
    "\23\0\7\41\6\0\32\41\4\0\13\41\1\u0118\17\41"+
    "\23\0\7\41\6\0\32\41\4\0\10\41\1\u0258\22\41"+
    "\23\0\7\41\6\0\32\41\4\0\23\41\1\u0291\7\41"+
    "\23\0\7\41\6\0\32\41\4\0\14\41\1\u0292\16\41"+
    "\23\0\7\41\6\0\32\41\4\0\24\41\1\u0293\6\41"+
    "\23\0\7\41\6\0\32\41\4\0\11\41\1\u0294\21\41"+
    "\23\0\7\41\6\0\32\41\4\0\15\41\1\u0295\15\41"+
    "\23\0\7\41\6\0\32\41\4\0\25\41\1\u0296\5\41"+
    "\23\0\7\41\6\0\32\41\4\0\20\41\1\u0297\12\41"+
    "\23\0\7\41\6\0\32\41\4\0\16\41\1\u0298\14\41"+
    "\23\0\7\41\6\0\32\41\4\0\14\41\1\u0299\16\41"+
    "\23\0\7\41\6\0\32\41\4\0\24\41\1\u029a\6\41"+
    "\23\0\7\41\6\0\32\41\4\0\1\41\1\163\31\41"+
    "\23\0\7\41\6\0\32\41\4\0\1\41\1\u029b\31\41"+
    "\23\0\7\41\6\0\32\41\4\0\5\41\1\u029c\25\41"+
    "\23\0\7\41\6\0\32\41\4\0\22\41\1\u029d\10\41"+
    "\23\0\7\41\6\0\32\41\4\0\1\41\1\u029e\31\41"+
    "\23\0\5\41\1\u020f\1\41\6\0\32\41\4\0\33\41"+
    "\23\0\2\41\1\u020f\4\41\6\0\32\41\4\0\33\41"+
    "\23\0\4\41\1\u020f\2\41\6\0\32\41\4\0\33\41"+
    "\23\0\7\41\6\0\32\41\4\0\22\41\1\u029f\10\41"+
    "\115\0\1\u02a0\36\0\7\41\6\0\32\41\4\0\4\41"+
    "\1\u02a1\26\41\23\0\7\41\6\0\32\41\4\0\26\41"+
    "\1\u02a2\4\41\23\0\7\41\6\0\32\41\4\0\17\41"+
    "\1\u02a3\13\41\107\0\1\u02a4\44\0\7\41\6\0\32\41"+
    "\4\0\1\41\1\u02a5\31\41\23\0\7\41\6\0\32\41"+
    "\4\0\24\41\1\u02a6\6\41\23\0\7\41\6\0\32\41"+
    "\4\0\1\41\1\u02a7\31\41\23\0\7\41\6\0\32\41"+
    "\4\0\5\41\1\u02a8\25\41\23\0\7\41\6\0\32\41"+
    "\4\0\11\41\1\u02a9\21\41\23\0\7\41\6\0\32\41"+
    "\4\0\5\41\1\u0258\25\41\23\0\7\41\6\0\32\41"+
    "\4\0\11\41\1\u02aa\21\41\23\0\7\41\6\0\32\41"+
    "\4\0\22\41\1\u02ab\10\41\23\0\7\41\6\0\32\41"+
    "\4\0\24\41\1\u020f\6\41\23\0\7\41\6\0\32\41"+
    "\4\0\11\41\1\u02ac\21\41\23\0\7\41\6\0\32\41"+
    "\4\0\3\41\1\u02ad\12\41\1\u018a\14\41\23\0\7\41"+
    "\6\0\32\41\4\0\22\41\1\u02ae\10\41\23\0\7\41"+
    "\6\0\32\41\4\0\3\41\1\u02af\27\41\23\0\7\41"+
    "\6\0\32\41\4\0\10\41\1\u02b0\22\41\23\0\7\41"+
    "\6\0\32\41\4\0\27\41\1\u02b1\3\41\23\0\7\41"+
    "\6\0\32\41\4\0\23\41\1\u02b2\7\41\23\0\1\41"+
    "\1\u0226\1\41\1\u0227\1\41\1\u0228\1\u020f\6\0\32\41"+
    "\4\0\33\41\23\0\7\41\6\0\32\41\4\0\24\41"+
    "\1\u02b3\6\41\23\0\7\41\6\0\32\41\4\0\5\41"+
    "\1\u02b4\25\41\23\0\7\41\6\0\32\41\4\0\4\41"+
    "\1\u02b5\26\41\56\0\1\u02b6\75\0\7\41\6\0\32\41"+
    "\4\0\16\41\1\u02b7\14\41\23\0\7\41\6\0\32\41"+
    "\4\0\23\41\1\u02b8\7\41\23\0\7\41\6\0\32\41"+
    "\4\0\23\41\1\u02b9\7\41\23\0\7\41\6\0\17\41"+
    "\1\u02ba\12\41\4\0\33\41\23\0\7\41\6\0\4\41"+
    "\1\u02bb\25\41\4\0\33\41\23\0\7\41\6\0\15\41"+
    "\1\u02bc\14\41\4\0\33\41\23\0\7\41\6\0\21\41"+
    "\1\u02bd\10\41\4\0\33\41\23\0\7\41\6\0\4\41"+
    "\1\u018c\25\41\4\0\33\41\23\0\7\41\6\0\1\u02be"+
    "\31\41\4\0\33\41\23\0\7\41\6\0\4\41\1\u0177"+
    "\25\41\4\0\33\41\23\0\7\41\6\0\15\41\1\u02bf"+
    "\14\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\1\41\1\u02c0\31\41\23\0\7\41\6\0\32\41\4\0"+
    "\24\41\1\u015c\6\41\23\0\7\41\6\0\22\41\1\362"+
    "\7\41\4\0\33\41\23\0\7\41\6\0\6\41\1\u02c1"+
    "\23\41\4\0\33\41\56\0\1\u02c2\75\0\7\41\6\0"+
    "\32\41\4\0\4\41\1\u013f\26\41\5\0\1\u02c3\15\0"+
    "\7\41\6\0\32\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\20\41\1\u02c4\12\41\23\0\7\41\6\0"+
    "\32\41\4\0\14\41\1\u02c5\16\41\23\0\7\41\6\0"+
    "\6\41\1\u0289\23\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u02c6\25\41\23\0\7\41\6\0"+
    "\23\41\1\u01d3\6\41\4\0\33\41\51\0\1\u02c7\102\0"+
    "\7\41\6\0\32\41\4\0\5\41\1\u02c8\25\41\23\0"+
    "\7\41\6\0\32\41\4\0\16\41\1\u02c9\14\41\23\0"+
    "\7\41\6\0\32\41\4\0\26\41\1\u02ca\4\41\23\0"+
    "\7\41\6\0\32\41\4\0\5\41\1\u02ae\25\41\23\0"+
    "\7\41\6\0\32\41\4\0\23\41\1\u02cb\7\41\23\0"+
    "\7\41\6\0\32\41\4\0\6\41\1\u02cc\24\41\23\0"+
    "\7\41\6\0\32\41\4\0\20\41\1\u02cd\12\41\23\0"+
    "\7\41\6\0\32\41\4\0\27\41\1\u028a\3\41\23\0"+
    "\7\41\6\0\32\41\4\0\10\41\1\u02ce\22\41\23\0"+
    "\7\41\6\0\32\41\4\0\5\41\1\u02cf\25\41\23\0"+
    "\7\41\6\0\32\41\4\0\16\41\1\u02d0\14\41\23\0"+
    "\7\41\6\0\32\41\4\0\24\41\1\u02d1\6\41\23\0"+
    "\7\41\6\0\32\41\4\0\16\41\1\u02d2\14\41\23\0"+
    "\7\41\6\0\32\41\4\0\5\41\1\330\25\41\23\0"+
    "\7\41\6\0\32\41\4\0\17\41\1\u02d3\13\41\23\0"+
    "\7\41\6\0\32\41\4\0\11\41\1\u02d4\21\41\23\0"+
    "\7\41\6\0\21\41\1\u02d5\10\41\4\0\33\41\23\0"+
    "\7\41\6\0\3\41\1\u02d6\26\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\1\41\1\u02d7\31\41\23\0"+
    "\7\41\6\0\14\41\1\u0158\15\41\4\0\33\41\23\0"+
    "\7\41\6\0\4\41\1\u02d8\25\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\16\41\1\u02d9\14\41\23\0"+
    "\7\41\6\0\32\41\4\0\5\41\1\u02da\25\41\23\0"+
    "\7\41\6\0\32\41\4\0\5\41\1\u01fa\25\41\23\0"+
    "\7\41\6\0\23\41\1\u02db\6\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\4\41\1\u02dc\26\41\23\0"+
    "\7\41\6\0\32\41\4\0\24\41\1\u02dd\6\41\23\0"+
    "\7\41\6\0\1\u01bd\31\41\4\0\33\41\23\0\7\41"+
    "\6\0\32\41\4\0\23\41\1\u0103\7\41\23\0\7\41"+
    "\6\0\32\41\4\0\6\41\1\u02de\24\41\23\0\7\41"+
    "\6\0\32\41\4\0\7\41\1\u02df\23\41\5\0\1\u02e0"+
    "\15\0\7\41\6\0\32\41\4\0\33\41\23\0\7\41"+
    "\6\0\4\41\1\u024e\25\41\4\0\33\41\23\0\7\41"+
    "\6\0\4\41\1\u014e\25\41\4\0\33\41\23\0\7\41"+
    "\6\0\22\41\1\u01d3\7\41\4\0\33\41\23\0\7\41"+
    "\6\0\32\41\4\0\11\41\1\146\21\41\23\0\7\41"+
    "\6\0\32\41\4\0\26\41\1\u02e1\4\41\23\0\7\41"+
    "\6\0\16\41\1\u02e2\13\41\4\0\33\41\23\0\7\41"+
    "\6\0\32\41\4\0\1\41\1\u02e3\31\41\23\0\7\41"+
    "\6\0\32\41\4\0\24\41\1\u01a1\6\41\23\0\7\41"+
    "\6\0\32\41\4\0\1\41\1\u02e4\31\41\23\0\7\41"+
    "\6\0\32\41\4\0\5\41\1\u02e5\25\41\23\0\7\41"+
    "\6\0\32\41\4\0\16\41\1\u02e6\14\41\23\0\7\41"+
    "\6\0\32\41\4\0\1\41\1\u02e7\31\41\23\0\7\41"+
    "\6\0\32\41\4\0\14\41\1\u02e8\16\41\23\0\7\41"+
    "\6\0\32\41\4\0\24\41\1\u0258\6\41\23\0\7\41"+
    "\6\0\32\41\4\0\4\41\1\u02e9\26\41\23\0\7\41"+
    "\6\0\32\41\4\0\14\41\1\u02ea\16\41\23\0\3\41"+
    "\1\u0227\1\41\1\u0228\1\41\6\0\32\41\4\0\33\41"+
    "\23\0\7\41\6\0\32\41\4\0\14\41\1\u02dc\16\41"+
    "\23\0\7\41\6\0\32\41\4\0\15\41\1\u02eb\15\41"+
    "\23\0\7\41\6\0\32\41\4\0\24\41\1\u0221\6\41"+
    "\23\0\7\41\6\0\32\41\4\0\16\41\1\u02ec\14\41"+
    "\23\0\7\41\6\0\32\41\4\0\6\41\1\u02ed\24\41"+
    "\122\0\1\u02ee\31\0\7\41\6\0\32\41\4\0\1\41"+
    "\1\u02ef\31\41\23\0\7\41\6\0\32\41\4\0\5\41"+
    "\1\u0221\25\41\23\0\7\41\6\0\32\41\4\0\3\41"+
    "\1\u0222\27\41\114\0\1\u02f0\37\0\7\41\6\0\32\41"+
    "\4\0\7\41\1\u02f1\23\41\23\0\7\41\6\0\32\41"+
    "\4\0\24\41\1\u02f2\6\41\23\0\7\41\6\0\32\41"+
    "\4\0\3\41\1\u02f3\27\41\23\0\7\41\6\0\32\41"+
    "\4\0\3\41\1\u02dc\27\41\23\0\7\41\6\0\32\41"+
    "\4\0\22\41\1\u02f4\10\41\23\0\7\41\6\0\32\41"+
    "\4\0\16\41\1\u02b5\14\41\23\0\7\41\6\0\32\41"+
    "\4\0\3\41\1\u0293\27\41\23\0\7\41\6\0\32\41"+
    "\4\0\24\41\1\u02f5\6\41\23\0\7\41\6\0\32\41"+
    "\4\0\10\41\1\u02f6\22\41\23\0\7\41\6\0\32\41"+
    "\4\0\22\41\1\u02f7\10\41\23\0\7\41\6\0\32\41"+
    "\4\0\23\41\1\210\7\41\23\0\7\41\6\0\32\41"+
    "\4\0\11\41\1\u02f8\21\41\23\0\7\41\6\0\32\41"+
    "\4\0\11\41\1\u02f9\21\41\55\0\1\u02fa\76\0\7\41"+
    "\6\0\32\41\4\0\4\41\1\u02fb\26\41\23\0\7\41"+
    "\6\0\32\41\4\0\23\41\1\u02fc\7\41\23\0\7\41"+
    "\6\0\32\41\4\0\17\41\1\330\13\41\23\0\7\41"+
    "\6\0\15\41\1\u02fd\14\41\4\0\33\41\23\0\7\41"+
    "\6\0\1\u02fe\31\41\4\0\33\41\23\0\7\41\6\0"+
    "\22\41\1\u02ff\7\41\4\0\33\41\23\0\7\41\6\0"+
    "\2\41\1\u01d6\27\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\24\41\1\u0300\6\41\23\0\7\41\6\0"+
    "\15\41\1\u0301\14\41\4\0\33\41\64\0\1\u0302\105\0"+
    "\1\u0303\112\0\7\41\6\0\32\41\4\0\5\41\1\u02cc"+
    "\25\41\23\0\7\41\6\0\15\41\1\u0304\14\41\4\0"+
    "\33\41\23\0\7\41\6\0\32\41\4\0\23\41\1\u0305"+
    "\7\41\56\0\1\u0306\75\0\7\41\6\0\32\41\4\0"+
    "\10\41\1\u0307\22\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u0308\25\41\23\0\7\41\6\0\32\41\4\0"+
    "\1\41\1\u0309\31\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u030a\25\41\23\0\7\41\6\0\32\41\4\0"+
    "\22\41\1\u030b\10\41\23\0\7\41\6\0\32\41\4\0"+
    "\7\41\1\u01dd\23\41\23\0\7\41\6\0\32\41\4\0"+
    "\17\41\1\u030c\13\41\23\0\7\41\6\0\32\41\4\0"+
    "\1\41\1\u030d\31\41\23\0\7\41\6\0\32\41\4\0"+
    "\4\41\1\u030e\26\41\23\0\7\41\6\0\30\41\1\u0301"+
    "\1\41\4\0\33\41\23\0\7\41\6\0\24\41\1\u030f"+
    "\5\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\14\41\1\u0310\16\41\23\0\7\41\6\0\32\41\4\0"+
    "\26\41\1\u0311\4\41\23\0\7\41\6\0\32\41\4\0"+
    "\14\41\1\u0312\16\41\23\0\7\41\6\0\7\41\1\u0313"+
    "\22\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\25\41\1\u0314\5\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u0171\25\41\40\0\1\u0315\113\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u0316\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\16\41\1\u0317\14\41\23\0\7\41\6\0"+
    "\32\41\4\0\3\41\1\u0214\27\41\23\0\7\41\6\0"+
    "\32\41\4\0\16\41\1\u020f\14\41\23\0\7\41\6\0"+
    "\32\41\4\0\30\41\1\u0318\2\41\23\0\7\41\6\0"+
    "\32\41\4\0\25\41\1\u0319\5\41\23\0\7\41\6\0"+
    "\32\41\4\0\14\41\1\u020f\16\41\23\0\7\41\6\0"+
    "\32\41\4\0\24\41\1\u02dc\6\41\23\0\7\41\6\0"+
    "\32\41\4\0\23\41\1\u031a\7\41\23\0\7\41\6\0"+
    "\32\41\4\0\31\41\1\u01fa\1\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u031b\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\3\41\1\u031c\27\41\23\0\7\41\6\0"+
    "\32\41\4\0\1\41\1\u031d\31\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u031e\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u02dc\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\24\41\1\u01f2\6\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u031f\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\6\41\1\u0320\24\41\23\0\7\41\6\0"+
    "\32\41\4\0\17\41\1\u0321\13\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u0322\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\14\41\1\u0323\16\41\62\0\1\u0324\71\0"+
    "\7\41\6\0\32\41\4\0\14\41\1\u0325\16\41\23\0"+
    "\7\41\6\0\16\41\1\u0326\13\41\4\0\33\41\23\0"+
    "\7\41\6\0\10\41\1\u0327\21\41\4\0\33\41\23\0"+
    "\7\41\6\0\4\41\1\u0328\25\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\5\41\1\210\25\41\5\0"+
    "\1\u0329\15\0\7\41\6\0\32\41\4\0\33\41\63\0"+
    "\1\u032a\135\0\1\u032b\63\0\7\41\6\0\32\41\4\0"+
    "\1\41\1\u032c\31\41\50\0\1\u032d\103\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u032e\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\22\41\1\u032f\10\41\23\0\7\41\6\0"+
    "\32\41\4\0\3\41\1\u0330\27\41\23\0\7\41\6\0"+
    "\32\41\4\0\22\41\1\u0331\10\41\23\0\7\41\6\0"+
    "\32\41\4\0\22\41\1\u0332\10\41\23\0\7\41\6\0"+
    "\32\41\4\0\22\41\1\u0333\10\41\23\0\7\41\6\0"+
    "\32\41\4\0\4\41\1\u0334\26\41\23\0\7\41\6\0"+
    "\32\41\4\0\1\41\1\u0335\3\41\1\u0336\25\41\23\0"+
    "\7\41\6\0\21\41\1\u0337\10\41\4\0\33\41\23\0"+
    "\7\41\6\0\32\41\4\0\5\41\1\u0338\25\41\23\0"+
    "\7\41\6\0\32\41\4\0\31\41\1\u0293\1\41\23\0"+
    "\7\41\6\0\32\41\4\0\1\41\1\u0339\31\41\23\0"+
    "\7\41\6\0\32\41\4\0\22\41\1\u033a\10\41\53\0"+
    "\1\u033b\100\0\7\41\6\0\32\41\4\0\16\41\1\u033c"+
    "\14\41\23\0\7\41\6\0\32\41\4\0\14\41\1\u033d"+
    "\16\41\23\0\1\41\1\u033e\3\41\1\u0228\1\41\6\0"+
    "\32\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u033f\25\41\23\0\7\41\6\0\32\41\4\0"+
    "\16\41\1\u0340\14\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u0341\25\41\23\0\7\41\6\0\32\41\4\0"+
    "\3\41\1\u0342\27\41\23\0\7\41\6\0\32\41\4\0"+
    "\23\41\1\u0221\7\41\23\0\7\41\6\0\32\41\4\0"+
    "\20\41\1\u013f\12\41\23\0\7\41\6\0\32\41\4\0"+
    "\16\41\1\u0343\14\41\23\0\7\41\6\0\32\41\4\0"+
    "\16\41\1\u0214\14\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u0293\25\41\63\0\1\u0344\70\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u0345\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\6\41\1\210\24\41\23\0\7\41\6\0"+
    "\15\41\1\u0346\14\41\4\0\33\41\52\0\1\u0347\122\0"+
    "\1\u0348\107\0\7\41\6\0\32\41\4\0\15\41\1\u0349"+
    "\15\41\55\0\1\u034a\76\0\7\41\6\0\32\41\4\0"+
    "\22\41\1\u034b\10\41\23\0\7\41\6\0\32\41\4\0"+
    "\22\41\1\u034c\10\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u034d\25\41\23\0\7\41\6\0\32\41\4\0"+
    "\11\41\1\u034e\21\41\23\0\7\41\6\0\32\41\4\0"+
    "\11\41\1\u034f\21\41\23\0\7\41\6\0\32\41\4\0"+
    "\23\41\1\u013f\7\41\23\0\7\41\6\0\32\41\4\0"+
    "\2\41\1\u02f9\30\41\23\0\7\41\6\0\32\41\4\0"+
    "\23\41\1\u0293\7\41\23\0\7\41\6\0\4\41\1\u0155"+
    "\25\41\4\0\33\41\23\0\7\41\6\0\32\41\4\0"+
    "\16\41\1\u0297\14\41\23\0\7\41\6\0\32\41\4\0"+
    "\16\41\1\u0350\14\41\23\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u0351\25\41\53\0\1\u0352\100\0\7\41\6\0"+
    "\32\41\4\0\24\41\1\u0334\6\41\23\0\7\41\6\0"+
    "\32\41\4\0\31\41\1\u013f\1\41\23\0\2\41\1\u0353"+
    "\4\41\6\0\32\41\4\0\33\41\23\0\7\41\6\0"+
    "\32\41\4\0\24\41\1\u0354\6\41\23\0\7\41\6\0"+
    "\32\41\4\0\17\41\1\u0355\13\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u0356\25\41\23\0\7\41\6\0"+
    "\32\41\4\0\11\41\1\u0357\21\41\61\0\1\u0358\72\0"+
    "\7\41\6\0\32\41\4\0\22\41\1\u0305\10\41\23\0"+
    "\7\41\6\0\23\41\1\u024e\6\41\4\0\33\41\44\0"+
    "\1\u0359\145\0\1\u035a\72\0\7\41\6\0\32\41\4\0"+
    "\5\41\1\u035b\25\41\23\0\7\41\6\0\32\41\4\0"+
    "\11\41\1\u0214\21\41\23\0\7\41\6\0\32\41\4\0"+
    "\11\41\1\u035c\21\41\23\0\7\41\6\0\32\41\4\0"+
    "\24\41\1\u035d\6\41\23\0\7\41\6\0\32\41\4\0"+
    "\4\41\1\u035d\26\41\23\0\7\41\6\0\32\41\4\0"+
    "\4\41\1\u035e\26\41\23\0\6\41\1\u020f\6\0\32\41"+
    "\4\0\33\41\23\0\7\41\6\0\32\41\4\0\23\41"+
    "\1\u035f\7\41\23\0\7\41\6\0\32\41\4\0\6\41"+
    "\1\u0360\24\41\23\0\7\41\6\0\32\41\4\0\32\41"+
    "\1\u0361\40\0\1\u0362\160\0\1\u0363\45\0\1\u0264\146\0"+
    "\7\41\6\0\32\41\4\0\23\41\1\u0364\7\41\23\0"+
    "\7\41\6\0\32\41\4\0\4\41\1\u0323\26\41\23\0"+
    "\7\41\6\0\32\41\4\0\1\41\1\u0365\31\41\23\0"+
    "\7\41\6\0\32\41\4\0\14\41\1\u0366\16\41\23\0"+
    "\7\41\6\0\32\41\4\0\5\41\1\u0367\25\41\50\0"+
    "\1\u0368\103\0\7\41\6\0\32\41\4\0\20\41\1\u0369"+
    "\12\41\23\0\7\41\6\0\32\41\4\0\2\41\1\u036a"+
    "\30\41\23\0\7\41\6\0\32\41\4\0\5\41\1\u036b"+
    "\25\41\23\0\7\41\6\0\32\41\4\0\4\41\1\u0293"+
    "\26\41\55\0\1\u036c\76\0\7\41\6\0\32\41\4\0"+
    "\1\41\1\u036d\31\41\23\0\7\41\6\0\32\41\4\0"+
    "\14\41\1\u036e\16\41\23\0\7\41\6\0\32\41\4\0"+
    "\22\41\1\u0177\10\41\63\0\1\u036f\70\0\7\41\6\0"+
    "\32\41\4\0\3\41\1\u02c4\27\41\23\0\7\41\6\0"+
    "\32\41\4\0\5\41\1\u013f\25\41\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[68530];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\2\11\2\1\2\11"+
    "\2\1\2\11\34\1\2\11\24\1\1\11\1\1\3\11"+
    "\1\0\3\11\1\0\3\11\2\0\2\11\231\1\1\0"+
    "\230\1\1\0\40\1\1\0\200\1\1\0\3\1\1\0"+
    "\27\1\1\0\24\1\1\0\10\1\1\0\73\1\1\0"+
    "\3\1\1\0\21\1\1\0\13\1\2\0\3\1\1\0"+
    "\30\1\1\0\15\1\1\11\1\1\1\11\11\1\1\0"+
    "\7\1\2\0\2\1\1\0\16\1\1\0\16\1\1\0"+
    "\4\1\2\0\1\11\1\1\1\0\15\1\1\0\10\1"+
    "\1\0\2\1\2\0\1\1\1\11\7\1\1\11\5\1"+
    "\3\0\7\1\1\0\1\11\4\1\1\0\3\1\1\0"+
    "\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[879];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int _numberTokens = 0;
    private boolean _thereIsTokens = false;
    private HashMap<String, Integer> identifiers = new HashMap<String, Integer>();
    
    public boolean thereIsTokens() {return this._thereIsTokens;}
    public int numberTokens() {return this._numberTokens;}
    public HashMap<String, Integer> getIdentifiers() {return this.identifiers;}

    // Creates and returns a Token Object
    private Token foundSymbol(String token, String lexeme, int line, int column) {
        this._thereIsTokens = true;
        this._numberTokens++;

        // value given lexeme as a key
        Integer value = identifiers.get(lexeme);
        Integer size = identifiers.size();
        
        // Logic for storing identifiers in the Hashmap
        if (token == "Identificador") {
            if (value == null) {
                identifiers.put(lexeme, size);
                lexeme = size.toString();
            } else {
                lexeme = value.toString();
            }
        }   

        Token t = new Token(token, lexeme, line, column);
        return t;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    this._thereIsTokens = false;
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignore unmatched characters */
            }
          // fall through
          case 111: break;
          case 2:
            { return foundSymbol("Negacion", "", yyline, yycolumn);
            }
          // fall through
          case 112: break;
          case 3:
            { return foundSymbol("Comentario en linea", yytext(), yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 4:
            { return foundSymbol("Operador Aritmetico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 114: break;
          case 5:
            { return foundSymbol("Operador de Bits", yytext(), yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 6:
            { return foundSymbol("Parentesis Izquierdo", "", yyline, yycolumn);
            }
          // fall through
          case 116: break;
          case 7:
            { return foundSymbol("Parentesis Derecho", "", yyline, yycolumn);
            }
          // fall through
          case 117: break;
          case 8:
            { return foundSymbol("Coma", "", yyline, yycolumn);
            }
          // fall through
          case 118: break;
          case 9:
            { return foundSymbol("Punto", "", yyline, yycolumn);
            }
          // fall through
          case 119: break;
          case 10:
            { return foundSymbol("Entero", yytext(), yyline, yycolumn);
            }
          // fall through
          case 120: break;
          case 11:
            { return foundSymbol("Dos puntos", "", yyline, yycolumn);
            }
          // fall through
          case 121: break;
          case 12:
            { return foundSymbol("Punto y coma", "", yyline, yycolumn);
            }
          // fall through
          case 122: break;
          case 13:
            { return foundSymbol("Comparador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 123: break;
          case 14:
            { return foundSymbol("Asignador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 124: break;
          case 15:
            { return foundSymbol("Operador Ternario", "", yyline, yycolumn);
            }
          // fall through
          case 125: break;
          case 16:
            { return foundSymbol("Identificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 126: break;
          case 17:
            { return foundSymbol("Corchete Izquierdo", "", yyline, yycolumn);
            }
          // fall through
          case 127: break;
          case 18:
            { return foundSymbol("Corchete Derecho", "", yyline, yycolumn);
            }
          // fall through
          case 128: break;
          case 19:
            { return foundSymbol("Llave Izquierda", "", yyline, yycolumn);
            }
          // fall through
          case 129: break;
          case 20:
            { return foundSymbol("Llave Derecha", "", yyline, yycolumn);
            }
          // fall through
          case 130: break;
          case 21:
            { return foundSymbol("Cadena", yytext(), yyline, yycolumn);
            }
          // fall through
          case 131: break;
          case 22:
            { return foundSymbol("Operador Logico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 132: break;
          case 23:
            { return foundSymbol("Caracter", yytext(), yyline, yycolumn);
            }
          // fall through
          case 133: break;
          case 24:
            { return foundSymbol("Termina comentario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 134: break;
          case 25:
            { return foundSymbol("Inicia comentario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 135: break;
          case 26:
            { return foundSymbol("Complejo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 136: break;
          case 27:
            { return foundSymbol("Operador Nulo", "", yyline, yycolumn);
            }
          // fall through
          case 137: break;
          case 28:
            { return foundSymbol("Referencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 138: break;
          case 29:
            { return foundSymbol("Of", "", yyline, yycolumn);
            }
          // fall through
          case 139: break;
          case 30:
            { return foundSymbol("Renombrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 140: break;
          case 31:
            { return foundSymbol("Ciclo Do", "", yyline, yycolumn);
            }
          // fall through
          case 141: break;
          case 32:
            { return foundSymbol("Condicional", "", yyline, yycolumn);
            }
          // fall through
          case 142: break;
          case 33:
            { return foundSymbol("Operador de Pertenencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 143: break;
          case 34:
            { return foundSymbol("Operador de identidad", yytext(), yyline, yycolumn);
            }
          // fall through
          case 144: break;
          case 35:
            { return foundSymbol("Decimal", yytext(), yyline, yycolumn);
            }
          // fall through
          case 145: break;
          case 36:
            { return foundSymbol("Añadir", yytext(), yyline, yycolumn);
            }
          // fall through
          case 146: break;
          case 37:
            { return foundSymbol("Condiciones Query", yytext(), yyline, yycolumn);
            }
          // fall through
          case 147: break;
          case 38:
            { return foundSymbol("Ordenar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 148: break;
          case 39:
            { return foundSymbol("Almacenamiento", yytext(), yyline, yycolumn);
            }
          // fall through
          case 149: break;
          case 40:
            { return foundSymbol("Salida", yytext(), yyline, yycolumn);
            }
          // fall through
          case 150: break;
          case 41:
            { return foundSymbol("Get", yytext(), yyline, yycolumn);
            }
          // fall through
          case 151: break;
          case 42:
            { return foundSymbol("Variable", yytext(), yyline, yycolumn);
            }
          // fall through
          case 152: break;
          case 43:
            { return foundSymbol("Modificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 153: break;
          case 44:
            { return foundSymbol("Comentario especial", yytext(), yyline, yycolumn);
            }
          // fall through
          case 154: break;
          case 45:
            { return foundSymbol("Update", yytext(), yyline, yycolumn);
            }
          // fall through
          case 155: break;
          case 46:
            { return foundSymbol("Funcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 156: break;
          case 47:
            { return foundSymbol("Limite", yytext(), yyline, yycolumn);
            }
          // fall through
          case 157: break;
          case 48:
            { return foundSymbol("Borrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 158: break;
          case 49:
            { return foundSymbol("Ciclo For", "", yyline, yycolumn);
            }
          // fall through
          case 159: break;
          case 50:
            { return foundSymbol("Tipo de dato", yytext(), yyline, yycolumn);
            }
          // fall through
          case 160: break;
          case 51:
            { return foundSymbol("Crear", yytext(), yyline, yycolumn);
            }
          // fall through
          case 161: break;
          case 52:
            { return foundSymbol("Intentar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 162: break;
          case 53:
            { return foundSymbol("Cast", yytext(), yyline, yycolumn);
            }
          // fall through
          case 163: break;
          case 54:
            { return foundSymbol("Ejecutar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 164: break;
          case 55:
            { return foundSymbol("Iterador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 165: break;
          case 56:
            { return foundSymbol("GoTo", "", yyline, yycolumn);
            }
          // fall through
          case 166: break;
          case 57:
            { return foundSymbol("Insertar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 167: break;
          case 58:
            { return foundSymbol("Join", yytext(), yyline, yycolumn);
            }
          // fall through
          case 168: break;
          case 59:
            { return foundSymbol("Valor nulo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 169: break;
          case 60:
            { return foundSymbol("Incremento", "", yyline, yycolumn);
            }
          // fall through
          case 170: break;
          case 61:
            { return foundSymbol("Debug", "", yyline, yycolumn);
            }
          // fall through
          case 171: break;
          case 62:
            { return foundSymbol("Consecuencia Itentar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 172: break;
          case 63:
            { return foundSymbol("Booleano", yytext(), yyline, yycolumn);
            }
          // fall through
          case 173: break;
          case 64:
            { return foundSymbol("Vista", "", yyline, yycolumn);
            }
          // fall through
          case 174: break;
          case 65:
            { return foundSymbol("Case", "", yyline, yycolumn);
            }
          // fall through
          case 175: break;
          case 66:
            { return foundSymbol("Estructura de datos", yytext(), yyline, yycolumn);
            }
          // fall through
          case 176: break;
          case 67:
            { return foundSymbol("Consecuencia Condicional", "", yyline, yycolumn);
            }
          // fall through
          case 177: break;
          case 68:
            { return foundSymbol("Consequencia", "", yyline, yycolumn);
            }
          // fall through
          case 178: break;
          case 69:
            { return foundSymbol("Enum", "", yyline, yycolumn);
            }
          // fall through
          case 179: break;
          case 70:
            { return foundSymbol("Importar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 180: break;
          case 71:
            { return foundSymbol("Pass", "", yyline, yycolumn);
            }
          // fall through
          case 181: break;
          case 72:
            { return foundSymbol("This", yytext(), yyline, yycolumn);
            }
          // fall through
          case 182: break;
          case 73:
            { return foundSymbol("Void", "", yyline, yycolumn);
            }
          // fall through
          case 183: break;
          case 74:
            { return foundSymbol("Alterar", "", yyline, yycolumn);
            }
          // fall through
          case 184: break;
          case 75:
            { return foundSymbol("Restriccion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 185: break;
          case 76:
            { return foundSymbol("Excepcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 186: break;
          case 77:
            { return foundSymbol("Evento", "", yyline, yycolumn);
            }
          // fall through
          case 187: break;
          case 78:
            { return foundSymbol("Indice", "", yyline, yycolumn);
            }
          // fall through
          case 188: break;
          case 79:
            { return foundSymbol("Tabla", "", yyline, yycolumn);
            }
          // fall through
          case 189: break;
          case 80:
            { return foundSymbol("Union", yytext(), yyline, yycolumn);
            }
          // fall through
          case 190: break;
          case 81:
            { return foundSymbol("Query Condicional", yytext(), yyline, yycolumn);
            }
          // fall through
          case 191: break;
          case 82:
            { return foundSymbol("Asyncrono", yytext(), yyline, yycolumn);
            }
          // fall through
          case 192: break;
          case 83:
            { return foundSymbol("Clase", "", yyline, yycolumn);
            }
          // fall through
          case 193: break;
          case 84:
            { return foundSymbol("Modificador de No Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 194: break;
          case 85:
            { return foundSymbol("Imprimir", "", yyline, yycolumn);
            }
          // fall through
          case 195: break;
          case 86:
            { return foundSymbol("Clase Padre", yytext(), yyline, yycolumn);
            }
          // fall through
          case 196: break;
          case 87:
            { return foundSymbol("Ciclo While", "", yyline, yycolumn);
            }
          // fall through
          case 197: break;
          case 88:
            { return foundSymbol("Regresar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 198: break;
          case 89:
            { return foundSymbol("Backup", "", yyline, yycolumn);
            }
          // fall through
          case 199: break;
          case 90:
            { return foundSymbol("Columna", "", yyline, yycolumn);
            }
          // fall through
          case 200: break;
          case 91:
            { return foundSymbol("Module", "", yyline, yycolumn);
            }
          // fall through
          case 201: break;
          case 92:
            { return foundSymbol("Opcion", "", yyline, yycolumn);
            }
          // fall through
          case 202: break;
          case 93:
            { return foundSymbol("Select", "", yyline, yycolumn);
            }
          // fall through
          case 203: break;
          case 94:
            { return foundSymbol("Modificador de Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 204: break;
          case 95:
            { return foundSymbol("Operador de typo", "", yyline, yycolumn);
            }
          // fall through
          case 205: break;
          case 96:
            { return foundSymbol("Lamda", "", yyline, yycolumn);
            }
          // fall through
          case 206: break;
          case 97:
            { return foundSymbol("Switch", "", yyline, yycolumn);
            }
          // fall through
          case 207: break;
          case 98:
            { return foundSymbol("Rango", "", yyline, yycolumn);
            }
          // fall through
          case 208: break;
          case 99:
            { return foundSymbol("AddHandler", yytext(), yyline, yycolumn);
            }
          // fall through
          case 209: break;
          case 100:
            { return foundSymbol("Parcial", "", yyline, yycolumn);
            }
          // fall through
          case 210: break;
          case 101:
            { return foundSymbol("Extiende", "", yyline, yycolumn);
            }
          // fall through
          case 211: break;
          case 102:
            { return foundSymbol("Paquete", "", yyline, yycolumn);
            }
          // fall through
          case 212: break;
          case 103:
            { return foundSymbol("Database", "", yyline, yycolumn);
            }
          // fall through
          case 213: break;
          case 104:
            { return foundSymbol("Operador de VB", "", yyline, yycolumn);
            }
          // fall through
          case 214: break;
          case 105:
            { return foundSymbol("Continuar", "", yyline, yycolumn);
            }
          // fall through
          case 215: break;
          case 106:
            { return foundSymbol("Namespace", "", yyline, yycolumn);
            }
          // fall through
          case 216: break;
          case 107:
            { return foundSymbol("Estructura", "", yyline, yycolumn);
            }
          // fall through
          case 217: break;
          case 108:
            { return foundSymbol("Interface", "", yyline, yycolumn);
            }
          // fall through
          case 218: break;
          case 109:
            { return foundSymbol("Implementa", "", yyline, yycolumn);
            }
          // fall through
          case 219: break;
          case 110:
            { return foundSymbol("Operador de instancia", "", yyline, yycolumn);
            }
          // fall through
          case 220: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
