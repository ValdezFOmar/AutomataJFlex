// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/resources/Lexer.flex

// User Code (Import dependencies or declare variables)

/*TODO.
    - Refactor some of the token (separe the 'Separator' category into their own tokens)

    - Change the return values
        - Return the lexema found if the token has more than one lexeme
        - Return the nothing if the token has only one lexeme
        - Return the number of the identifier found (0),(1),(2),...
*/


@SuppressWarnings("fallthrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\40\0\1\1\1\2\1\3\1\4\1\0\1\5\1\6"+
    "\1\7\2\10\1\11\1\12\1\10\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\16\1\23\1\16"+
    "\1\24\1\16\2\10\1\25\1\26\1\27\1\30\1\0"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\10\1\63\1\10\1\64\1\65\1\0"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\10\1\120\1\10\1\121\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\6\4\4\1\7\1\10\1\11\1\10\1\2\30\12"+
    "\1\5\23\12\2\5\1\10\1\0\1\13\1\11\1\2"+
    "\1\0\1\14\1\4\2\0\1\15\62\12\1\16\12\12"+
    "\1\17\45\12\1\20\12\12\1\21\11\12\1\22\1\12"+
    "\1\23\1\24\6\12\1\2\25\12\1\25\1\0\1\25"+
    "\1\26\1\12\1\27\36\12\1\30\4\12\1\31\12\12"+
    "\1\32\12\12\1\33\1\4\16\12\1\34\5\12\1\3"+
    "\10\12\1\35\6\12\1\36\2\12\1\37\35\12\1\36"+
    "\1\40\11\12\1\21\5\12\1\41\1\0\3\12\1\42"+
    "\1\12\1\2\22\12\1\43\7\12\1\0\13\12\1\44"+
    "\5\12\1\45\6\12\1\21\12\12\1\46\5\12\1\47"+
    "\10\12\1\50\27\12\1\51\1\52\3\12\1\53\1\54"+
    "\10\12\1\55\11\12\1\41\7\12\1\56\1\57\5\12"+
    "\1\60\10\12\1\0\3\12\1\0\1\12\1\61\17\12"+
    "\1\41\3\12\1\0\1\62\2\12\1\20\3\12\1\63"+
    "\11\12\1\64\1\65\1\12\1\0\6\12\1\66\1\12"+
    "\1\0\32\12\1\67\4\12\1\70\10\12\1\71\1\12"+
    "\1\72\1\12\1\73\5\12\1\73\1\41\5\12\1\0"+
    "\3\12\1\0\1\12\1\74\7\12\1\75\2\12\1\64"+
    "\2\12\1\76\1\0\3\12\1\77\1\12\1\100\5\12"+
    "\2\0\4\12\1\0\1\101\2\12\1\32\5\12\1\102"+
    "\10\12\1\103\1\104\1\12\1\105\1\12\1\0\1\106"+
    "\15\12\1\24\1\23\10\12\1\0\2\12\1\107\4\12"+
    "\2\0\1\12\1\110\2\0\11\12\1\111\4\12\1\0"+
    "\2\12\1\41\1\12\1\112\3\12\1\113\5\12\1\0"+
    "\2\12\1\114\2\0\1\27\1\12\2\0\5\12\1\115"+
    "\7\12\1\0\3\12\1\116\4\12\1\0\2\12\2\0"+
    "\1\12\1\0\1\47\2\12\1\117\3\12\1\120\1\70"+
    "\2\12\1\121\1\12\3\0\1\12\1\0\3\12\1\122"+
    "\1\12\1\0\1\63\1\12\1\106\3\12\1\0\3\12"+
    "\1\0\2\12\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[858];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\122\0\u0148\0\u019a\0\u01ec"+
    "\0\122\0\u023e\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\244"+
    "\0\u042a\0\u047c\0\u04ce\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668"+
    "\0\u06ba\0\u070c\0\u075e\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8"+
    "\0\u094a\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0ae4\0\u0b36\0\u0b88"+
    "\0\u0bda\0\u0c2c\0\u0148\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74\0\u0dc6"+
    "\0\u0e18\0\u0e6a\0\u0ebc\0\u0f0e\0\u0f60\0\u0fb2\0\u1004\0\u1056"+
    "\0\u10a8\0\u10fa\0\u114c\0\u119e\0\u11f0\0\u1242\0\u1294\0\122"+
    "\0\122\0\366\0\122\0\122\0\122\0\u12e6\0\122\0\122"+
    "\0\u1338\0\u138a\0\122\0\u13dc\0\u142e\0\u1480\0\u14d2\0\u1524"+
    "\0\u1576\0\u15c8\0\u161a\0\u166c\0\u16be\0\u1710\0\u1762\0\u17b4"+
    "\0\u1806\0\u1858\0\u18aa\0\u18fc\0\u194e\0\u19a0\0\u19f2\0\u1a44"+
    "\0\u1a96\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30\0\u1c82\0\u1cd4"+
    "\0\u1d26\0\u1d78\0\u1dca\0\u1e1c\0\u1e6e\0\u1ec0\0\u1f12\0\u1f64"+
    "\0\u1fb6\0\u2008\0\u205a\0\u20ac\0\u20fe\0\u2150\0\u21a2\0\u21f4"+
    "\0\u2246\0\u2298\0\u22ea\0\u233c\0\u238e\0\u0802\0\u23e0\0\u2432"+
    "\0\u2484\0\u24d6\0\u2528\0\u257a\0\u25cc\0\u261e\0\u2670\0\u26c2"+
    "\0\u0802\0\u2714\0\u2766\0\u27b8\0\u280a\0\u285c\0\u28ae\0\u2900"+
    "\0\u2952\0\u29a4\0\u29f6\0\u2a48\0\u2a9a\0\u2aec\0\u2b3e\0\u2b90"+
    "\0\u2be2\0\u2c34\0\u2c86\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20"+
    "\0\u2e72\0\u2ec4\0\u2f16\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u30b0"+
    "\0\u3102\0\u3154\0\u31a6\0\u31f8\0\u324a\0\u329c\0\u32ee\0\u3340"+
    "\0\u3392\0\u33e4\0\u3436\0\u3488\0\u34da\0\u352c\0\u357e\0\u35d0"+
    "\0\u3622\0\u3674\0\u36c6\0\u3718\0\u376a\0\u37bc\0\u380e\0\u3860"+
    "\0\u38b2\0\u3904\0\u3956\0\u0802\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e"+
    "\0\u3af0\0\u3b42\0\u3b94\0\u3be6\0\u3c38\0\u0802\0\u3c8a\0\u3cdc"+
    "\0\u3d2e\0\u3d80\0\u3dd2\0\u3e24\0\u3e76\0\u3ec8\0\u3f1a\0\u3f6c"+
    "\0\u3fbe\0\u4010\0\u4062\0\u40b4\0\u4106\0\u4158\0\u41aa\0\u41fc"+
    "\0\u424e\0\u42a0\0\u42f2\0\u4344\0\u4396\0\u43e8\0\u443a\0\u448c"+
    "\0\u0802\0\u44de\0\u4530\0\u4582\0\u45d4\0\u4626\0\u4678\0\u46ca"+
    "\0\u471c\0\u476e\0\u47c0\0\u4812\0\u4864\0\u48b6\0\u4908\0\u495a"+
    "\0\u49ac\0\u49fe\0\u4a50\0\u4aa2\0\u4af4\0\u4b46\0\u4b98\0\u4bea"+
    "\0\u4c3c\0\u4c8e\0\u4ce0\0\u4d32\0\u4d84\0\u4dd6\0\u4e28\0\u0802"+
    "\0\u4e7a\0\u4ecc\0\u4f1e\0\u4f70\0\u0802\0\u4fc2\0\u5014\0\u5066"+
    "\0\u50b8\0\u510a\0\u515c\0\u51ae\0\u5200\0\u5252\0\u52a4\0\u52f6"+
    "\0\u5348\0\u539a\0\u53ec\0\u543e\0\u5490\0\u54e2\0\u5534\0\u5586"+
    "\0\u55d8\0\u562a\0\u0802\0\u567c\0\u56ce\0\u5720\0\u5772\0\u57c4"+
    "\0\u5816\0\u5868\0\u58ba\0\u590c\0\u595e\0\u59b0\0\u5a02\0\u5a54"+
    "\0\u5aa6\0\u5af8\0\u0802\0\u5b4a\0\u5b9c\0\u5bee\0\u5c40\0\u5c92"+
    "\0\u0802\0\u5ce4\0\u5d36\0\u5d88\0\u5dda\0\u5e2c\0\u5e7e\0\u5ed0"+
    "\0\u5f22\0\u0802\0\u5f74\0\u5fc6\0\u6018\0\u606a\0\u60bc\0\u610e"+
    "\0\u0802\0\u6160\0\u61b2\0\u0802\0\u6204\0\u6256\0\u62a8\0\u62fa"+
    "\0\u634c\0\u639e\0\u63f0\0\u6442\0\u6494\0\u64e6\0\u6538\0\u658a"+
    "\0\u65dc\0\u662e\0\u6680\0\u66d2\0\u6724\0\u6776\0\u67c8\0\u681a"+
    "\0\u686c\0\u68be\0\u6910\0\u6962\0\u69b4\0\u6a06\0\u6a58\0\u6aaa"+
    "\0\u6afc\0\u6b4e\0\u0802\0\u6ba0\0\u6bf2\0\u6c44\0\u6c96\0\u6ce8"+
    "\0\u6d3a\0\u6d8c\0\u6dde\0\u6e30\0\u6e82\0\u6ed4\0\u6f26\0\u6f78"+
    "\0\u6fca\0\u701c\0\u706e\0\u70c0\0\u7112\0\u7164\0\u71b6\0\u0802"+
    "\0\u7208\0\u725a\0\u72ac\0\u72fe\0\u7350\0\u73a2\0\u73f4\0\u7446"+
    "\0\u7498\0\u74ea\0\u753c\0\u758e\0\u75e0\0\u7632\0\u7684\0\u76d6"+
    "\0\u7728\0\u777a\0\u77cc\0\u781e\0\u0802\0\u7870\0\u78c2\0\u7914"+
    "\0\u7966\0\u79b8\0\u7a0a\0\u7a5c\0\u7aae\0\u7b00\0\u7b52\0\u7ba4"+
    "\0\u7bf6\0\u7c48\0\u7c9a\0\u7cec\0\u7d3e\0\u7d90\0\u7de2\0\u7e34"+
    "\0\u0802\0\u7e86\0\u7ed8\0\u7f2a\0\u7f7c\0\u7fce\0\u0802\0\u8020"+
    "\0\u8072\0\u80c4\0\u8116\0\u8168\0\u81ba\0\u0802\0\u820c\0\u825e"+
    "\0\u82b0\0\u8302\0\u8354\0\u83a6\0\u83f8\0\u844a\0\u849c\0\u84ee"+
    "\0\u0802\0\u8540\0\u8592\0\u85e4\0\u8636\0\u8688\0\u0802\0\u86da"+
    "\0\u872c\0\u877e\0\u87d0\0\u8822\0\u8874\0\u88c6\0\u8918\0\u0802"+
    "\0\u896a\0\u89bc\0\u8a0e\0\u8a60\0\u8ab2\0\u8b04\0\u8b56\0\u8ba8"+
    "\0\u8bfa\0\u8c4c\0\u8c9e\0\u8cf0\0\u8d42\0\u8d94\0\u8de6\0\u8e38"+
    "\0\u8e8a\0\u8edc\0\u8f2e\0\u8f80\0\u8fd2\0\u9024\0\u9076\0\u0802"+
    "\0\u0802\0\u90c8\0\u911a\0\u916c\0\u0802\0\u0802\0\u91be\0\u9210"+
    "\0\u9262\0\u92b4\0\u9306\0\u9358\0\u93aa\0\u93fc\0\u0802\0\u944e"+
    "\0\u94a0\0\u94f2\0\u9544\0\u9596\0\u95e8\0\u963a\0\u968c\0\u96de"+
    "\0\u0802\0\u9730\0\u9782\0\u97d4\0\u9826\0\u9878\0\u98ca\0\u991c"+
    "\0\u0802\0\u0802\0\u996e\0\u99c0\0\u9a12\0\u9a64\0\u9ab6\0\u0802"+
    "\0\u9b08\0\u9b5a\0\u9bac\0\u9bfe\0\u9c50\0\u9ca2\0\u9cf4\0\u9d46"+
    "\0\u9d98\0\u9dea\0\u9e3c\0\u9e8e\0\u9ee0\0\u9f32\0\u0802\0\u9f84"+
    "\0\u9fd6\0\ua028\0\ua07a\0\ua0cc\0\ua11e\0\ua170\0\ua1c2\0\ua214"+
    "\0\ua266\0\ua2b8\0\ua30a\0\ua35c\0\ua3ae\0\ua400\0\ua452\0\ua4a4"+
    "\0\ua4f6\0\ua548\0\ua59a\0\u0802\0\ua5ec\0\ua63e\0\u0802\0\ua690"+
    "\0\ua6e2\0\ua734\0\u0802\0\ua786\0\ua7d8\0\ua82a\0\ua87c\0\ua8ce"+
    "\0\ua920\0\ua972\0\ua9c4\0\uaa16\0\u0802\0\u0802\0\uaa68\0\uaaba"+
    "\0\uab0c\0\uab5e\0\uabb0\0\uac02\0\uac54\0\uaca6\0\u0802\0\uacf8"+
    "\0\uad4a\0\uad9c\0\uadee\0\uae40\0\uae92\0\uaee4\0\uaf36\0\uaf88"+
    "\0\uafda\0\ub02c\0\ub07e\0\ub0d0\0\ub122\0\ub174\0\ub1c6\0\ub218"+
    "\0\ub26a\0\ub2bc\0\ub30e\0\ub360\0\ub3b2\0\ub404\0\ub456\0\ub4a8"+
    "\0\ub4fa\0\ub54c\0\ub59e\0\u0802\0\ub5f0\0\ub642\0\ub694\0\ub6e6"+
    "\0\ub738\0\ub78a\0\ub7dc\0\ub82e\0\ub880\0\ub8d2\0\ub924\0\ub976"+
    "\0\ub9c8\0\u0802\0\uba1a\0\u0802\0\uba6c\0\u0802\0\ubabe\0\ubb10"+
    "\0\ubb62\0\ubbb4\0\ubc06\0\ubc58\0\ubcaa\0\ubcfc\0\ubd4e\0\ubda0"+
    "\0\ubdf2\0\ube44\0\ube96\0\ubee8\0\ubf3a\0\ubf8c\0\ubfde\0\uc030"+
    "\0\u0802\0\uc082\0\uc0d4\0\uc126\0\uc178\0\uc1ca\0\uc21c\0\uc26e"+
    "\0\u0802\0\uc2c0\0\uc312\0\u777a\0\uc364\0\uc3b6\0\u0802\0\uc408"+
    "\0\uc45a\0\uc4ac\0\uc4fe\0\u0802\0\uc550\0\u0802\0\uc5a2\0\uc5f4"+
    "\0\uc646\0\uc698\0\uc6ea\0\uc73c\0\uc78e\0\uc7e0\0\uc832\0\uc884"+
    "\0\uc8d6\0\uc928\0\u0802\0\uc97a\0\uc9cc\0\u0802\0\uca1e\0\uca70"+
    "\0\ucac2\0\ucb14\0\ucb66\0\u471c\0\ucbb8\0\ucc0a\0\ucc5c\0\uccae"+
    "\0\ucd00\0\ucd52\0\ucda4\0\ucdf6\0\u0802\0\u0802\0\uce48\0\u0802"+
    "\0\uce9a\0\uceec\0\u0802\0\ucf3e\0\ucf90\0\ucfe2\0\ud034\0\ud086"+
    "\0\ud0d8\0\ud12a\0\ud17c\0\ud1ce\0\ud220\0\ud272\0\ud2c4\0\ud316"+
    "\0\122\0\122\0\ud368\0\ud3ba\0\ud40c\0\ud45e\0\ud4b0\0\ud502"+
    "\0\ud554\0\ud5a6\0\ud5f8\0\ud64a\0\ud69c\0\u0802\0\ud6ee\0\ud740"+
    "\0\ud792\0\ud7e4\0\ud836\0\ud888\0\ud8da\0\u0802\0\ud92c\0\ud97e"+
    "\0\ud9d0\0\uda22\0\uda74\0\udac6\0\udb18\0\udb6a\0\udbbc\0\udc0e"+
    "\0\udc60\0\u0802\0\udcb2\0\udd04\0\udd56\0\udda8\0\uddfa\0\ude4c"+
    "\0\ude9e\0\udef0\0\udf42\0\u0802\0\udf94\0\udfe6\0\ue038\0\u0802"+
    "\0\ue08a\0\ue0dc\0\ue12e\0\ue180\0\ue1d2\0\ue224\0\ue276\0\ue2c8"+
    "\0\u0802\0\ue31a\0\ue36c\0\122\0\ue3be\0\ue410\0\ue462\0\ue4b4"+
    "\0\ue506\0\ue558\0\ue5aa\0\ue5fc\0\u0802\0\ue64e\0\ue6a0\0\ue6f2"+
    "\0\ue744\0\ue796\0\ue7e8\0\ue83a\0\ue88c\0\ue8de\0\ue930\0\ue982"+
    "\0\u0802\0\ue9d4\0\uea26\0\uea78\0\ueaca\0\ueb1c\0\ueb6e\0\uebc0"+
    "\0\uec12\0\uec64\0\uecb6\0\ued08\0\122\0\ued5a\0\uedac\0\u0802"+
    "\0\uedfe\0\uee50\0\ueea2\0\u0802\0\122\0\ueef4\0\uef46\0\u0802"+
    "\0\uef98\0\uefea\0\uf03c\0\uf08e\0\uf0e0\0\uf132\0\uf184\0\uf1d6"+
    "\0\uf228\0\u0802\0\uf27a\0\uf2cc\0\122\0\uf31e\0\122\0\uf370"+
    "\0\uf3c2\0\uf414\0\uf466\0\uf4b8\0\uf50a\0\uf55c\0\uf5ae\0\uf600"+
    "\0\uf652\0\122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[858];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\11\1\15\7\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\2\35\1\2\1\53\1\2\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\35\1\63\2\35"+
    "\1\64\1\35\1\65\1\66\1\67\1\35\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\35\1\76\1\35\1\77"+
    "\1\100\150\0\1\101\73\0\3\102\1\103\3\102\1\0"+
    "\112\102\26\0\1\104\101\0\1\105\17\0\1\104\73\0"+
    "\3\106\1\0\3\106\1\107\53\106\1\0\36\106\11\0"+
    "\1\6\3\0\1\5\10\0\1\104\105\0\1\110\3\0"+
    "\7\16\1\0\1\104\106\0\1\110\2\0\7\16\1\0"+
    "\1\104\104\0\1\5\3\0\1\6\10\0\1\104\107\0"+
    "\1\111\1\0\7\16\10\0\1\112\34\0\1\112\3\0"+
    "\1\113\50\0\1\53\1\101\121\0\1\101\1\53\122\0"+
    "\1\105\107\0\7\35\4\0\3\35\1\114\7\35\1\115"+
    "\1\35\1\116\4\35\1\117\7\35\2\0\4\35\1\120"+
    "\7\35\1\121\1\35\1\122\3\35\1\123\10\35\20\0"+
    "\7\35\4\0\1\124\3\35\1\125\25\35\2\0\31\35"+
    "\1\126\1\35\20\0\7\35\4\0\1\35\1\127\1\130"+
    "\1\131\3\35\1\132\1\133\2\35\1\134\2\35\1\135"+
    "\2\35\1\136\1\137\1\35\1\140\5\35\2\0\1\35"+
    "\1\141\31\35\20\0\7\35\4\0\1\142\3\35\1\143"+
    "\3\35\1\144\10\35\1\145\10\35\2\0\5\35\1\146"+
    "\3\35\1\147\21\35\20\0\7\35\4\0\27\35\1\150"+
    "\2\35\2\0\1\35\1\151\14\35\1\152\3\35\1\153"+
    "\3\35\1\154\1\35\1\155\2\35\20\0\7\35\4\0"+
    "\10\35\1\156\5\35\1\157\5\35\1\160\5\35\2\0"+
    "\1\35\1\161\20\35\1\162\10\35\20\0\7\35\4\0"+
    "\21\35\1\163\10\35\2\0\5\35\1\164\11\35\1\165"+
    "\13\35\20\0\7\35\4\0\1\166\31\35\2\0\1\35"+
    "\1\167\31\35\20\0\7\35\4\0\15\35\1\170\14\35"+
    "\2\0\33\35\20\0\7\35\4\0\16\35\1\171\13\35"+
    "\2\0\33\35\20\0\7\35\4\0\32\35\2\0\33\35"+
    "\20\0\7\35\4\0\4\35\1\172\3\35\1\173\21\35"+
    "\2\0\5\35\1\174\3\35\1\175\21\35\20\0\7\35"+
    "\4\0\32\35\2\0\5\35\1\176\11\35\1\177\5\35"+
    "\1\200\3\35\1\201\1\35\20\0\7\35\4\0\32\35"+
    "\2\0\1\35\1\202\3\35\1\203\11\35\1\204\5\35"+
    "\1\205\5\35\20\0\7\35\4\0\21\35\1\206\2\35"+
    "\1\207\5\35\2\0\2\35\1\210\3\35\1\211\11\35"+
    "\1\212\1\35\1\213\2\35\1\214\1\215\4\35\20\0"+
    "\7\35\4\0\21\35\1\216\10\35\2\0\1\35\1\217"+
    "\31\35\20\0\7\35\4\0\32\35\2\0\25\35\1\220"+
    "\5\35\20\0\7\35\4\0\4\35\1\221\3\35\1\222"+
    "\5\35\1\223\13\35\2\0\1\35\1\224\3\35\1\225"+
    "\25\35\20\0\7\35\4\0\1\35\1\226\2\35\1\227"+
    "\25\35\2\0\10\35\1\230\1\231\12\35\1\232\1\233"+
    "\5\35\20\0\7\35\4\0\1\234\15\35\1\235\2\35"+
    "\1\236\10\35\2\0\10\35\1\237\11\35\1\240\6\35"+
    "\1\241\1\35\20\0\7\35\4\0\10\35\1\242\2\35"+
    "\1\243\1\35\1\244\1\35\1\245\2\35\1\246\7\35"+
    "\2\0\23\35\1\247\7\35\20\0\7\35\4\0\1\250"+
    "\7\35\1\251\21\35\2\0\33\35\20\0\7\35\4\0"+
    "\7\35\1\252\22\35\2\0\11\35\1\253\10\35\1\254"+
    "\10\35\20\0\7\35\4\0\32\35\2\0\17\35\1\66"+
    "\13\35\20\0\7\35\4\0\32\35\2\0\2\35\1\255"+
    "\13\35\1\256\4\35\1\257\3\35\1\260\3\35\20\0"+
    "\7\35\4\0\32\35\2\0\17\35\1\261\2\35\1\262"+
    "\6\35\1\263\1\35\20\0\7\35\4\0\32\35\2\0"+
    "\1\35\1\264\6\35\1\265\3\35\1\266\2\35\1\267"+
    "\13\35\20\0\7\35\4\0\32\35\2\0\1\35\1\263"+
    "\3\35\1\270\3\35\1\271\5\35\1\272\13\35\20\0"+
    "\7\35\4\0\32\35\2\0\14\35\1\273\1\35\1\274"+
    "\11\35\1\275\2\35\20\0\7\35\4\0\32\35\2\0"+
    "\1\35\1\161\7\35\1\276\2\35\1\277\2\35\1\300"+
    "\2\35\1\301\2\35\1\302\5\35\20\0\7\35\4\0"+
    "\32\35\2\0\14\35\1\303\16\35\20\0\7\35\4\0"+
    "\32\35\2\0\6\35\1\304\6\35\1\305\1\306\4\35"+
    "\1\307\7\35\20\0\7\35\4\0\32\35\2\0\1\35"+
    "\1\310\7\35\1\311\5\35\1\312\13\35\20\0\7\35"+
    "\4\0\32\35\2\0\1\35\1\313\3\35\1\314\11\35"+
    "\1\315\5\35\1\205\5\35\20\0\7\35\4\0\32\35"+
    "\2\0\22\35\1\316\10\35\20\0\7\35\4\0\32\35"+
    "\2\0\1\35\1\317\20\35\1\320\2\35\1\321\5\35"+
    "\20\0\7\35\4\0\32\35\2\0\1\35\1\322\3\35"+
    "\1\323\25\35\20\0\7\35\4\0\32\35\2\0\5\35"+
    "\1\324\2\35\1\325\13\35\1\326\1\327\1\35\1\330"+
    "\1\35\1\331\1\35\20\0\7\35\4\0\32\35\2\0"+
    "\10\35\1\332\1\333\10\35\1\334\2\35\1\335\5\35"+
    "\20\0\7\35\4\0\32\35\2\0\11\35\1\336\21\35"+
    "\20\0\7\35\4\0\32\35\2\0\1\35\1\337\15\35"+
    "\1\340\13\35\20\0\7\35\4\0\32\35\2\0\10\35"+
    "\1\341\1\342\21\35\20\0\7\35\4\0\32\35\2\0"+
    "\11\35\1\343\21\35\30\0\1\104\71\0\1\105\10\0"+
    "\1\107\130\0\7\344\107\0\2\345\2\0\7\346\113\0"+
    "\7\35\4\0\3\35\1\347\26\35\2\0\33\35\20\0"+
    "\7\35\4\0\13\35\1\304\7\35\1\350\6\35\2\0"+
    "\33\35\20\0\7\35\4\0\30\35\1\304\1\35\2\0"+
    "\33\35\20\0\7\35\4\0\2\35\1\351\27\35\2\0"+
    "\33\35\20\0\7\35\4\0\32\35\2\0\4\35\1\352"+
    "\26\35\20\0\7\35\4\0\32\35\2\0\11\35\1\353"+
    "\21\35\20\0\7\35\4\0\32\35\2\0\4\35\1\354"+
    "\26\35\20\0\7\35\4\0\32\35\2\0\22\35\1\355"+
    "\10\35\20\0\7\35\4\0\2\35\1\356\27\35\2\0"+
    "\33\35\20\0\7\35\4\0\23\35\1\357\6\35\2\0"+
    "\33\35\20\0\7\35\4\0\21\35\1\360\3\35\1\361"+
    "\4\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\17\35\1\362\11\35\1\363\1\35\20\0\7\35\4\0"+
    "\32\35\2\0\10\35\1\364\22\35\20\0\7\35\4\0"+
    "\32\35\2\0\1\35\1\363\1\365\2\35\1\366\25\35"+
    "\20\0\7\35\4\0\4\35\1\367\25\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\16\35\1\370\14\35"+
    "\20\0\7\35\4\0\32\35\2\0\16\35\1\371\14\35"+
    "\20\0\7\35\4\0\13\35\1\372\1\35\1\373\14\35"+
    "\2\0\2\35\1\374\30\35\20\0\7\35\4\0\4\35"+
    "\1\375\25\35\2\0\33\35\20\0\7\35\4\0\1\35"+
    "\1\376\30\35\2\0\10\35\1\377\5\35\1\371\5\35"+
    "\1\u0100\6\35\20\0\7\35\4\0\10\35\1\133\2\35"+
    "\1\134\6\35\1\u0101\7\35\2\0\33\35\20\0\7\35"+
    "\4\0\32\35\2\0\14\35\1\u0102\16\35\20\0\7\35"+
    "\4\0\23\35\1\u0103\6\35\2\0\33\35\20\0\7\35"+
    "\4\0\13\35\1\u0104\6\35\1\117\7\35\2\0\33\35"+
    "\20\0\7\35\4\0\22\35\1\u0105\7\35\2\0\33\35"+
    "\20\0\7\35\4\0\16\35\1\u0106\13\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\14\35\1\u0107\16\35"+
    "\20\0\7\35\4\0\32\35\2\0\15\35\1\u0108\4\35"+
    "\1\u0109\10\35\20\0\7\35\4\0\4\35\1\u010a\3\35"+
    "\1\u010b\21\35\2\0\33\35\20\0\7\35\4\0\32\35"+
    "\2\0\3\35\1\u010c\27\35\20\0\7\35\4\0\32\35"+
    "\2\0\4\35\1\u010d\26\35\20\0\7\35\4\0\32\35"+
    "\2\0\1\35\1\u010e\20\35\1\u010f\10\35\20\0\7\35"+
    "\4\0\32\35\2\0\5\35\1\u0110\25\35\20\0\7\35"+
    "\4\0\32\35\2\0\11\35\1\u0111\21\35\20\0\7\35"+
    "\4\0\27\35\1\u0112\2\35\2\0\33\35\20\0\7\35"+
    "\4\0\21\35\1\u0113\10\35\2\0\33\35\20\0\7\35"+
    "\4\0\13\35\1\u0114\16\35\2\0\33\35\20\0\7\35"+
    "\4\0\32\35\2\0\14\35\1\u0115\16\35\20\0\7\35"+
    "\4\0\32\35\2\0\11\35\1\u0116\21\35\20\0\7\35"+
    "\4\0\16\35\1\u0117\13\35\2\0\33\35\20\0\7\35"+
    "\4\0\32\35\2\0\24\35\1\u0118\6\35\20\0\7\35"+
    "\4\0\23\35\1\u0119\6\35\2\0\33\35\20\0\7\35"+
    "\4\0\25\35\1\u011a\4\35\2\0\33\35\20\0\7\35"+
    "\4\0\32\35\2\0\16\35\1\u011b\14\35\20\0\7\35"+
    "\4\0\3\35\1\u011c\11\35\1\u011d\4\35\1\u011e\7\35"+
    "\2\0\33\35\20\0\7\35\4\0\10\35\1\u011f\21\35"+
    "\2\0\33\35\20\0\7\35\4\0\5\35\1\u0120\24\35"+
    "\2\0\33\35\20\0\7\35\4\0\12\35\1\u0121\1\35"+
    "\1\u0122\15\35\2\0\33\35\20\0\7\35\4\0\32\35"+
    "\2\0\24\35\1\u0123\6\35\20\0\7\35\4\0\32\35"+
    "\2\0\2\35\1\176\30\35\20\0\7\35\4\0\32\35"+
    "\2\0\4\35\1\u0124\26\35\20\0\7\35\4\0\32\35"+
    "\2\0\23\35\1\u0125\7\35\20\0\7\35\4\0\1\35"+
    "\1\u0126\1\u0127\27\35\2\0\33\35\20\0\7\35\4\0"+
    "\32\35\2\0\15\35\1\u0128\4\35\1\u0129\10\35\20\0"+
    "\7\35\4\0\32\35\2\0\30\35\1\u012a\2\35\20\0"+
    "\7\35\4\0\32\35\2\0\16\35\1\u012b\5\35\1\u012c"+
    "\6\35\20\0\7\35\4\0\32\35\2\0\14\35\1\u012d"+
    "\16\35\20\0\7\35\4\0\3\35\1\u012e\26\35\2\0"+
    "\33\35\20\0\7\35\4\0\23\35\1\u011d\6\35\2\0"+
    "\33\35\20\0\7\35\4\0\32\35\2\0\12\35\1\u012f"+
    "\20\35\20\0\7\35\4\0\32\35\2\0\5\35\1\u0130"+
    "\16\35\1\u0131\6\35\20\0\7\35\4\0\4\35\1\u0132"+
    "\25\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\24\35\1\u0133\6\35\20\0\7\35\4\0\32\35\2\0"+
    "\5\35\1\u0134\25\35\20\0\7\35\4\0\10\35\1\u0135"+
    "\5\35\1\u0136\13\35\2\0\33\35\20\0\7\35\4\0"+
    "\32\35\2\0\22\35\1\u0137\10\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u0138\25\35\20\0\7\35\4\0"+
    "\14\35\1\u0139\15\35\2\0\33\35\20\0\7\35\4\0"+
    "\6\35\1\u013a\23\35\2\0\33\35\20\0\7\35\4\0"+
    "\26\35\1\u013b\3\35\2\0\33\35\20\0\7\35\4\0"+
    "\32\35\2\0\11\35\1\u013c\21\35\20\0\7\35\4\0"+
    "\3\35\1\u013d\26\35\2\0\1\35\1\u013e\13\35\1\u013f"+
    "\5\35\1\u0140\7\35\20\0\7\35\4\0\32\35\2\0"+
    "\31\35\1\263\1\35\20\0\7\35\4\0\13\35\1\u0141"+
    "\7\35\1\u0142\6\35\2\0\33\35\20\0\7\35\4\0"+
    "\32\35\2\0\1\35\1\u0143\31\35\20\0\7\35\4\0"+
    "\32\35\2\0\16\35\1\u0144\14\35\20\0\7\35\4\0"+
    "\32\35\2\0\1\35\1\u0145\3\35\1\u0146\11\35\1\u0147"+
    "\2\35\1\u0148\10\35\20\0\7\35\4\0\32\35\2\0"+
    "\2\35\1\u0149\30\35\20\0\7\35\4\0\1\35\1\u014a"+
    "\30\35\2\0\33\35\20\0\7\35\4\0\3\35\1\u014b"+
    "\13\35\1\u014c\12\35\2\0\33\35\20\0\7\35\4\0"+
    "\24\35\1\u014d\5\35\2\0\33\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u014e\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\25\35\1\u014f\3\35\1\u0150\1\35\20\0"+
    "\7\35\4\0\32\35\2\0\20\35\1\u0151\12\35\20\0"+
    "\7\35\4\0\32\35\2\0\16\35\1\u0152\14\35\20\0"+
    "\7\35\4\0\32\35\2\0\17\35\1\312\13\35\20\0"+
    "\7\35\4\0\10\35\1\u0153\21\35\2\0\33\35\20\0"+
    "\7\35\4\0\3\35\1\u0154\26\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\10\35\1\325\22\35\20\0"+
    "\7\35\4\0\32\35\2\0\11\35\1\u0155\21\35\20\0"+
    "\7\35\4\0\13\35\1\u0156\16\35\2\0\33\35\20\0"+
    "\7\35\4\0\4\35\1\u0157\25\35\2\0\33\35\20\0"+
    "\7\35\4\0\4\35\1\u0158\25\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\4\35\1\u0159\17\35\1\u015a"+
    "\6\35\20\0\7\35\4\0\32\35\2\0\11\35\1\u015b"+
    "\21\35\20\0\7\35\4\0\32\35\2\0\23\35\1\u015c"+
    "\7\35\20\0\7\35\4\0\32\35\2\0\4\35\1\316"+
    "\26\35\20\0\7\35\4\0\32\35\2\0\23\35\1\u015d"+
    "\5\35\1\u015e\1\35\20\0\7\35\4\0\32\35\2\0"+
    "\1\35\1\u015f\31\35\20\0\7\35\4\0\32\35\2\0"+
    "\17\35\1\u0160\13\35\20\0\7\35\4\0\32\35\2\0"+
    "\5\35\1\u0161\25\35\20\0\7\35\4\0\32\35\2\0"+
    "\24\35\1\u0162\6\35\20\0\7\35\4\0\32\35\2\0"+
    "\23\35\1\u0163\1\u0164\6\35\20\0\7\35\4\0\32\35"+
    "\2\0\1\35\1\u0165\31\35\20\0\7\35\4\0\32\35"+
    "\2\0\1\35\1\u0166\31\35\20\0\7\35\4\0\32\35"+
    "\2\0\15\35\1\u0167\1\u0168\14\35\20\0\7\35\4\0"+
    "\32\35\2\0\3\35\1\u0169\2\35\1\u016a\5\35\1\u016b"+
    "\16\35\20\0\7\35\4\0\32\35\2\0\3\35\1\u016c"+
    "\27\35\20\0\7\35\4\0\32\35\2\0\25\35\1\u016d"+
    "\5\35\20\0\7\35\4\0\32\35\2\0\11\35\1\u016e"+
    "\11\35\1\u016f\7\35\20\0\7\35\4\0\32\35\2\0"+
    "\25\35\1\u0170\5\35\20\0\7\35\4\0\32\35\2\0"+
    "\3\35\1\u0171\20\35\1\u0172\6\35\20\0\7\35\4\0"+
    "\32\35\2\0\16\35\1\u0173\14\35\20\0\7\35\4\0"+
    "\32\35\2\0\17\35\1\u0174\13\35\20\0\7\35\4\0"+
    "\32\35\2\0\22\35\1\u0175\10\35\20\0\7\35\4\0"+
    "\32\35\2\0\17\35\1\u0176\13\35\20\0\7\35\4\0"+
    "\32\35\2\0\16\35\1\u0177\14\35\20\0\7\35\4\0"+
    "\32\35\2\0\17\35\1\u0178\13\35\20\0\7\35\4\0"+
    "\32\35\2\0\20\35\1\u0179\12\35\20\0\7\35\4\0"+
    "\32\35\2\0\23\35\1\u017a\1\u017b\6\35\3\0\1\u017c"+
    "\14\0\7\35\4\0\32\35\2\0\33\35\20\0\7\35"+
    "\4\0\32\35\2\0\15\35\1\u017d\15\35\20\0\7\35"+
    "\4\0\32\35\2\0\23\35\1\u016c\7\35\20\0\7\35"+
    "\4\0\32\35\2\0\16\35\1\u017e\14\35\20\0\7\35"+
    "\4\0\32\35\2\0\24\35\1\u017f\6\35\20\0\7\35"+
    "\4\0\32\35\2\0\27\35\1\u0180\3\35\20\0\7\35"+
    "\4\0\32\35\2\0\16\35\1\u0181\5\35\1\u0182\6\35"+
    "\20\0\7\35\4\0\32\35\2\0\3\35\1\u0183\17\35"+
    "\1\u0184\7\35\20\0\7\35\4\0\32\35\2\0\11\35"+
    "\1\u0185\5\35\1\u0186\13\35\20\0\7\35\4\0\32\35"+
    "\2\0\2\35\1\u0187\30\35\20\0\7\35\4\0\32\35"+
    "\2\0\11\35\1\u0188\21\35\20\0\7\35\4\0\32\35"+
    "\2\0\21\35\1\u0189\2\35\1\u018a\6\35\20\0\7\35"+
    "\4\0\32\35\2\0\14\35\1\u018b\16\35\20\0\7\35"+
    "\4\0\32\35\2\0\17\35\1\u018c\13\35\20\0\7\35"+
    "\4\0\32\35\2\0\1\35\1\u018d\20\35\1\u018e\10\35"+
    "\20\0\7\35\4\0\32\35\2\0\20\35\1\u018f\12\35"+
    "\20\0\7\35\4\0\32\35\2\0\11\35\1\u0190\21\35"+
    "\20\0\7\35\4\0\32\35\2\0\16\35\1\u0191\14\35"+
    "\20\0\7\35\4\0\32\35\2\0\11\35\1\u0192\10\35"+
    "\1\u0193\10\35\20\0\7\35\4\0\32\35\2\0\15\35"+
    "\1\u0162\15\35\20\0\7\35\4\0\32\35\2\0\1\35"+
    "\1\u0194\23\35\1\u014f\3\35\1\u0195\1\35\20\0\7\35"+
    "\4\0\32\35\2\0\20\35\1\u0196\12\35\20\0\7\35"+
    "\4\0\32\35\2\0\16\35\1\u0197\14\35\20\0\7\35"+
    "\4\0\32\35\2\0\22\35\1\u0123\10\35\20\0\7\35"+
    "\4\0\32\35\2\0\11\35\1\u0198\2\35\1\u0199\16\35"+
    "\20\0\7\35\4\0\32\35\2\0\11\35\1\u019a\21\35"+
    "\20\0\7\35\4\0\32\35\2\0\24\35\1\u019b\6\35"+
    "\20\0\7\35\4\0\32\35\2\0\5\35\1\u019c\25\35"+
    "\20\0\7\344\10\0\1\112\34\0\1\112\3\0\1\113"+
    "\41\0\7\346\113\0\7\346\51\0\1\113\24\0\1\u019d"+
    "\14\0\7\35\4\0\32\35\2\0\33\35\20\0\7\35"+
    "\4\0\4\35\1\u019e\25\35\2\0\33\35\20\0\7\35"+
    "\4\0\7\35\1\u019f\22\35\2\0\22\35\1\u01a0\10\35"+
    "\20\0\7\35\4\0\32\35\2\0\1\35\1\u01a1\31\35"+
    "\20\0\7\35\4\0\1\u01a2\31\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\1\35\1\u01a3\31\35\20\0"+
    "\7\35\4\0\12\35\1\u01a4\17\35\2\0\33\35\20\0"+
    "\7\35\4\0\26\35\1\u01a5\3\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\u01a6\25\35\20\0"+
    "\7\35\4\0\32\35\2\0\1\35\1\u01a7\31\35\20\0"+
    "\7\35\4\0\32\35\2\0\17\35\1\365\13\35\20\0"+
    "\7\35\4\0\32\35\2\0\24\35\1\u01a8\6\35\20\0"+
    "\7\35\4\0\32\35\2\0\1\35\1\u0100\31\35\20\0"+
    "\7\35\4\0\32\35\2\0\14\35\1\u01a9\16\35\20\0"+
    "\7\35\4\0\32\35\2\0\3\35\1\u01a9\27\35\20\0"+
    "\7\35\4\0\2\35\1\u01aa\27\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\24\35\1\u01a9\6\35\20\0"+
    "\7\35\4\0\32\35\2\0\7\35\1\u01a9\23\35\20\0"+
    "\7\35\4\0\24\35\1\u01ab\5\35\2\0\33\35\20\0"+
    "\7\35\4\0\22\35\1\u01ac\7\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\12\35\1\u01a9\20\35\20\0"+
    "\7\35\4\0\1\u01ad\31\35\2\0\33\35\20\0\7\35"+
    "\4\0\32\35\2\0\31\35\1\363\1\35\20\0\7\35"+
    "\4\0\32\35\2\0\17\35\1\u01ae\13\35\20\0\7\35"+
    "\4\0\32\35\2\0\22\35\1\u01a9\10\35\20\0\7\35"+
    "\4\0\32\35\2\0\10\35\1\377\22\35\20\0\7\35"+
    "\4\0\32\35\2\0\14\35\1\u01af\16\35\20\0\7\35"+
    "\4\0\1\u01b0\31\35\2\0\33\35\20\0\7\35\4\0"+
    "\4\35\1\u01b1\25\35\2\0\33\35\20\0\7\35\4\0"+
    "\23\35\1\u01b2\6\35\2\0\33\35\20\0\7\35\4\0"+
    "\17\35\1\u016b\12\35\2\0\33\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u01b3\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u01b4\25\35\20\0\7\35\4\0"+
    "\2\35\1\u01af\27\35\2\0\33\35\20\0\7\35\4\0"+
    "\22\35\1\u01b5\7\35\2\0\33\35\20\0\7\35\4\0"+
    "\32\35\2\0\10\35\1\u01b6\22\35\20\0\7\35\4\0"+
    "\32\35\2\0\23\35\1\u01b7\7\35\20\0\7\35\4\0"+
    "\32\35\2\0\17\35\1\u01b8\13\35\20\0\7\35\4\0"+
    "\32\35\2\0\16\35\1\u01b9\14\35\20\0\7\35\4\0"+
    "\32\35\2\0\24\35\1\u010d\6\35\20\0\7\35\4\0"+
    "\14\35\1\u01ba\15\35\2\0\33\35\20\0\7\35\4\0"+
    "\4\35\1\u01bb\25\35\2\0\33\35\20\0\7\35\4\0"+
    "\13\35\1\u01bc\16\35\2\0\33\35\20\0\7\35\4\0"+
    "\32\35\2\0\23\35\1\u014f\7\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u01bd\25\35\20\0\7\35\4\0"+
    "\24\35\1\u01be\5\35\2\0\33\35\20\0\7\35\4\0"+
    "\23\35\1\u01bf\3\35\1\u01c0\2\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\17\35\1\u01c1\13\35\20\0"+
    "\7\35\4\0\10\35\1\u01c2\21\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\4\35\1\u01c3\26\35\20\0"+
    "\7\35\4\0\4\35\1\u01c4\25\35\2\0\33\35\20\0"+
    "\7\35\4\0\4\35\1\u01c5\25\35\2\0\33\35\20\0"+
    "\7\35\4\0\4\35\1\u01c6\25\35\2\0\33\35\20\0"+
    "\7\35\4\0\15\35\1\u01c7\14\35\2\0\33\35\20\0"+
    "\7\35\4\0\23\35\1\u01c8\6\35\2\0\33\35\20\0"+
    "\7\35\4\0\4\35\1\304\25\35\2\0\33\35\20\0"+
    "\7\35\4\0\10\35\1\u01c9\21\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\25\35\1\u01ca\5\35\20\0"+
    "\7\35\4\0\32\35\2\0\24\35\1\u01cb\6\35\20\0"+
    "\7\35\4\0\32\35\2\0\1\35\1\u01cc\31\35\20\0"+
    "\7\35\4\0\32\35\2\0\14\35\1\u01cd\16\35\20\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\u01ce\25\35\20\0"+
    "\7\35\4\0\32\35\2\0\22\35\1\u01cf\10\35\20\0"+
    "\7\35\4\0\32\35\2\0\24\35\1\u01b6\6\35\20\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\u01d0\25\35\20\0"+
    "\7\35\4\0\10\35\1\u01d1\5\35\1\u01d2\13\35\2\0"+
    "\10\35\1\u01d3\22\35\20\0\7\35\4\0\32\35\2\0"+
    "\14\35\1\u01d0\16\35\20\0\7\35\4\0\4\35\1\u01d4"+
    "\25\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\5\35\1\u01d5\25\35\20\0\7\35\4\0\32\35\2\0"+
    "\22\35\1\u01d6\10\35\20\0\7\35\4\0\32\35\2\0"+
    "\11\35\1\u01d7\21\35\20\0\7\35\4\0\32\35\2\0"+
    "\14\35\1\u01d8\16\35\20\0\7\35\4\0\32\35\2\0"+
    "\22\35\1\u01d9\10\35\20\0\7\35\4\0\14\35\1\u01da"+
    "\15\35\2\0\33\35\20\0\7\35\4\0\2\35\1\u01db"+
    "\27\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\24\35\1\u01dc\6\35\20\0\7\35\4\0\32\35\2\0"+
    "\25\35\1\u01dd\5\35\20\0\7\35\4\0\7\35\1\u0120"+
    "\22\35\2\0\33\35\20\0\7\35\4\0\15\35\1\u01de"+
    "\14\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\23\35\1\u01df\7\35\20\0\7\35\4\0\32\35\2\0"+
    "\11\35\1\u01e0\21\35\20\0\7\35\4\0\32\35\2\0"+
    "\4\35\1\u01e1\26\35\20\0\7\35\4\0\32\35\2\0"+
    "\17\35\1\u01e2\13\35\20\0\7\35\4\0\32\35\2\0"+
    "\25\35\1\u01e3\5\35\20\0\7\35\4\0\4\35\1\u01e4"+
    "\25\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\22\35\1\u01e5\10\35\20\0\7\35\4\0\32\35\2\0"+
    "\7\35\1\u01e6\23\35\20\0\7\35\4\0\32\35\2\0"+
    "\3\35\1\u01e7\27\35\20\0\7\35\4\0\32\35\2\0"+
    "\20\35\1\u01e8\12\35\20\0\7\35\4\0\32\35\2\0"+
    "\20\35\1\u01e9\12\35\20\0\7\35\4\0\32\35\2\0"+
    "\25\35\1\u01ea\5\35\20\0\7\35\4\0\13\35\1\u01eb"+
    "\16\35\2\0\33\35\20\0\7\35\4\0\16\35\1\u0139"+
    "\13\35\2\0\33\35\20\0\7\35\4\0\15\35\1\u01ec"+
    "\14\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\16\35\1\u01ed\14\35\20\0\7\35\4\0\32\35\2\0"+
    "\5\35\1\u01ee\25\35\20\0\7\35\4\0\2\35\1\u01ef"+
    "\27\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\5\35\1\u01f0\25\35\20\0\7\35\4\0\32\35\2\0"+
    "\24\35\1\u01f1\6\35\20\0\7\35\4\0\16\35\1\u01f2"+
    "\1\35\1\u01f3\11\35\2\0\33\35\20\0\7\35\4\0"+
    "\1\u01f4\31\35\2\0\33\35\20\0\7\35\4\0\32\35"+
    "\2\0\16\35\1\u01f5\14\35\20\0\7\35\4\0\24\35"+
    "\1\u01f6\5\35\2\0\33\35\20\0\7\35\4\0\26\35"+
    "\1\u01f7\3\35\2\0\33\35\20\0\7\35\4\0\21\35"+
    "\1\u0121\10\35\2\0\33\35\20\0\7\35\4\0\32\35"+
    "\2\0\5\35\1\u01f8\25\35\20\0\7\35\4\0\32\35"+
    "\2\0\10\35\1\u01f9\22\35\20\0\7\35\4\0\32\35"+
    "\2\0\24\35\1\u01fa\6\35\20\0\7\35\4\0\32\35"+
    "\2\0\24\35\1\u01fb\6\35\20\0\7\35\4\0\32\35"+
    "\2\0\5\35\1\u01fc\25\35\20\0\7\35\4\0\32\35"+
    "\2\0\16\35\1\u01fd\14\35\20\0\7\35\4\0\32\35"+
    "\2\0\11\35\1\u01fe\21\35\20\0\7\35\4\0\32\35"+
    "\2\0\14\35\1\u01ff\16\35\20\0\7\35\4\0\32\35"+
    "\2\0\1\35\1\u0200\31\35\20\0\7\35\4\0\32\35"+
    "\2\0\5\35\1\u0201\25\35\20\0\7\35\4\0\32\35"+
    "\2\0\5\35\1\304\25\35\20\0\7\35\4\0\32\35"+
    "\2\0\3\35\1\u0202\27\35\20\0\7\35\4\0\32\35"+
    "\2\0\22\35\1\u0201\10\35\20\0\7\35\4\0\32\35"+
    "\2\0\23\35\1\u0203\7\35\20\0\7\35\4\0\32\35"+
    "\2\0\20\35\1\u0204\12\35\20\0\7\35\4\0\32\35"+
    "\2\0\23\35\1\u0205\1\u0206\6\35\20\0\7\35\4\0"+
    "\32\35\2\0\11\35\1\u0207\21\35\20\0\7\35\4\0"+
    "\32\35\2\0\1\35\1\u0208\31\35\20\0\7\35\4\0"+
    "\32\35\2\0\24\35\1\u0209\6\35\20\0\7\35\4\0"+
    "\32\35\2\0\2\35\1\u01e6\30\35\20\0\7\35\4\0"+
    "\32\35\2\0\6\35\1\304\24\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u01ed\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\15\35\1\u020a\15\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u020b\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u020c\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\1\35\1\u020d\31\35\20\0\7\35\4\0"+
    "\32\35\2\0\1\35\1\u020e\31\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u020f\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\15\35\1\u0210\15\35\20\0\7\35\4\0"+
    "\32\35\2\0\3\35\1\u0149\27\35\20\0\7\35\4\0"+
    "\32\35\2\0\2\35\1\u0211\30\35\20\0\7\35\4\0"+
    "\32\35\2\0\14\35\1\u0212\2\35\1\u0213\13\35\20\0"+
    "\7\35\4\0\32\35\2\0\24\35\1\u0214\6\35\20\0"+
    "\1\35\1\u0215\1\35\1\u0216\1\35\1\u0217\1\u0201\4\0"+
    "\32\35\2\0\5\35\1\u0218\25\35\105\0\1\u0219\34\0"+
    "\7\35\4\0\32\35\2\0\2\35\1\u021a\30\35\20\0"+
    "\7\35\4\0\32\35\2\0\7\35\1\u0201\23\35\20\0"+
    "\7\35\4\0\32\35\2\0\11\35\1\u021b\21\35\20\0"+
    "\7\35\4\0\32\35\2\0\14\35\1\u021c\16\35\3\0"+
    "\1\u021d\14\0\7\35\4\0\32\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\13\35\1\u021e\17\35\20\0"+
    "\7\35\4\0\32\35\2\0\23\35\1\u021f\7\35\20\0"+
    "\7\35\4\0\32\35\2\0\16\35\1\u0220\7\35\1\u0221"+
    "\4\35\20\0\7\35\4\0\32\35\2\0\24\35\1\u0222"+
    "\6\35\20\0\7\35\4\0\32\35\2\0\14\35\1\u0223"+
    "\16\35\20\0\7\35\4\0\32\35\2\0\23\35\1\u0224"+
    "\7\35\20\0\7\35\4\0\32\35\2\0\25\35\1\u0225"+
    "\5\35\20\0\7\35\4\0\32\35\2\0\25\35\1\u0226"+
    "\5\35\20\0\7\35\4\0\32\35\2\0\6\35\1\176"+
    "\24\35\20\0\7\35\4\0\32\35\2\0\22\35\1\u0227"+
    "\10\35\20\0\7\35\4\0\32\35\2\0\24\35\1\u0228"+
    "\6\35\20\0\7\35\4\0\32\35\2\0\11\35\1\u0229"+
    "\21\35\20\0\7\35\4\0\32\35\2\0\5\35\1\u022a"+
    "\25\35\20\0\7\35\4\0\32\35\2\0\24\35\1\u022b"+
    "\6\35\20\0\7\35\4\0\32\35\2\0\3\35\1\u022c"+
    "\27\35\20\0\7\35\4\0\32\35\2\0\23\35\1\176"+
    "\7\35\20\0\7\35\4\0\32\35\2\0\17\35\1\u022d"+
    "\13\35\20\0\7\35\4\0\32\35\2\0\16\35\1\u022e"+
    "\14\35\20\0\7\35\4\0\32\35\2\0\14\35\1\u01dd"+
    "\16\35\20\0\7\35\4\0\32\35\2\0\24\35\1\u022f"+
    "\6\35\20\0\7\35\4\0\32\35\2\0\4\35\1\u0149"+
    "\26\35\20\0\7\35\4\0\32\35\2\0\1\35\1\u0230"+
    "\31\35\20\0\7\35\4\0\32\35\2\0\14\35\1\u0231"+
    "\16\35\20\0\7\35\4\0\32\35\2\0\10\35\1\u0195"+
    "\22\35\20\0\7\35\4\0\32\35\2\0\14\35\1\u0232"+
    "\16\35\35\0\1\u0233\104\0\7\35\4\0\21\35\1\u0234"+
    "\10\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\1\35\1\u0235\31\35\20\0\7\35\4\0\32\35\2\0"+
    "\5\35\1\u0236\25\35\20\0\7\35\4\0\32\35\2\0"+
    "\23\35\1\u0237\7\35\20\0\7\35\4\0\32\35\2\0"+
    "\14\35\1\u0238\16\35\20\0\7\35\4\0\32\35\2\0"+
    "\31\35\1\u0209\1\35\20\0\7\35\4\0\24\35\1\u0239"+
    "\5\35\2\0\33\35\20\0\7\35\4\0\4\35\1\u023a"+
    "\25\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\6\35\1\u0133\24\35\20\0\7\35\4\0\32\35\2\0"+
    "\14\35\1\u0133\16\35\20\0\7\35\4\0\32\35\2\0"+
    "\5\35\1\u01a9\25\35\20\0\7\35\4\0\12\35\1\u023b"+
    "\17\35\2\0\33\35\20\0\7\35\4\0\14\35\1\u023c"+
    "\15\35\2\0\33\35\20\0\7\35\4\0\23\35\1\u023d"+
    "\6\35\2\0\33\35\20\0\7\35\4\0\23\35\1\u023e"+
    "\6\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\22\35\1\370\10\35\20\0\7\35\4\0\1\35\1\u023f"+
    "\30\35\2\0\33\35\20\0\7\35\4\0\23\35\1\u0240"+
    "\6\35\2\0\33\35\20\0\7\35\4\0\10\35\1\u0241"+
    "\21\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\7\35\1\u0242\23\35\20\0\7\35\4\0\32\35\2\0"+
    "\3\35\1\u0243\27\35\20\0\7\35\4\0\23\35\1\u0244"+
    "\6\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\5\35\1\u016b\25\35\20\0\7\35\4\0\32\35\2\0"+
    "\22\35\1\u0245\10\35\20\0\7\35\4\0\32\35\2\0"+
    "\24\35\1\u0246\6\35\20\0\7\35\4\0\4\35\1\u0139"+
    "\25\35\2\0\33\35\20\0\7\35\4\0\10\35\1\u0247"+
    "\21\35\2\0\33\35\3\0\1\u0248\14\0\7\35\4\0"+
    "\32\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\16\35\1\u0249\14\35\20\0\7\35\4\0\17\35\1\u024a"+
    "\12\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\31\35\1\u024b\1\35\20\0\7\35\4\0\32\35\2\0"+
    "\15\35\1\u024c\15\35\20\0\7\35\4\0\15\35\1\u024d"+
    "\14\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\14\35\1\u024e\16\35\20\0\7\35\4\0\27\35\1\u024f"+
    "\2\35\2\0\33\35\20\0\7\35\4\0\21\35\1\u01c8"+
    "\10\35\2\0\33\35\20\0\7\35\4\0\21\35\1\u0250"+
    "\10\35\2\0\33\35\3\0\1\u0251\14\0\7\35\4\0"+
    "\32\35\2\0\33\35\20\0\7\35\4\0\23\35\1\u014c"+
    "\6\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\14\35\1\u0252\16\35\20\0\7\35\4\0\10\35\1\u0253"+
    "\5\35\1\u0254\13\35\2\0\33\35\20\0\7\35\4\0"+
    "\32\35\2\0\23\35\1\u0255\7\35\20\0\7\35\4\0"+
    "\32\35\2\0\1\35\1\u0256\31\35\20\0\7\35\4\0"+
    "\16\35\1\u0257\13\35\2\0\23\35\1\u0258\7\35\20\0"+
    "\7\35\4\0\32\35\2\0\17\35\1\u0259\13\35\20\0"+
    "\7\35\4\0\32\35\2\0\16\35\1\u025a\14\35\20\0"+
    "\7\35\4\0\32\35\2\0\26\35\1\u025b\4\35\20\0"+
    "\7\35\4\0\32\35\2\0\11\35\1\u025c\21\35\20\0"+
    "\7\35\4\0\21\35\1\u024a\10\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\3\35\1\u0227\27\35\20\0"+
    "\7\35\4\0\32\35\2\0\1\35\1\u025d\31\35\20\0"+
    "\7\35\4\0\32\35\2\0\17\35\1\u025e\13\35\20\0"+
    "\7\35\4\0\32\35\2\0\23\35\1\u025f\7\35\20\0"+
    "\7\35\4\0\32\35\2\0\14\35\1\u0260\5\35\1\u0261"+
    "\10\35\20\0\7\35\4\0\1\u0262\31\35\2\0\33\35"+
    "\20\0\7\35\4\0\4\35\1\u0263\25\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\11\35\1\u0264\21\35"+
    "\20\0\7\35\4\0\32\35\2\0\5\35\1\u0209\25\35"+
    "\20\0\7\35\4\0\24\35\1\u0265\5\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\5\35\1\u0266\25\35"+
    "\20\0\7\35\4\0\32\35\2\0\15\35\1\u0108\15\35"+
    "\20\0\7\35\4\0\16\35\1\u0267\13\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\26\35\1\u0268\4\35"+
    "\20\0\7\35\4\0\32\35\2\0\15\35\1\u016f\15\35"+
    "\20\0\7\35\4\0\2\35\1\u0269\27\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\5\35\1\u026a\25\35"+
    "\20\0\7\35\4\0\32\35\2\0\14\35\1\u0162\16\35"+
    "\20\0\7\35\4\0\32\35\2\0\13\35\1\u0209\17\35"+
    "\20\0\7\35\4\0\32\35\2\0\3\35\1\u026b\27\35"+
    "\20\0\7\35\4\0\4\35\1\u026c\25\35\2\0\33\35"+
    "\20\0\7\35\4\0\2\35\1\u026d\27\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\1\35\1\u026e\31\35"+
    "\20\0\7\35\4\0\16\35\1\u026f\13\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\5\35\1\u0270\25\35"+
    "\20\0\7\35\4\0\15\35\1\u0271\14\35\2\0\33\35"+
    "\20\0\7\35\4\0\24\35\1\u0272\5\35\2\0\33\35"+
    "\20\0\7\35\4\0\23\35\1\u0273\6\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\7\35\1\u0210\23\35"+
    "\20\0\7\35\4\0\4\35\1\u0274\25\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\16\35\1\u0275\14\35"+
    "\20\0\7\35\4\0\4\35\1\u0276\25\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\5\35\1\u0277\25\35"+
    "\20\0\7\35\4\0\32\35\2\0\22\35\1\u0278\10\35"+
    "\20\0\7\35\4\0\32\35\2\0\22\35\1\u0279\10\35"+
    "\20\0\7\35\4\0\32\35\2\0\3\35\1\u027a\27\35"+
    "\20\0\7\35\4\0\32\35\2\0\24\35\1\u027a\6\35"+
    "\20\0\7\35\4\0\32\35\2\0\5\35\1\u027b\25\35"+
    "\20\0\7\35\4\0\32\35\2\0\13\35\1\u010d\17\35"+
    "\20\0\7\35\4\0\32\35\2\0\10\35\1\u0245\22\35"+
    "\20\0\7\35\4\0\32\35\2\0\23\35\1\u027c\7\35"+
    "\20\0\7\35\4\0\32\35\2\0\14\35\1\u027d\16\35"+
    "\20\0\7\35\4\0\32\35\2\0\24\35\1\u027e\6\35"+
    "\20\0\7\35\4\0\32\35\2\0\11\35\1\u027f\21\35"+
    "\20\0\7\35\4\0\32\35\2\0\15\35\1\u0280\15\35"+
    "\20\0\7\35\4\0\32\35\2\0\25\35\1\u0281\5\35"+
    "\20\0\7\35\4\0\32\35\2\0\20\35\1\u0282\12\35"+
    "\20\0\7\35\4\0\32\35\2\0\16\35\1\u0283\14\35"+
    "\20\0\7\35\4\0\32\35\2\0\14\35\1\u0284\16\35"+
    "\20\0\7\35\4\0\32\35\2\0\24\35\1\u0285\6\35"+
    "\20\0\7\35\4\0\32\35\2\0\1\35\1\151\31\35"+
    "\20\0\7\35\4\0\32\35\2\0\1\35\1\u0286\31\35"+
    "\20\0\7\35\4\0\32\35\2\0\5\35\1\u0287\25\35"+
    "\20\0\7\35\4\0\32\35\2\0\22\35\1\u0288\10\35"+
    "\20\0\7\35\4\0\32\35\2\0\1\35\1\u0289\31\35"+
    "\20\0\5\35\1\u0201\1\35\4\0\32\35\2\0\33\35"+
    "\20\0\2\35\1\u0201\4\35\4\0\32\35\2\0\33\35"+
    "\20\0\4\35\1\u0201\2\35\4\0\32\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\22\35\1\u028a\10\35"+
    "\106\0\1\u028b\33\0\7\35\4\0\32\35\2\0\4\35"+
    "\1\u028c\26\35\20\0\7\35\4\0\32\35\2\0\26\35"+
    "\1\u028d\4\35\20\0\7\35\4\0\32\35\2\0\17\35"+
    "\1\u028e\13\35\100\0\1\u028f\41\0\7\35\4\0\32\35"+
    "\2\0\1\35\1\u0290\31\35\20\0\7\35\4\0\32\35"+
    "\2\0\24\35\1\u0291\6\35\20\0\7\35\4\0\32\35"+
    "\2\0\1\35\1\u0292\31\35\20\0\7\35\4\0\32\35"+
    "\2\0\5\35\1\u0293\25\35\20\0\7\35\4\0\32\35"+
    "\2\0\11\35\1\u0294\21\35\20\0\7\35\4\0\32\35"+
    "\2\0\5\35\1\u0245\25\35\20\0\7\35\4\0\32\35"+
    "\2\0\11\35\1\u0295\21\35\20\0\7\35\4\0\32\35"+
    "\2\0\22\35\1\u0296\10\35\20\0\7\35\4\0\32\35"+
    "\2\0\24\35\1\u0201\6\35\20\0\7\35\4\0\32\35"+
    "\2\0\11\35\1\u0297\21\35\20\0\7\35\4\0\32\35"+
    "\2\0\3\35\1\u0298\12\35\1\u017e\14\35\20\0\7\35"+
    "\4\0\32\35\2\0\22\35\1\u0299\10\35\20\0\7\35"+
    "\4\0\32\35\2\0\3\35\1\u029a\27\35\20\0\7\35"+
    "\4\0\32\35\2\0\10\35\1\u029b\22\35\20\0\7\35"+
    "\4\0\32\35\2\0\27\35\1\u029c\3\35\20\0\7\35"+
    "\4\0\32\35\2\0\23\35\1\u029d\7\35\20\0\1\35"+
    "\1\u0215\1\35\1\u0216\1\35\1\u0217\1\u0201\4\0\32\35"+
    "\2\0\33\35\20\0\7\35\4\0\32\35\2\0\24\35"+
    "\1\u029e\6\35\20\0\7\35\4\0\32\35\2\0\5\35"+
    "\1\u01b6\25\35\20\0\7\35\4\0\32\35\2\0\4\35"+
    "\1\u029f\26\35\51\0\1\u02a0\70\0\7\35\4\0\32\35"+
    "\2\0\16\35\1\u02a1\14\35\20\0\7\35\4\0\32\35"+
    "\2\0\23\35\1\u02a2\7\35\20\0\7\35\4\0\32\35"+
    "\2\0\23\35\1\u02a3\7\35\20\0\7\35\4\0\17\35"+
    "\1\u02a4\12\35\2\0\33\35\20\0\7\35\4\0\4\35"+
    "\1\u02a5\25\35\2\0\33\35\20\0\7\35\4\0\15\35"+
    "\1\u02a6\14\35\2\0\33\35\20\0\7\35\4\0\21\35"+
    "\1\u02a7\10\35\2\0\33\35\20\0\7\35\4\0\4\35"+
    "\1\u0180\25\35\2\0\33\35\20\0\7\35\4\0\1\u02a8"+
    "\31\35\2\0\33\35\20\0\7\35\4\0\4\35\1\u016b"+
    "\25\35\2\0\33\35\20\0\7\35\4\0\15\35\1\u02a9"+
    "\14\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\1\35\1\u02aa\31\35\20\0\7\35\4\0\32\35\2\0"+
    "\24\35\1\u0150\6\35\20\0\7\35\4\0\22\35\1\304"+
    "\7\35\2\0\33\35\20\0\7\35\4\0\6\35\1\u02ab"+
    "\23\35\2\0\33\35\51\0\1\u02ac\70\0\7\35\4\0"+
    "\32\35\2\0\4\35\1\u0133\26\35\3\0\1\u02ad\14\0"+
    "\7\35\4\0\32\35\2\0\33\35\20\0\7\35\4\0"+
    "\32\35\2\0\20\35\1\u02ae\12\35\20\0\7\35\4\0"+
    "\32\35\2\0\14\35\1\u02af\16\35\20\0\7\35\4\0"+
    "\6\35\1\304\23\35\2\0\33\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u02b0\25\35\20\0\7\35\4\0"+
    "\23\35\1\u02b1\6\35\2\0\33\35\44\0\1\u02b2\75\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\u02b3\25\35\20\0"+
    "\7\35\4\0\32\35\2\0\16\35\1\u02b4\14\35\20\0"+
    "\7\35\4\0\32\35\2\0\26\35\1\u02b5\4\35\20\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\u0299\25\35\20\0"+
    "\7\35\4\0\32\35\2\0\23\35\1\u0192\7\35\20\0"+
    "\7\35\4\0\32\35\2\0\6\35\1\u02b6\24\35\20\0"+
    "\7\35\4\0\32\35\2\0\20\35\1\u02b7\12\35\20\0"+
    "\7\35\4\0\32\35\2\0\27\35\1\u0275\3\35\20\0"+
    "\7\35\4\0\32\35\2\0\10\35\1\u02b8\22\35\20\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\u02b9\25\35\20\0"+
    "\7\35\4\0\32\35\2\0\16\35\1\u02ba\14\35\20\0"+
    "\7\35\4\0\32\35\2\0\24\35\1\u02bb\6\35\20\0"+
    "\7\35\4\0\32\35\2\0\16\35\1\u02bc\14\35\20\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\316\25\35\20\0"+
    "\7\35\4\0\32\35\2\0\17\35\1\u02bd\13\35\20\0"+
    "\7\35\4\0\32\35\2\0\11\35\1\u02be\21\35\20\0"+
    "\7\35\4\0\21\35\1\u02bf\10\35\2\0\33\35\20\0"+
    "\7\35\4\0\3\35\1\u02c0\26\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\1\35\1\u02c1\31\35\20\0"+
    "\7\35\4\0\14\35\1\u014c\15\35\2\0\33\35\20\0"+
    "\7\35\4\0\4\35\1\u02c2\25\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\16\35\1\u02c3\14\35\20\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\u02c4\25\35\20\0"+
    "\7\35\4\0\23\35\1\u02c5\6\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\4\35\1\u02c6\26\35\20\0"+
    "\7\35\4\0\32\35\2\0\24\35\1\u02c7\6\35\20\0"+
    "\7\35\4\0\1\u01b1\31\35\2\0\33\35\20\0\7\35"+
    "\4\0\32\35\2\0\23\35\1\370\7\35\20\0\7\35"+
    "\4\0\32\35\2\0\6\35\1\u02c8\24\35\20\0\7\35"+
    "\4\0\32\35\2\0\7\35\1\u02c9\23\35\3\0\1\u02ca"+
    "\14\0\7\35\4\0\32\35\2\0\33\35\20\0\7\35"+
    "\4\0\4\35\1\u023b\25\35\2\0\33\35\20\0\7\35"+
    "\4\0\4\35\1\u0142\25\35\2\0\33\35\20\0\7\35"+
    "\4\0\22\35\1\u02cb\7\35\2\0\33\35\20\0\7\35"+
    "\4\0\32\35\2\0\11\35\1\134\21\35\20\0\7\35"+
    "\4\0\32\35\2\0\26\35\1\u02cc\4\35\20\0\7\35"+
    "\4\0\16\35\1\u02cd\13\35\2\0\33\35\20\0\7\35"+
    "\4\0\32\35\2\0\1\35\1\u02ce\31\35\20\0\7\35"+
    "\4\0\32\35\2\0\24\35\1\u0195\6\35\20\0\7\35"+
    "\4\0\32\35\2\0\1\35\1\u02cf\31\35\20\0\7\35"+
    "\4\0\32\35\2\0\5\35\1\u02d0\25\35\20\0\7\35"+
    "\4\0\32\35\2\0\16\35\1\u02d1\14\35\20\0\7\35"+
    "\4\0\32\35\2\0\1\35\1\u02d2\31\35\20\0\7\35"+
    "\4\0\32\35\2\0\14\35\1\u02d3\16\35\20\0\7\35"+
    "\4\0\32\35\2\0\24\35\1\u0245\6\35\20\0\7\35"+
    "\4\0\32\35\2\0\4\35\1\u02d4\26\35\20\0\7\35"+
    "\4\0\32\35\2\0\14\35\1\u02d5\16\35\20\0\3\35"+
    "\1\u0216\1\35\1\u0217\1\35\4\0\32\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\14\35\1\u02c6\16\35"+
    "\20\0\7\35\4\0\32\35\2\0\15\35\1\u02d6\15\35"+
    "\20\0\7\35\4\0\32\35\2\0\24\35\1\u0210\6\35"+
    "\20\0\7\35\4\0\32\35\2\0\16\35\1\u02d7\14\35"+
    "\20\0\7\35\4\0\32\35\2\0\6\35\1\u02d8\24\35"+
    "\113\0\1\u02d9\26\0\7\35\4\0\32\35\2\0\1\35"+
    "\1\u0149\31\35\20\0\7\35\4\0\32\35\2\0\5\35"+
    "\1\u0210\25\35\20\0\7\35\4\0\32\35\2\0\3\35"+
    "\1\u0211\27\35\105\0\1\u02da\34\0\7\35\4\0\32\35"+
    "\2\0\7\35\1\u02db\23\35\20\0\7\35\4\0\32\35"+
    "\2\0\24\35\1\u02dc\6\35\20\0\7\35\4\0\32\35"+
    "\2\0\3\35\1\u02dd\27\35\20\0\7\35\4\0\32\35"+
    "\2\0\3\35\1\u02c6\27\35\20\0\7\35\4\0\32\35"+
    "\2\0\22\35\1\u02de\10\35\20\0\7\35\4\0\32\35"+
    "\2\0\16\35\1\u029f\14\35\20\0\7\35\4\0\32\35"+
    "\2\0\3\35\1\u027e\27\35\20\0\7\35\4\0\32\35"+
    "\2\0\24\35\1\u02df\6\35\20\0\7\35\4\0\32\35"+
    "\2\0\10\35\1\304\22\35\20\0\7\35\4\0\32\35"+
    "\2\0\22\35\1\u02e0\10\35\20\0\7\35\4\0\32\35"+
    "\2\0\11\35\1\u02e1\21\35\20\0\7\35\4\0\32\35"+
    "\2\0\11\35\1\u02e2\21\35\50\0\1\u02e3\71\0\7\35"+
    "\4\0\32\35\2\0\4\35\1\u02e4\26\35\20\0\7\35"+
    "\4\0\32\35\2\0\23\35\1\u02e5\7\35\20\0\7\35"+
    "\4\0\32\35\2\0\17\35\1\316\13\35\20\0\7\35"+
    "\4\0\15\35\1\u02e6\14\35\2\0\33\35\20\0\7\35"+
    "\4\0\1\u02e7\31\35\2\0\33\35\20\0\7\35\4\0"+
    "\22\35\1\u02e8\7\35\2\0\33\35\20\0\7\35\4\0"+
    "\2\35\1\u01c9\27\35\2\0\33\35\20\0\7\35\4\0"+
    "\32\35\2\0\24\35\1\u02e9\6\35\20\0\7\35\4\0"+
    "\15\35\1\u02ea\14\35\2\0\33\35\57\0\1\u02eb\76\0"+
    "\1\u02ec\105\0\7\35\4\0\32\35\2\0\5\35\1\u02b6"+
    "\25\35\20\0\7\35\4\0\15\35\1\u02ed\14\35\2\0"+
    "\33\35\20\0\7\35\4\0\32\35\2\0\23\35\1\u02ee"+
    "\7\35\3\0\1\u02ef\14\0\7\35\4\0\32\35\2\0"+
    "\33\35\51\0\1\u02f0\70\0\7\35\4\0\32\35\2\0"+
    "\10\35\1\u02f1\22\35\20\0\7\35\4\0\32\35\2\0"+
    "\5\35\1\u02f2\25\35\20\0\7\35\4\0\32\35\2\0"+
    "\1\35\1\u02f3\31\35\20\0\7\35\4\0\32\35\2\0"+
    "\5\35\1\u02f4\25\35\20\0\7\35\4\0\32\35\2\0"+
    "\22\35\1\u02f5\10\35\20\0\7\35\4\0\32\35\2\0"+
    "\7\35\1\u01d0\23\35\20\0\7\35\4\0\32\35\2\0"+
    "\17\35\1\u02f6\13\35\20\0\7\35\4\0\32\35\2\0"+
    "\1\35\1\u02f7\31\35\20\0\7\35\4\0\32\35\2\0"+
    "\4\35\1\u02f8\26\35\20\0\7\35\4\0\30\35\1\u02ea"+
    "\1\35\2\0\33\35\20\0\7\35\4\0\24\35\1\u02f9"+
    "\5\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\14\35\1\u02fa\16\35\20\0\7\35\4\0\32\35\2\0"+
    "\26\35\1\u02fb\4\35\20\0\7\35\4\0\32\35\2\0"+
    "\14\35\1\u02fc\16\35\20\0\7\35\4\0\7\35\1\u02fd"+
    "\22\35\2\0\33\35\20\0\7\35\4\0\32\35\2\0"+
    "\25\35\1\u02fe\5\35\20\0\7\35\4\0\32\35\2\0"+
    "\5\35\1\u0165\25\35\33\0\1\u02ff\106\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u0300\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\16\35\1\u0301\14\35\20\0\7\35\4\0"+
    "\32\35\2\0\3\35\1\u0205\27\35\20\0\7\35\4\0"+
    "\32\35\2\0\16\35\1\u0201\14\35\20\0\7\35\4\0"+
    "\32\35\2\0\30\35\1\u0302\2\35\20\0\7\35\4\0"+
    "\32\35\2\0\25\35\1\u0303\5\35\20\0\7\35\4\0"+
    "\32\35\2\0\14\35\1\u0201\16\35\20\0\7\35\4\0"+
    "\32\35\2\0\24\35\1\u02c6\6\35\20\0\7\35\4\0"+
    "\32\35\2\0\23\35\1\u0304\7\35\20\0\7\35\4\0"+
    "\32\35\2\0\31\35\1\u01ed\1\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u0305\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\3\35\1\u0306\27\35\20\0\7\35\4\0"+
    "\32\35\2\0\1\35\1\u0307\31\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u0308\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u02c6\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\24\35\1\u01e5\6\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u0309\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\6\35\1\u030a\24\35\20\0\7\35\4\0"+
    "\32\35\2\0\17\35\1\u030b\13\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u030c\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\14\35\1\u030d\16\35\55\0\1\u030e\64\0"+
    "\7\35\4\0\32\35\2\0\14\35\1\u030f\16\35\20\0"+
    "\7\35\4\0\16\35\1\u018b\13\35\2\0\33\35\20\0"+
    "\7\35\4\0\10\35\1\u0310\21\35\2\0\33\35\20\0"+
    "\7\35\4\0\4\35\1\u0311\25\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\176\25\35\3\0"+
    "\1\u0312\14\0\7\35\4\0\32\35\2\0\33\35\56\0"+
    "\1\u0313\126\0\1\u0314\56\0\7\35\4\0\32\35\2\0"+
    "\1\35\1\u0315\31\35\43\0\1\u0316\121\0\1\u0317\76\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\u0318\25\35\20\0"+
    "\7\35\4\0\32\35\2\0\22\35\1\u0319\10\35\20\0"+
    "\7\35\4\0\32\35\2\0\3\35\1\u031a\27\35\20\0"+
    "\7\35\4\0\32\35\2\0\22\35\1\u031b\10\35\20\0"+
    "\7\35\4\0\32\35\2\0\22\35\1\u031c\10\35\20\0"+
    "\7\35\4\0\32\35\2\0\22\35\1\u031d\10\35\20\0"+
    "\7\35\4\0\32\35\2\0\4\35\1\u031e\26\35\20\0"+
    "\7\35\4\0\32\35\2\0\1\35\1\u031f\3\35\1\u0320"+
    "\25\35\20\0\7\35\4\0\21\35\1\u0321\10\35\2\0"+
    "\33\35\20\0\7\35\4\0\32\35\2\0\5\35\1\u0322"+
    "\25\35\20\0\7\35\4\0\32\35\2\0\31\35\1\u027e"+
    "\1\35\20\0\7\35\4\0\32\35\2\0\1\35\1\u0323"+
    "\31\35\20\0\7\35\4\0\32\35\2\0\22\35\1\u0324"+
    "\10\35\46\0\1\u0325\73\0\7\35\4\0\32\35\2\0"+
    "\16\35\1\u0326\14\35\20\0\7\35\4\0\32\35\2\0"+
    "\14\35\1\u0327\16\35\20\0\1\35\1\u0328\3\35\1\u0217"+
    "\1\35\4\0\32\35\2\0\33\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u0329\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\16\35\1\u032a\14\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u032b\25\35\20\0\7\35\4\0"+
    "\32\35\2\0\3\35\1\u032c\27\35\20\0\7\35\4\0"+
    "\32\35\2\0\23\35\1\u0210\7\35\20\0\7\35\4\0"+
    "\32\35\2\0\20\35\1\u0133\12\35\20\0\7\35\4\0"+
    "\32\35\2\0\16\35\1\u032d\14\35\20\0\7\35\4\0"+
    "\32\35\2\0\16\35\1\u0205\14\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u027e\25\35\56\0\1\u032e\63\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\u032f\25\35\20\0"+
    "\7\35\4\0\15\35\1\u0330\14\35\2\0\33\35\45\0"+
    "\1\u0331\113\0\1\u0332\102\0\7\35\4\0\32\35\2\0"+
    "\15\35\1\u0333\15\35\50\0\1\u0334\121\0\1\u0335\71\0"+
    "\7\35\4\0\32\35\2\0\22\35\1\u0336\10\35\20\0"+
    "\7\35\4\0\32\35\2\0\22\35\1\u0337\10\35\20\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\u0338\25\35\20\0"+
    "\7\35\4\0\32\35\2\0\11\35\1\u0339\21\35\20\0"+
    "\7\35\4\0\32\35\2\0\11\35\1\u033a\21\35\20\0"+
    "\7\35\4\0\32\35\2\0\23\35\1\u0133\7\35\20\0"+
    "\7\35\4\0\32\35\2\0\2\35\1\u02e2\30\35\20\0"+
    "\7\35\4\0\32\35\2\0\23\35\1\u027e\7\35\20\0"+
    "\7\35\4\0\4\35\1\u0149\25\35\2\0\33\35\20\0"+
    "\7\35\4\0\32\35\2\0\16\35\1\u0282\14\35\20\0"+
    "\7\35\4\0\32\35\2\0\16\35\1\u033b\14\35\20\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\u033c\25\35\46\0"+
    "\1\u033d\73\0\7\35\4\0\32\35\2\0\24\35\1\u031e"+
    "\6\35\20\0\7\35\4\0\32\35\2\0\31\35\1\u0133"+
    "\1\35\20\0\2\35\1\u033e\4\35\4\0\32\35\2\0"+
    "\33\35\20\0\7\35\4\0\32\35\2\0\24\35\1\u02d4"+
    "\6\35\20\0\7\35\4\0\32\35\2\0\17\35\1\u033f"+
    "\13\35\20\0\7\35\4\0\32\35\2\0\5\35\1\u0340"+
    "\25\35\20\0\7\35\4\0\32\35\2\0\11\35\1\u0341"+
    "\21\35\54\0\1\u0342\65\0\7\35\4\0\32\35\2\0"+
    "\22\35\1\u02ee\10\35\20\0\7\35\4\0\23\35\1\u023b"+
    "\6\35\2\0\33\35\37\0\1\u0343\136\0\1\u0344\65\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\u0345\25\35\56\0"+
    "\1\u0346\63\0\7\35\4\0\32\35\2\0\11\35\1\u0205"+
    "\21\35\20\0\7\35\4\0\32\35\2\0\11\35\1\u0347"+
    "\21\35\20\0\7\35\4\0\32\35\2\0\24\35\1\u0348"+
    "\6\35\20\0\7\35\4\0\32\35\2\0\4\35\1\u0348"+
    "\26\35\20\0\7\35\4\0\32\35\2\0\4\35\1\u0349"+
    "\26\35\20\0\6\35\1\u0201\4\0\32\35\2\0\33\35"+
    "\20\0\7\35\4\0\32\35\2\0\6\35\1\u034a\24\35"+
    "\20\0\7\35\4\0\32\35\2\0\32\35\1\u034b\33\0"+
    "\1\u034c\151\0\1\u034d\41\0\1\u0251\136\0\7\35\4\0"+
    "\32\35\2\0\23\35\1\u034e\7\35\51\0\1\u034f\70\0"+
    "\7\35\4\0\32\35\2\0\4\35\1\u030d\26\35\20\0"+
    "\7\35\4\0\32\35\2\0\1\35\1\u0350\31\35\20\0"+
    "\7\35\4\0\32\35\2\0\14\35\1\u0351\16\35\20\0"+
    "\7\35\4\0\32\35\2\0\5\35\1\u0352\25\35\43\0"+
    "\1\u0353\76\0\7\35\4\0\32\35\2\0\20\35\1\u0354"+
    "\12\35\20\0\7\35\4\0\32\35\2\0\2\35\1\u0355"+
    "\30\35\20\0\7\35\4\0\32\35\2\0\5\35\1\u0356"+
    "\25\35\20\0\7\35\4\0\32\35\2\0\4\35\1\u027e"+
    "\26\35\50\0\1\u0357\71\0\7\35\4\0\32\35\2\0"+
    "\1\35\1\u0358\31\35\20\0\7\35\4\0\32\35\2\0"+
    "\14\35\1\u0359\16\35\20\0\7\35\4\0\32\35\2\0"+
    "\22\35\1\u016b\10\35\56\0\1\u035a\63\0\7\35\4\0"+
    "\32\35\2\0\3\35\1\u02ae\27\35\20\0\7\35\4\0"+
    "\32\35\2\0\5\35\1\u0133\25\35\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[63140];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\66\1\2\11"+
    "\1\0\3\11\1\0\2\11\2\0\1\11\231\1\1\0"+
    "\226\1\1\0\40\1\1\0\173\1\1\0\3\1\1\0"+
    "\25\1\1\0\24\1\1\0\10\1\1\0\71\1\1\0"+
    "\3\1\1\0\20\1\1\0\13\1\2\0\4\1\1\0"+
    "\27\1\1\0\16\1\2\11\10\1\1\0\7\1\2\0"+
    "\2\1\2\0\16\1\1\0\16\1\1\0\3\1\2\0"+
    "\1\11\1\1\2\0\15\1\1\0\10\1\1\0\2\1"+
    "\2\0\1\1\1\0\1\11\7\1\1\11\4\1\3\0"+
    "\1\1\1\0\5\1\1\0\1\11\1\1\1\11\3\1"+
    "\1\0\3\1\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[858];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int _numberTokens = 0;
    private boolean _thereIsTokens = false;
    
    public boolean thereIsTokens() {return this._thereIsTokens;}
    public int numberTokens() {return this._numberTokens;}

    // Creates and returns a Token Object
    private Token foundSymbol(String token, String lexeme, int line, int column) {
        this._thereIsTokens = true;
        this._numberTokens++;
        Token t = new Token(token, lexeme, line, column);
        return t;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    this._thereIsTokens = false;
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignore unmatched characters */
            }
          // fall through
          case 83: break;
          case 2:
            { return foundSymbol("Operador Logico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 84: break;
          case 3:
            { return foundSymbol("Comentario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 85: break;
          case 4:
            { return foundSymbol("Operador Aritmetico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 86: break;
          case 5:
            { return foundSymbol("Operador de Bits", yytext(), yyline, yycolumn);
            }
          // fall through
          case 87: break;
          case 6:
            { return foundSymbol("Separador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 88: break;
          case 7:
            { return foundSymbol("Entero", yytext(), yyline, yycolumn);
            }
          // fall through
          case 89: break;
          case 8:
            { return foundSymbol("Comparador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 90: break;
          case 9:
            { return foundSymbol("Asignador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 91: break;
          case 10:
            { return foundSymbol("Identificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 92: break;
          case 11:
            { return foundSymbol("Cadena", yytext(), yyline, yycolumn);
            }
          // fall through
          case 93: break;
          case 12:
            { return foundSymbol("Caracter", yytext(), yyline, yycolumn);
            }
          // fall through
          case 94: break;
          case 13:
            { return foundSymbol("Complejo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 95: break;
          case 14:
            { return foundSymbol("Referencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 96: break;
          case 15:
            { return foundSymbol("Of", yytext(), yyline, yycolumn);
            }
          // fall through
          case 97: break;
          case 16:
            { return foundSymbol("Renombrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 98: break;
          case 17:
            { return foundSymbol("Iterador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 99: break;
          case 18:
            { return foundSymbol("Condicional", yytext(), yyline, yycolumn);
            }
          // fall through
          case 100: break;
          case 19:
            { return foundSymbol("Operadot de Pertenencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 101: break;
          case 20:
            { return foundSymbol("Operador de identidad", yytext(), yyline, yycolumn);
            }
          // fall through
          case 102: break;
          case 21:
            { return foundSymbol("Decimal", yytext(), yyline, yycolumn);
            }
          // fall through
          case 103: break;
          case 22:
            { return foundSymbol("Añadir", yytext(), yyline, yycolumn);
            }
          // fall through
          case 104: break;
          case 23:
            { return foundSymbol("Ordenar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 105: break;
          case 24:
            { return foundSymbol("Almacenamiento", yytext(), yyline, yycolumn);
            }
          // fall through
          case 106: break;
          case 25:
            { return foundSymbol("Salida", yytext(), yyline, yycolumn);
            }
          // fall through
          case 107: break;
          case 26:
            { return foundSymbol("Get", yytext(), yyline, yycolumn);
            }
          // fall through
          case 108: break;
          case 27:
            { return foundSymbol("Variable", yytext(), yyline, yycolumn);
            }
          // fall through
          case 109: break;
          case 28:
            { return foundSymbol("Modificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 110: break;
          case 29:
            { return foundSymbol("Update", yytext(), yyline, yycolumn);
            }
          // fall through
          case 111: break;
          case 30:
            { return foundSymbol("Funcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 112: break;
          case 31:
            { return foundSymbol("Limite", yytext(), yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 32:
            { return foundSymbol("Borrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 114: break;
          case 33:
            { return foundSymbol("Tipo de dato", yytext(), yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 34:
            { return foundSymbol("Crear", yytext(), yyline, yycolumn);
            }
          // fall through
          case 116: break;
          case 35:
            { return foundSymbol("Intentar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 117: break;
          case 36:
            { return foundSymbol("Cast", yytext(), yyline, yycolumn);
            }
          // fall through
          case 118: break;
          case 37:
            { return foundSymbol("Ejecutar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 119: break;
          case 38:
            { return foundSymbol("GoTo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 120: break;
          case 39:
            { return foundSymbol("Join", yytext(), yyline, yycolumn);
            }
          // fall through
          case 121: break;
          case 40:
            { return foundSymbol("Valor nulo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 122: break;
          case 41:
            { return foundSymbol("Incremento", yytext(), yyline, yycolumn);
            }
          // fall through
          case 123: break;
          case 42:
            { return foundSymbol("Debug", yytext(), yyline, yycolumn);
            }
          // fall through
          case 124: break;
          case 43:
            { return foundSymbol("Consequencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 125: break;
          case 44:
            { return foundSymbol("Booleano", yytext(), yyline, yycolumn);
            }
          // fall through
          case 126: break;
          case 45:
            { return foundSymbol("Vista", yytext(), yyline, yycolumn);
            }
          // fall through
          case 127: break;
          case 46:
            { return foundSymbol("Estructura de datos", yytext(), yyline, yycolumn);
            }
          // fall through
          case 128: break;
          case 47:
            { return foundSymbol("Enum", yytext(), yyline, yycolumn);
            }
          // fall through
          case 129: break;
          case 48:
            { return foundSymbol("Importar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 130: break;
          case 49:
            { return foundSymbol("Pasar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 131: break;
          case 50:
            { return foundSymbol("Alterar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 132: break;
          case 51:
            { return foundSymbol("Restriccion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 133: break;
          case 52:
            { return foundSymbol("Excepcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 134: break;
          case 53:
            { return foundSymbol("Evento", yytext(), yyline, yycolumn);
            }
          // fall through
          case 135: break;
          case 54:
            { return foundSymbol("Indice", yytext(), yyline, yycolumn);
            }
          // fall through
          case 136: break;
          case 55:
            { return foundSymbol("Tabla", yytext(), yyline, yycolumn);
            }
          // fall through
          case 137: break;
          case 56:
            { return foundSymbol("Union", yytext(), yyline, yycolumn);
            }
          // fall through
          case 138: break;
          case 57:
            { return foundSymbol("Asyncrono", yytext(), yyline, yycolumn);
            }
          // fall through
          case 139: break;
          case 58:
            { return foundSymbol("Clase", yytext(), yyline, yycolumn);
            }
          // fall through
          case 140: break;
          case 59:
            { return foundSymbol("Modificador de No Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 141: break;
          case 60:
            { return foundSymbol("Imprimir", yytext(), yyline, yycolumn);
            }
          // fall through
          case 142: break;
          case 61:
            { return foundSymbol("Clase Padre", yytext(), yyline, yycolumn);
            }
          // fall through
          case 143: break;
          case 62:
            { return foundSymbol("Regresar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 144: break;
          case 63:
            { return foundSymbol("Backup", yytext(), yyline, yycolumn);
            }
          // fall through
          case 145: break;
          case 64:
            { return foundSymbol("Columna", yytext(), yyline, yycolumn);
            }
          // fall through
          case 146: break;
          case 65:
            { return foundSymbol("Module", yytext(), yyline, yycolumn);
            }
          // fall through
          case 147: break;
          case 66:
            { return foundSymbol("Opcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 148: break;
          case 67:
            { return foundSymbol("Select", yytext(), yyline, yycolumn);
            }
          // fall through
          case 149: break;
          case 68:
            { return foundSymbol("Modificador de Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 150: break;
          case 69:
            { return foundSymbol("Operador de typo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 151: break;
          case 70:
            { return foundSymbol("Insertar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 152: break;
          case 71:
            { return foundSymbol("Rango", yytext(), yyline, yycolumn);
            }
          // fall through
          case 153: break;
          case 72:
            { return foundSymbol("AddHandler", yytext(), yyline, yycolumn);
            }
          // fall through
          case 154: break;
          case 73:
            { return foundSymbol("Parcial", yytext(), yyline, yycolumn);
            }
          // fall through
          case 155: break;
          case 74:
            { return foundSymbol("Erencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 156: break;
          case 75:
            { return foundSymbol("Paquete", yytext(), yyline, yycolumn);
            }
          // fall through
          case 157: break;
          case 76:
            { return foundSymbol("Database", yytext(), yyline, yycolumn);
            }
          // fall through
          case 158: break;
          case 77:
            { return foundSymbol("Operador de VB", yytext(), yyline, yycolumn);
            }
          // fall through
          case 159: break;
          case 78:
            { return foundSymbol("Continuar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 160: break;
          case 79:
            { return foundSymbol("Namespace", yytext(), yyline, yycolumn);
            }
          // fall through
          case 161: break;
          case 80:
            { return foundSymbol("Estructura", yytext(), yyline, yycolumn);
            }
          // fall through
          case 162: break;
          case 81:
            { return foundSymbol("Interface", yytext(), yyline, yycolumn);
            }
          // fall through
          case 163: break;
          case 82:
            { return foundSymbol("Operador de instancia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
