// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/resources/Lexer.flex

// User Code (Import dependencies or declare variables)
import java.util.HashMap;
/*TODO.
    - Refactor some of the token (separe the 'Separator' category into their own tokens)
*/

@SuppressWarnings("fallthrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\40\0\1\1\1\2\1\3\1\4\1\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\20\1\25"+
    "\1\20\1\26\1\20\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\0\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\0\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131"+
    "\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\2\4\1\10\1\4\1\11\1\4\1\12"+
    "\1\13\1\14\1\15\1\16\1\15\1\17\30\20\1\21"+
    "\1\22\1\5\23\20\1\23\1\5\1\24\1\5\1\15"+
    "\1\0\1\25\1\16\1\26\1\0\1\27\1\30\1\4"+
    "\1\31\2\0\1\32\1\33\62\20\1\34\12\20\1\35"+
    "\45\20\1\36\12\20\1\37\11\20\1\40\1\20\1\41"+
    "\1\42\6\20\1\26\25\20\1\43\1\0\1\43\1\44"+
    "\1\45\1\20\1\46\36\20\1\47\4\20\1\50\12\20"+
    "\1\51\13\20\1\52\1\4\16\20\1\53\5\20\1\54"+
    "\10\20\1\55\6\20\1\56\2\20\1\57\35\20\1\56"+
    "\1\60\11\20\1\61\5\20\1\62\1\0\3\20\1\63"+
    "\1\20\1\26\22\20\1\64\7\20\1\0\13\20\1\65"+
    "\5\20\1\66\6\20\1\67\12\20\1\70\5\20\1\71"+
    "\1\72\10\20\1\73\27\20\1\74\1\75\3\20\1\76"+
    "\1\77\10\20\1\100\12\20\1\62\1\101\7\20\1\102"+
    "\1\103\1\104\1\105\5\20\1\106\10\20\1\0\3\20"+
    "\1\0\1\20\1\107\7\20\1\110\10\20\1\62\1\111"+
    "\3\20\1\0\1\112\2\20\1\36\3\20\1\113\11\20"+
    "\1\114\1\115\1\20\1\0\6\20\1\116\1\20\1\0"+
    "\33\20\1\117\4\20\1\120\3\20\1\121\5\20\1\122"+
    "\1\20\1\123\1\20\1\124\5\20\1\124\1\62\5\20"+
    "\1\0\3\20\1\0\1\20\1\125\7\20\1\126\2\20"+
    "\1\114\2\20\1\127\1\130\1\0\3\20\1\131\1\20"+
    "\1\132\5\20\2\0\3\20\1\0\1\133\3\20\1\51"+
    "\5\20\1\134\10\20\1\135\1\136\1\20\1\137\1\20"+
    "\1\0\15\20\1\42\1\140\1\41\5\20\1\141\3\20"+
    "\1\0\2\20\1\142\4\20\2\0\1\20\1\143\1\0"+
    "\11\20\1\144\4\20\1\0\2\20\1\62\1\20\1\145"+
    "\3\20\1\146\5\20\1\0\3\20\1\147\2\0\1\46"+
    "\1\20\1\0\5\20\1\150\7\20\1\0\3\20\1\151"+
    "\4\20\1\0\2\20\2\0\1\20\1\72\2\20\1\152"+
    "\3\20\1\153\1\120\3\20\1\154\1\20\3\0\4\20"+
    "\1\155\1\156\1\20\1\0\1\113\4\20\1\0\3\20"+
    "\1\0\2\20\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[881];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\132\0\264\0\u010e\0\132\0\u0168\0\u01c2\0\u021c"+
    "\0\132\0\132\0\u0276\0\u02d0\0\132\0\u032a\0\132\0\u0384"+
    "\0\u03de\0\132\0\132\0\u0438\0\264\0\u0492\0\u04ec\0\u0546"+
    "\0\u05a0\0\u05fa\0\u0654\0\u06ae\0\u0708\0\u0762\0\u07bc\0\u0816"+
    "\0\u0870\0\u08ca\0\u0924\0\u097e\0\u09d8\0\u0a32\0\u0a8c\0\u0ae6"+
    "\0\u0b40\0\u0b9a\0\u0bf4\0\u0c4e\0\u0ca8\0\u0d02\0\u0d5c\0\132"+
    "\0\132\0\u0168\0\u0db6\0\u0e10\0\u0e6a\0\u0ec4\0\u0f1e\0\u0f78"+
    "\0\u0fd2\0\u102c\0\u1086\0\u10e0\0\u113a\0\u1194\0\u11ee\0\u1248"+
    "\0\u12a2\0\u12fc\0\u1356\0\u13b0\0\u140a\0\132\0\u1464\0\132"+
    "\0\132\0\132\0\u010e\0\132\0\132\0\132\0\u14be\0\132"+
    "\0\132\0\132\0\132\0\u1518\0\u1572\0\132\0\132\0\u15cc"+
    "\0\u1626\0\u1680\0\u16da\0\u1734\0\u178e\0\u17e8\0\u1842\0\u189c"+
    "\0\u18f6\0\u1950\0\u19aa\0\u1a04\0\u1a5e\0\u1ab8\0\u1b12\0\u1b6c"+
    "\0\u1bc6\0\u1c20\0\u1c7a\0\u1cd4\0\u1d2e\0\u1d88\0\u1de2\0\u1e3c"+
    "\0\u1e96\0\u1ef0\0\u1f4a\0\u1fa4\0\u1ffe\0\u2058\0\u20b2\0\u210c"+
    "\0\u2166\0\u21c0\0\u221a\0\u2274\0\u22ce\0\u2328\0\u2382\0\u23dc"+
    "\0\u2436\0\u2490\0\u24ea\0\u2544\0\u259e\0\u25f8\0\u2652\0\u26ac"+
    "\0\u2706\0\u08ca\0\u2760\0\u27ba\0\u2814\0\u286e\0\u28c8\0\u2922"+
    "\0\u297c\0\u29d6\0\u2a30\0\u2a8a\0\u08ca\0\u2ae4\0\u2b3e\0\u2b98"+
    "\0\u2bf2\0\u2c4c\0\u2ca6\0\u2d00\0\u2d5a\0\u2db4\0\u2e0e\0\u2e68"+
    "\0\u2ec2\0\u2f1c\0\u2f76\0\u2fd0\0\u302a\0\u3084\0\u30de\0\u3138"+
    "\0\u3192\0\u31ec\0\u3246\0\u32a0\0\u32fa\0\u3354\0\u33ae\0\u3408"+
    "\0\u3462\0\u34bc\0\u3516\0\u3570\0\u35ca\0\u3624\0\u367e\0\u36d8"+
    "\0\u3732\0\u378c\0\u37e6\0\u3840\0\u389a\0\u38f4\0\u394e\0\u39a8"+
    "\0\u3a02\0\u3a5c\0\u3ab6\0\u3b10\0\u3b6a\0\u3bc4\0\u3c1e\0\u3c78"+
    "\0\u3cd2\0\u3d2c\0\u3d86\0\u3de0\0\u3e3a\0\u3e94\0\u3eee\0\u08ca"+
    "\0\u3f48\0\u3fa2\0\u3ffc\0\u4056\0\u40b0\0\u410a\0\u4164\0\u41be"+
    "\0\u4218\0\u08ca\0\u4272\0\u42cc\0\u4326\0\u4380\0\u43da\0\u4434"+
    "\0\u448e\0\u44e8\0\u4542\0\u459c\0\u45f6\0\u4650\0\u46aa\0\u4704"+
    "\0\u475e\0\u47b8\0\u4812\0\u486c\0\u48c6\0\u4920\0\u497a\0\u49d4"+
    "\0\u4a2e\0\u4a88\0\u4ae2\0\u08ca\0\u4b3c\0\u08ca\0\u4b96\0\u4bf0"+
    "\0\u4c4a\0\u4ca4\0\u4cfe\0\u4d58\0\u4db2\0\u4e0c\0\u4e66\0\u4ec0"+
    "\0\u4f1a\0\u4f74\0\u4fce\0\u5028\0\u5082\0\u50dc\0\u5136\0\u5190"+
    "\0\u51ea\0\u5244\0\u529e\0\u52f8\0\u5352\0\u53ac\0\u5406\0\u5460"+
    "\0\u54ba\0\u5514\0\u556e\0\u55c8\0\u08ca\0\u5622\0\u567c\0\u56d6"+
    "\0\u5730\0\u08ca\0\u578a\0\u57e4\0\u583e\0\u5898\0\u58f2\0\u594c"+
    "\0\u59a6\0\u5a00\0\u5a5a\0\u5ab4\0\u5b0e\0\u5b68\0\u5bc2\0\u5c1c"+
    "\0\u5c76\0\u5cd0\0\u5d2a\0\u5d84\0\u5dde\0\u5e38\0\u5e92\0\u5eec"+
    "\0\u08ca\0\u5f46\0\u5fa0\0\u5ffa\0\u6054\0\u60ae\0\u6108\0\u6162"+
    "\0\u61bc\0\u6216\0\u6270\0\u62ca\0\u6324\0\u637e\0\u63d8\0\u6432"+
    "\0\u08ca\0\u648c\0\u64e6\0\u6540\0\u659a\0\u65f4\0\u08ca\0\u664e"+
    "\0\u66a8\0\u6702\0\u675c\0\u67b6\0\u6810\0\u686a\0\u68c4\0\u08ca"+
    "\0\u691e\0\u6978\0\u69d2\0\u6a2c\0\u6a86\0\u6ae0\0\u08ca\0\u6b3a"+
    "\0\u6b94\0\u08ca\0\u6bee\0\u6c48\0\u6ca2\0\u6cfc\0\u6d56\0\u6db0"+
    "\0\u6e0a\0\u6e64\0\u6ebe\0\u6f18\0\u6f72\0\u6fcc\0\u7026\0\u7080"+
    "\0\u70da\0\u7134\0\u718e\0\u71e8\0\u7242\0\u729c\0\u72f6\0\u7350"+
    "\0\u73aa\0\u7404\0\u745e\0\u74b8\0\u7512\0\u756c\0\u75c6\0\u7620"+
    "\0\u08ca\0\u767a\0\u76d4\0\u772e\0\u7788\0\u77e2\0\u783c\0\u7896"+
    "\0\u78f0\0\u794a\0\u79a4\0\u79fe\0\u7a58\0\u7ab2\0\u7b0c\0\u7b66"+
    "\0\u7bc0\0\u7c1a\0\u7c74\0\u7cce\0\u7d28\0\u08ca\0\u7d82\0\u7ddc"+
    "\0\u7e36\0\u7e90\0\u7eea\0\u7f44\0\u7f9e\0\u7ff8\0\u8052\0\u80ac"+
    "\0\u8106\0\u8160\0\u81ba\0\u8214\0\u826e\0\u82c8\0\u8322\0\u837c"+
    "\0\u83d6\0\u8430\0\u08ca\0\u848a\0\u84e4\0\u853e\0\u8598\0\u85f2"+
    "\0\u864c\0\u86a6\0\u8700\0\u875a\0\u87b4\0\u880e\0\u8868\0\u88c2"+
    "\0\u891c\0\u8976\0\u89d0\0\u8a2a\0\u8a84\0\u8ade\0\u08ca\0\u8b38"+
    "\0\u8b92\0\u8bec\0\u8c46\0\u8ca0\0\u08ca\0\u8cfa\0\u8d54\0\u8dae"+
    "\0\u8e08\0\u8e62\0\u8ebc\0\u08ca\0\u8f16\0\u8f70\0\u8fca\0\u9024"+
    "\0\u907e\0\u90d8\0\u9132\0\u918c\0\u91e6\0\u9240\0\u08ca\0\u929a"+
    "\0\u92f4\0\u934e\0\u93a8\0\u9402\0\u08ca\0\u08ca\0\u945c\0\u94b6"+
    "\0\u9510\0\u956a\0\u95c4\0\u961e\0\u9678\0\u96d2\0\u08ca\0\u972c"+
    "\0\u9786\0\u97e0\0\u983a\0\u9894\0\u98ee\0\u9948\0\u99a2\0\u99fc"+
    "\0\u9a56\0\u9ab0\0\u9b0a\0\u9b64\0\u9bbe\0\u9c18\0\u9c72\0\u9ccc"+
    "\0\u9d26\0\u9d80\0\u9dda\0\u9e34\0\u9e8e\0\u9ee8\0\u08ca\0\u08ca"+
    "\0\u9f42\0\u9f9c\0\u9ff6\0\u08ca\0\u08ca\0\ua050\0\ua0aa\0\ua104"+
    "\0\ua15e\0\ua1b8\0\ua212\0\ua26c\0\ua2c6\0\u08ca\0\ua320\0\ua37a"+
    "\0\ua3d4\0\ua42e\0\ua488\0\ua4e2\0\ua53c\0\ua596\0\ua5f0\0\ua64a"+
    "\0\u08ca\0\u08ca\0\ua6a4\0\ua6fe\0\ua758\0\ua7b2\0\ua80c\0\ua866"+
    "\0\ua8c0\0\u08ca\0\u08ca\0\u08ca\0\u08ca\0\ua91a\0\ua974\0\ua9ce"+
    "\0\uaa28\0\uaa82\0\u08ca\0\uaadc\0\uab36\0\uab90\0\uabea\0\uac44"+
    "\0\uac9e\0\uacf8\0\uad52\0\uadac\0\uae06\0\uae60\0\uaeba\0\uaf14"+
    "\0\uaf6e\0\u08ca\0\uafc8\0\ub022\0\ub07c\0\ub0d6\0\ub130\0\ub18a"+
    "\0\ub1e4\0\u08ca\0\ub23e\0\ub298\0\ub2f2\0\ub34c\0\ub3a6\0\ub400"+
    "\0\ub45a\0\ub4b4\0\ub50e\0\u08ca\0\ub568\0\ub5c2\0\ub61c\0\ub676"+
    "\0\u08ca\0\ub6d0\0\ub72a\0\u08ca\0\ub784\0\ub7de\0\ub838\0\u08ca"+
    "\0\ub892\0\ub8ec\0\ub946\0\ub9a0\0\ub9fa\0\uba54\0\ubaae\0\ubb08"+
    "\0\ubb62\0\u08ca\0\u08ca\0\ubbbc\0\ubc16\0\ubc70\0\ubcca\0\ubd24"+
    "\0\ubd7e\0\ubdd8\0\ube32\0\u08ca\0\ube8c\0\ubee6\0\ubf40\0\ubf9a"+
    "\0\ubff4\0\uc04e\0\uc0a8\0\uc102\0\uc15c\0\uc1b6\0\uc210\0\uc26a"+
    "\0\uc2c4\0\uc31e\0\uc378\0\uc3d2\0\uc42c\0\uc486\0\uc4e0\0\uc53a"+
    "\0\uc594\0\uc5ee\0\uc648\0\uc6a2\0\uc6fc\0\uc756\0\uc7b0\0\uc80a"+
    "\0\uc864\0\u08ca\0\uc8be\0\uc918\0\uc972\0\uc9cc\0\uca26\0\uca80"+
    "\0\ucada\0\ucb34\0\u08ca\0\ucb8e\0\ucbe8\0\ucc42\0\ucc9c\0\uccf6"+
    "\0\u08ca\0\ucd50\0\u08ca\0\ucdaa\0\u08ca\0\uce04\0\uce5e\0\uceb8"+
    "\0\ucf12\0\ucf6c\0\ucfc6\0\ud020\0\ud07a\0\ud0d4\0\ud12e\0\ud188"+
    "\0\ud1e2\0\ud23c\0\ud296\0\ud2f0\0\ud34a\0\ud3a4\0\ud3fe\0\u08ca"+
    "\0\ud458\0\ud4b2\0\ud50c\0\ud566\0\ud5c0\0\ud61a\0\ud674\0\u08ca"+
    "\0\ud6ce\0\ud728\0\ud782\0\ud7dc\0\ud836\0\u08ca\0\u08ca\0\ud890"+
    "\0\ud8ea\0\ud944\0\ud99e\0\u08ca\0\ud9f8\0\u08ca\0\uda52\0\udaac"+
    "\0\udb06\0\udb60\0\udbba\0\udc14\0\udc6e\0\udcc8\0\udd22\0\udd7c"+
    "\0\uddd6\0\u08ca\0\ude30\0\ude8a\0\ud782\0\u08ca\0\udee4\0\udf3e"+
    "\0\udf98\0\udff2\0\ue04c\0\u4e0c\0\ue0a6\0\ue100\0\ue15a\0\ue1b4"+
    "\0\ue20e\0\ue268\0\ue2c2\0\ue31c\0\u08ca\0\u08ca\0\ue376\0\u08ca"+
    "\0\ue3d0\0\ue42a\0\ue484\0\ue4de\0\ue538\0\ue592\0\ue5ec\0\ue646"+
    "\0\ue6a0\0\ue6fa\0\ue754\0\ue7ae\0\ue808\0\ue862\0\ue8bc\0\132"+
    "\0\u08ca\0\132\0\ue916\0\ue970\0\ue9ca\0\uea24\0\uea7e\0\u08ca"+
    "\0\uead8\0\ueb32\0\ueb8c\0\uebe6\0\uec40\0\uec9a\0\u08ca\0\uecf4"+
    "\0\ued4e\0\ueda8\0\uee02\0\uee5c\0\ueeb6\0\uef10\0\u08ca\0\uef6a"+
    "\0\uefc4\0\uf01e\0\uf078\0\uf0d2\0\uf12c\0\uf186\0\uf1e0\0\uf23a"+
    "\0\uf294\0\u08ca\0\uf2ee\0\uf348\0\uf3a2\0\uf3fc\0\uf456\0\uf4b0"+
    "\0\uf50a\0\uf564\0\uf5be\0\u08ca\0\uf618\0\uf672\0\uf6cc\0\u08ca"+
    "\0\uf726\0\uf780\0\uf7da\0\uf834\0\uf88e\0\uf8e8\0\uf942\0\uf99c"+
    "\0\uf9f6\0\u08ca\0\ufa50\0\ufaaa\0\132\0\ufb04\0\ufb5e\0\ufbb8"+
    "\0\ufc12\0\ufc6c\0\ufcc6\0\ufd20\0\u08ca\0\ufd7a\0\ufdd4\0\ufe2e"+
    "\0\ufe88\0\ufee2\0\uff3c\0\uff96\0\ufff0\1\112\1\244\1\376"+
    "\0\u08ca\1\u0158\1\u01b2\1\u020c\1\u0266\1\u02c0\1\u031a\1\u0374"+
    "\1\u03ce\1\u0428\1\u0482\0\132\1\u04dc\1\u0536\0\u08ca\1\u0590"+
    "\1\u05ea\1\u0644\0\u08ca\0\132\1\u069e\1\u06f8\1\u0752\0\u08ca"+
    "\1\u07ac\1\u0806\1\u0860\1\u08ba\1\u0914\1\u096e\1\u09c8\1\u0a22"+
    "\0\u08ca\0\u08ca\1\u0a7c\1\u0ad6\0\132\1\u0b30\1\u0b8a\1\u0be4"+
    "\1\u0c3e\1\u0c98\1\u0cf2\1\u0d4c\1\u0da6\1\u0e00\1\u0e5a\1\u0eb4"+
    "\0\132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[881];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\7\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\2\42\1\60"+
    "\1\2\1\61\1\62\1\2\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\42\1\72\2\42\1\73\1\42"+
    "\1\74\1\75\1\76\1\42\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\42\1\105\1\42\1\106\1\107\1\110"+
    "\1\111\164\0\1\112\77\0\3\113\1\114\3\113\1\0"+
    "\122\113\32\0\1\115\105\0\1\116\23\0\1\115\77\0"+
    "\3\117\1\0\3\117\1\120\60\117\1\0\41\117\12\0"+
    "\1\6\4\0\1\121\12\0\1\115\112\0\1\122\4\0"+
    "\7\21\3\0\1\115\114\0\1\122\2\0\7\21\3\0"+
    "\1\115\111\0\1\123\4\0\1\6\12\0\1\115\115\0"+
    "\1\124\1\0\7\21\12\0\1\125\36\0\1\125\3\0"+
    "\1\126\56\0\1\62\1\112\131\0\1\112\1\62\132\0"+
    "\1\127\115\0\7\42\6\0\3\42\1\130\7\42\1\131"+
    "\1\42\1\132\4\42\1\133\7\42\4\0\4\42\1\134"+
    "\7\42\1\135\1\42\1\136\3\42\1\137\10\42\24\0"+
    "\7\42\6\0\1\140\3\42\1\141\25\42\4\0\31\42"+
    "\1\142\1\42\24\0\7\42\6\0\1\42\1\143\1\144"+
    "\1\145\3\42\1\146\1\147\2\42\1\150\2\42\1\151"+
    "\2\42\1\152\1\153\1\42\1\154\5\42\4\0\1\42"+
    "\1\155\31\42\24\0\7\42\6\0\1\156\3\42\1\157"+
    "\3\42\1\160\10\42\1\161\10\42\4\0\5\42\1\162"+
    "\3\42\1\163\21\42\24\0\7\42\6\0\27\42\1\164"+
    "\2\42\4\0\1\42\1\165\14\42\1\166\3\42\1\167"+
    "\3\42\1\170\1\42\1\171\2\42\24\0\7\42\6\0"+
    "\10\42\1\172\5\42\1\173\5\42\1\174\5\42\4\0"+
    "\1\42\1\175\20\42\1\176\10\42\24\0\7\42\6\0"+
    "\21\42\1\177\10\42\4\0\5\42\1\200\11\42\1\201"+
    "\13\42\24\0\7\42\6\0\1\202\31\42\4\0\1\42"+
    "\1\203\31\42\24\0\7\42\6\0\15\42\1\204\14\42"+
    "\4\0\33\42\24\0\7\42\6\0\16\42\1\205\13\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\33\42"+
    "\24\0\7\42\6\0\4\42\1\206\3\42\1\207\21\42"+
    "\4\0\5\42\1\210\3\42\1\211\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\212\11\42\1\213\5\42"+
    "\1\214\3\42\1\215\1\42\24\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\216\3\42\1\217\11\42\1\220\5\42"+
    "\1\221\5\42\24\0\7\42\6\0\21\42\1\222\2\42"+
    "\1\223\5\42\4\0\2\42\1\224\3\42\1\225\11\42"+
    "\1\226\1\42\1\227\2\42\1\230\1\231\4\42\24\0"+
    "\7\42\6\0\21\42\1\232\10\42\4\0\1\42\1\233"+
    "\31\42\24\0\7\42\6\0\32\42\4\0\25\42\1\234"+
    "\5\42\24\0\7\42\6\0\4\42\1\235\3\42\1\236"+
    "\5\42\1\237\13\42\4\0\1\42\1\240\3\42\1\241"+
    "\25\42\24\0\7\42\6\0\1\42\1\242\2\42\1\243"+
    "\25\42\4\0\10\42\1\244\1\245\12\42\1\246\1\247"+
    "\5\42\24\0\7\42\6\0\1\250\15\42\1\251\2\42"+
    "\1\252\10\42\4\0\10\42\1\253\11\42\1\254\6\42"+
    "\1\255\1\42\24\0\7\42\6\0\10\42\1\256\2\42"+
    "\1\257\1\42\1\260\1\42\1\261\2\42\1\262\7\42"+
    "\4\0\23\42\1\263\7\42\24\0\7\42\6\0\1\264"+
    "\7\42\1\265\21\42\4\0\33\42\24\0\7\42\6\0"+
    "\7\42\1\266\22\42\4\0\11\42\1\267\10\42\1\270"+
    "\10\42\24\0\7\42\6\0\32\42\4\0\17\42\1\75"+
    "\13\42\24\0\7\42\6\0\32\42\4\0\2\42\1\271"+
    "\13\42\1\272\4\42\1\273\3\42\1\274\3\42\24\0"+
    "\7\42\6\0\32\42\4\0\17\42\1\275\2\42\1\276"+
    "\6\42\1\277\1\42\24\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\300\6\42\1\301\3\42\1\302\2\42\1\303"+
    "\13\42\24\0\7\42\6\0\32\42\4\0\1\42\1\277"+
    "\3\42\1\304\3\42\1\305\5\42\1\306\13\42\24\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\307\1\42\1\310"+
    "\11\42\1\311\2\42\24\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\175\7\42\1\312\2\42\1\313\2\42\1\314"+
    "\2\42\1\315\2\42\1\316\5\42\24\0\7\42\6\0"+
    "\32\42\4\0\14\42\1\317\16\42\24\0\7\42\6\0"+
    "\32\42\4\0\6\42\1\320\6\42\1\321\1\322\4\42"+
    "\1\323\7\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\324\7\42\1\325\5\42\1\326\13\42\24\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\327\3\42\1\330\11\42"+
    "\1\331\5\42\1\221\5\42\24\0\7\42\6\0\32\42"+
    "\4\0\22\42\1\332\10\42\24\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\333\20\42\1\334\2\42\1\335\5\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\336\3\42"+
    "\1\337\25\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\340\2\42\1\341\13\42\1\342\1\343\1\42\1\344"+
    "\1\42\1\345\1\42\24\0\7\42\6\0\32\42\4\0"+
    "\10\42\1\346\1\347\10\42\1\350\2\42\1\351\5\42"+
    "\24\0\7\42\6\0\32\42\4\0\11\42\1\352\21\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\353\15\42"+
    "\1\354\13\42\24\0\7\42\6\0\32\42\4\0\10\42"+
    "\1\355\1\356\21\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\357\21\42\36\0\1\115\74\0\1\116\11\0"+
    "\1\120\142\0\7\360\116\0\1\361\1\0\1\361\2\0"+
    "\7\362\123\0\7\42\6\0\3\42\1\363\26\42\4\0"+
    "\33\42\24\0\7\42\6\0\13\42\1\364\7\42\1\365"+
    "\6\42\4\0\33\42\24\0\7\42\6\0\30\42\1\364"+
    "\1\42\4\0\33\42\24\0\7\42\6\0\2\42\1\366"+
    "\27\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\4\42\1\367\26\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\370\21\42\24\0\7\42\6\0\32\42\4\0"+
    "\4\42\1\371\26\42\24\0\7\42\6\0\32\42\4\0"+
    "\22\42\1\372\10\42\24\0\7\42\6\0\2\42\1\373"+
    "\27\42\4\0\33\42\24\0\7\42\6\0\23\42\1\374"+
    "\6\42\4\0\33\42\24\0\7\42\6\0\21\42\1\375"+
    "\3\42\1\376\4\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\17\42\1\377\11\42\1\u0100\1\42\24\0"+
    "\7\42\6\0\32\42\4\0\10\42\1\u0101\22\42\24\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u0100\1\u0102\2\42"+
    "\1\u0103\25\42\24\0\7\42\6\0\4\42\1\u0104\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u0105\14\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u0106\14\42\24\0\7\42\6\0\13\42\1\u0107\1\42"+
    "\1\u0108\14\42\4\0\2\42\1\u0109\30\42\24\0\7\42"+
    "\6\0\4\42\1\u010a\25\42\4\0\33\42\24\0\7\42"+
    "\6\0\1\42\1\u010b\30\42\4\0\10\42\1\u010c\5\42"+
    "\1\u0106\5\42\1\u010d\6\42\24\0\7\42\6\0\10\42"+
    "\1\147\2\42\1\150\6\42\1\u010e\7\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\14\42\1\u010f\16\42"+
    "\24\0\7\42\6\0\23\42\1\u0110\6\42\4\0\33\42"+
    "\24\0\7\42\6\0\13\42\1\u0111\6\42\1\133\7\42"+
    "\4\0\33\42\24\0\7\42\6\0\22\42\1\u0112\7\42"+
    "\4\0\33\42\24\0\7\42\6\0\16\42\1\u0113\13\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u0114\16\42\24\0\7\42\6\0\32\42\4\0\15\42"+
    "\1\u0115\4\42\1\u0116\10\42\24\0\7\42\6\0\4\42"+
    "\1\u0117\3\42\1\u0118\21\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\3\42\1\u0119\27\42\24\0\7\42"+
    "\6\0\32\42\4\0\4\42\1\u011a\26\42\24\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u011b\20\42\1\u011c\10\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u011d\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\11\42\1\u011e\21\42"+
    "\24\0\7\42\6\0\27\42\1\u011f\2\42\4\0\33\42"+
    "\24\0\7\42\6\0\21\42\1\u0120\10\42\4\0\33\42"+
    "\24\0\7\42\6\0\13\42\1\u0121\16\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\14\42\1\u0122\16\42"+
    "\24\0\7\42\6\0\32\42\4\0\11\42\1\u0123\21\42"+
    "\24\0\7\42\6\0\16\42\1\u0124\13\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\24\42\1\u0125\6\42"+
    "\24\0\7\42\6\0\23\42\1\u0126\6\42\4\0\33\42"+
    "\24\0\7\42\6\0\25\42\1\u0127\4\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\16\42\1\u0128\14\42"+
    "\24\0\7\42\6\0\3\42\1\u0129\11\42\1\u012a\4\42"+
    "\1\u012b\1\u012c\6\42\4\0\33\42\24\0\7\42\6\0"+
    "\10\42\1\u012d\21\42\4\0\33\42\24\0\7\42\6\0"+
    "\5\42\1\u012e\24\42\4\0\33\42\24\0\7\42\6\0"+
    "\12\42\1\u012f\1\42\1\u0130\15\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u0131\6\42\24\0"+
    "\7\42\6\0\32\42\4\0\2\42\1\212\30\42\24\0"+
    "\7\42\6\0\32\42\4\0\4\42\1\u0132\26\42\24\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u0133\7\42\24\0"+
    "\7\42\6\0\1\42\1\u0134\1\u0135\27\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\15\42\1\u0136\4\42"+
    "\1\u0137\10\42\24\0\7\42\6\0\32\42\4\0\30\42"+
    "\1\u0138\2\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u0139\5\42\1\u013a\6\42\24\0\7\42\6\0\32\42"+
    "\4\0\14\42\1\u013b\16\42\24\0\7\42\6\0\3\42"+
    "\1\u013c\26\42\4\0\33\42\24\0\7\42\6\0\23\42"+
    "\1\u012a\6\42\4\0\33\42\24\0\7\42\6\0\32\42"+
    "\4\0\12\42\1\u013d\20\42\24\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u013e\16\42\1\u013f\6\42\24\0\7\42"+
    "\6\0\4\42\1\u0140\25\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u0141\6\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u0142\25\42\24\0\7\42"+
    "\6\0\10\42\1\u0143\5\42\1\u0144\13\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\22\42\1\u0145\10\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u0146\25\42"+
    "\24\0\7\42\6\0\14\42\1\u0147\15\42\4\0\33\42"+
    "\24\0\7\42\6\0\6\42\1\u0148\23\42\4\0\33\42"+
    "\24\0\7\42\6\0\26\42\1\u0149\3\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\11\42\1\u014a\21\42"+
    "\24\0\7\42\6\0\3\42\1\u014b\26\42\4\0\1\42"+
    "\1\u014c\13\42\1\u014d\5\42\1\u014e\7\42\24\0\7\42"+
    "\6\0\32\42\4\0\31\42\1\277\1\42\24\0\7\42"+
    "\6\0\13\42\1\u014f\7\42\1\u0150\6\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\u0151\31\42"+
    "\24\0\7\42\6\0\32\42\4\0\16\42\1\u0152\14\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\u0153\3\42"+
    "\1\u0154\11\42\1\u0155\2\42\1\u0156\10\42\24\0\7\42"+
    "\6\0\32\42\4\0\2\42\1\u0157\30\42\24\0\7\42"+
    "\6\0\1\42\1\u0158\30\42\4\0\33\42\24\0\7\42"+
    "\6\0\3\42\1\u0159\13\42\1\u015a\12\42\4\0\33\42"+
    "\24\0\7\42\6\0\24\42\1\u015b\5\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u015c\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\25\42\1\u015d\3\42"+
    "\1\u015e\1\42\24\0\7\42\6\0\32\42\4\0\20\42"+
    "\1\u015f\12\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u0160\14\42\24\0\7\42\6\0\32\42\4\0\17\42"+
    "\1\326\13\42\24\0\7\42\6\0\10\42\1\u0161\21\42"+
    "\4\0\33\42\24\0\7\42\6\0\3\42\1\u0162\26\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\10\42"+
    "\1\341\22\42\24\0\7\42\6\0\32\42\4\0\11\42"+
    "\1\u0163\21\42\24\0\7\42\6\0\13\42\1\u0164\16\42"+
    "\4\0\33\42\24\0\7\42\6\0\4\42\1\u0165\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\4\42\1\u0166\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\4\42"+
    "\1\u0167\17\42\1\u0168\6\42\24\0\7\42\6\0\32\42"+
    "\4\0\11\42\1\u0169\21\42\24\0\7\42\6\0\32\42"+
    "\4\0\23\42\1\u016a\7\42\24\0\7\42\6\0\32\42"+
    "\4\0\4\42\1\332\26\42\24\0\7\42\6\0\32\42"+
    "\4\0\23\42\1\u016b\5\42\1\u016c\1\42\24\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u016d\31\42\24\0\7\42"+
    "\6\0\32\42\4\0\17\42\1\u016e\13\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u016f\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u0170\6\42\24\0\7\42"+
    "\6\0\32\42\4\0\23\42\1\u0171\1\u0172\6\42\24\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u0173\31\42\24\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u0174\31\42\24\0"+
    "\7\42\6\0\32\42\4\0\15\42\1\u0175\1\u0176\14\42"+
    "\24\0\7\42\6\0\32\42\4\0\3\42\1\u0177\2\42"+
    "\1\u0178\5\42\1\u0179\16\42\24\0\7\42\6\0\32\42"+
    "\4\0\3\42\1\u017a\27\42\24\0\7\42\6\0\32\42"+
    "\4\0\25\42\1\u017b\5\42\24\0\7\42\6\0\32\42"+
    "\4\0\11\42\1\u017c\11\42\1\u017d\7\42\24\0\7\42"+
    "\6\0\32\42\4\0\25\42\1\u017e\5\42\24\0\7\42"+
    "\6\0\32\42\4\0\3\42\1\u017f\20\42\1\u0180\6\42"+
    "\24\0\7\42\6\0\32\42\4\0\16\42\1\u0181\14\42"+
    "\24\0\7\42\6\0\32\42\4\0\17\42\1\u0182\13\42"+
    "\24\0\7\42\6\0\32\42\4\0\22\42\1\u0183\10\42"+
    "\24\0\7\42\6\0\32\42\4\0\17\42\1\u0184\13\42"+
    "\24\0\7\42\6\0\32\42\4\0\16\42\1\u0185\14\42"+
    "\24\0\7\42\6\0\32\42\4\0\17\42\1\u0186\13\42"+
    "\24\0\7\42\6\0\32\42\4\0\20\42\1\u0187\12\42"+
    "\24\0\7\42\6\0\32\42\4\0\23\42\1\u0188\1\u0189"+
    "\6\42\5\0\1\u018a\16\0\7\42\6\0\32\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\15\42\1\u018b"+
    "\15\42\24\0\7\42\6\0\32\42\4\0\23\42\1\u017a"+
    "\7\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u018c"+
    "\14\42\24\0\7\42\6\0\32\42\4\0\24\42\1\u018d"+
    "\6\42\24\0\7\42\6\0\32\42\4\0\27\42\1\u018e"+
    "\3\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u018f"+
    "\5\42\1\u0190\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\3\42\1\u0191\17\42\1\u0192\7\42\24\0\7\42\6\0"+
    "\32\42\4\0\11\42\1\u0193\5\42\1\u0194\13\42\24\0"+
    "\7\42\6\0\32\42\4\0\2\42\1\u0195\30\42\24\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u0196\21\42\24\0"+
    "\7\42\6\0\32\42\4\0\21\42\1\u0197\2\42\1\u0198"+
    "\6\42\24\0\7\42\6\0\32\42\4\0\14\42\1\u0199"+
    "\16\42\24\0\7\42\6\0\32\42\4\0\17\42\1\u019a"+
    "\13\42\24\0\7\42\6\0\32\42\4\0\1\42\1\u019b"+
    "\20\42\1\u019c\10\42\24\0\7\42\6\0\32\42\4\0"+
    "\20\42\1\u019d\12\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u019e\21\42\24\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u019f\14\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u01a0\10\42\1\u01a1\10\42\24\0\7\42\6\0"+
    "\32\42\4\0\15\42\1\u0170\15\42\24\0\7\42\6\0"+
    "\32\42\4\0\1\42\1\u01a2\23\42\1\u015d\3\42\1\u01a3"+
    "\1\42\24\0\7\42\6\0\32\42\4\0\20\42\1\u01a4"+
    "\12\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u01a5"+
    "\14\42\24\0\7\42\6\0\32\42\4\0\22\42\1\u0131"+
    "\10\42\24\0\7\42\6\0\32\42\4\0\11\42\1\u01a6"+
    "\2\42\1\u01a7\16\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u01a8\21\42\24\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u01a9\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u01aa\25\42\24\0\7\360\12\0\1\125\36\0"+
    "\1\125\3\0\1\126\45\0\7\362\123\0\7\362\55\0"+
    "\1\126\26\0\1\u01ab\16\0\7\42\6\0\32\42\4\0"+
    "\33\42\24\0\7\42\6\0\4\42\1\u01ac\25\42\4\0"+
    "\33\42\24\0\7\42\6\0\7\42\1\u01ad\22\42\4\0"+
    "\22\42\1\u01ae\10\42\24\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u01af\31\42\24\0\7\42\6\0\1\u01b0\31\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u01b1\31\42\24\0\7\42\6\0\12\42\1\u01b2\17\42"+
    "\4\0\33\42\24\0\7\42\6\0\26\42\1\u01b3\3\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u01b4\25\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u01b5\31\42\24\0\7\42\6\0\32\42\4\0\17\42"+
    "\1\u0102\13\42\24\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u01b6\6\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u010d\31\42\24\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u01b7\16\42\24\0\7\42\6\0\32\42\4\0\3\42"+
    "\1\u01b7\27\42\24\0\7\42\6\0\2\42\1\u01b8\27\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u01b7\6\42\24\0\7\42\6\0\32\42\4\0\7\42"+
    "\1\u01b7\23\42\24\0\7\42\6\0\24\42\1\u01b9\5\42"+
    "\4\0\33\42\24\0\7\42\6\0\22\42\1\u01ba\7\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\12\42"+
    "\1\u01b7\20\42\24\0\7\42\6\0\1\u01bb\31\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\31\42\1\u0100"+
    "\1\42\24\0\7\42\6\0\32\42\4\0\17\42\1\u01bc"+
    "\13\42\24\0\7\42\6\0\32\42\4\0\22\42\1\u01b7"+
    "\10\42\24\0\7\42\6\0\32\42\4\0\10\42\1\u010c"+
    "\22\42\24\0\7\42\6\0\32\42\4\0\14\42\1\u01bd"+
    "\16\42\24\0\7\42\6\0\1\u01be\31\42\4\0\33\42"+
    "\24\0\7\42\6\0\4\42\1\u01bf\25\42\4\0\33\42"+
    "\24\0\7\42\6\0\23\42\1\u01c0\6\42\4\0\33\42"+
    "\24\0\7\42\6\0\17\42\1\u0179\12\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u01c1\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u01c2\25\42"+
    "\24\0\7\42\6\0\2\42\1\u01bd\27\42\4\0\33\42"+
    "\24\0\7\42\6\0\22\42\1\u01c3\7\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\10\42\1\u01c4\22\42"+
    "\24\0\7\42\6\0\32\42\4\0\23\42\1\u01c5\7\42"+
    "\24\0\7\42\6\0\32\42\4\0\17\42\1\u01c6\13\42"+
    "\24\0\7\42\6\0\32\42\4\0\16\42\1\u01c7\14\42"+
    "\24\0\7\42\6\0\32\42\4\0\24\42\1\u011a\6\42"+
    "\24\0\7\42\6\0\14\42\1\u01c8\15\42\4\0\33\42"+
    "\24\0\7\42\6\0\4\42\1\u01c9\25\42\4\0\33\42"+
    "\24\0\7\42\6\0\13\42\1\u01ca\16\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\23\42\1\u015d\7\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u01cb\25\42"+
    "\24\0\7\42\6\0\24\42\1\u01cc\5\42\4\0\33\42"+
    "\24\0\7\42\6\0\23\42\1\u01cd\3\42\1\u01ce\2\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\17\42"+
    "\1\u01cf\13\42\24\0\7\42\6\0\10\42\1\u01d0\21\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\4\42"+
    "\1\u01d1\26\42\24\0\7\42\6\0\4\42\1\u01d2\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\4\42\1\u01d3\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\4\42\1\u01d4\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\16\42\1\u01d5\13\42"+
    "\4\0\33\42\24\0\7\42\6\0\15\42\1\u01d6\14\42"+
    "\4\0\33\42\24\0\7\42\6\0\23\42\1\u01d7\6\42"+
    "\4\0\33\42\24\0\7\42\6\0\4\42\1\364\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\10\42\1\u01d8\21\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\25\42"+
    "\1\u01d9\5\42\24\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u01da\6\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u01db\31\42\24\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u01dc\16\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u01dd\25\42\24\0\7\42\6\0\32\42\4\0\22\42"+
    "\1\u01de\10\42\24\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u01c4\6\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u01df\25\42\24\0\7\42\6\0\10\42\1\u01e0\5\42"+
    "\1\u01e1\13\42\4\0\10\42\1\u01e2\22\42\24\0\7\42"+
    "\6\0\32\42\4\0\14\42\1\u01df\16\42\24\0\7\42"+
    "\6\0\4\42\1\u01e3\25\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u01e4\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\22\42\1\u01e5\10\42\24\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u01e6\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\14\42\1\u01e7\16\42\24\0\7\42"+
    "\6\0\32\42\4\0\22\42\1\u01e8\10\42\24\0\7\42"+
    "\6\0\14\42\1\u01e9\15\42\4\0\33\42\24\0\7\42"+
    "\6\0\2\42\1\u01ea\27\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u01eb\6\42\24\0\7\42"+
    "\6\0\32\42\4\0\25\42\1\u01ec\5\42\24\0\7\42"+
    "\6\0\7\42\1\u012e\22\42\4\0\33\42\24\0\7\42"+
    "\6\0\15\42\1\u01ed\14\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\23\42\1\u01ee\7\42\24\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u01ef\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\4\42\1\u01f0\26\42\24\0\7\42"+
    "\6\0\32\42\4\0\17\42\1\u01f1\13\42\24\0\7\42"+
    "\6\0\32\42\4\0\25\42\1\u01f2\5\42\24\0\7\42"+
    "\6\0\4\42\1\u01f3\25\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\22\42\1\u01f4\10\42\24\0\7\42"+
    "\6\0\32\42\4\0\7\42\1\u01f5\23\42\24\0\7\42"+
    "\6\0\32\42\4\0\3\42\1\u01f6\27\42\24\0\7\42"+
    "\6\0\32\42\4\0\20\42\1\u01f7\12\42\24\0\7\42"+
    "\6\0\32\42\4\0\20\42\1\u01f8\12\42\24\0\7\42"+
    "\6\0\32\42\4\0\25\42\1\u01f9\5\42\24\0\7\42"+
    "\6\0\13\42\1\u01fa\16\42\4\0\33\42\24\0\7\42"+
    "\6\0\16\42\1\u0147\13\42\4\0\33\42\24\0\7\42"+
    "\6\0\15\42\1\u01fb\14\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\16\42\1\u01fc\14\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u01fd\25\42\24\0\7\42"+
    "\6\0\2\42\1\u01fe\27\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u01ff\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u0200\6\42\24\0\7\42"+
    "\6\0\16\42\1\u0201\1\42\1\u0202\11\42\4\0\33\42"+
    "\24\0\7\42\6\0\1\u0203\31\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u0204\14\42\24\0"+
    "\7\42\6\0\24\42\1\u0205\5\42\4\0\33\42\24\0"+
    "\7\42\6\0\26\42\1\u0206\3\42\4\0\33\42\24\0"+
    "\7\42\6\0\21\42\1\u0207\10\42\4\0\33\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0208\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\10\42\1\u0209\22\42\24\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u020a\6\42\24\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u020b\6\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u020c\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u020d\14\42\24\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u020e\21\42\24\0"+
    "\7\42\6\0\32\42\4\0\14\42\1\u020f\16\42\24\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u0210\31\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0211\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u0212\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u0213\27\42\24\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u0211\10\42\24\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u0214\7\42\24\0"+
    "\7\42\6\0\32\42\4\0\20\42\1\u0215\12\42\24\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u0216\1\u0217\6\42"+
    "\24\0\7\42\6\0\32\42\4\0\11\42\1\u0218\21\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\u0219\31\42"+
    "\24\0\7\42\6\0\32\42\4\0\24\42\1\u021a\6\42"+
    "\24\0\7\42\6\0\32\42\4\0\2\42\1\u01f5\30\42"+
    "\24\0\7\42\6\0\32\42\4\0\6\42\1\u021b\24\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u021c\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\15\42\1\u021d\15\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u021e\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u021f\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\u0220\31\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\u0221\31\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u0222\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\15\42\1\u0223\15\42"+
    "\24\0\7\42\6\0\32\42\4\0\3\42\1\u0157\27\42"+
    "\24\0\7\42\6\0\32\42\4\0\2\42\1\u0224\30\42"+
    "\24\0\7\42\6\0\32\42\4\0\14\42\1\u0225\2\42"+
    "\1\u0226\13\42\24\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u0227\6\42\24\0\1\42\1\u0228\1\42\1\u0229\1\42"+
    "\1\u022a\1\u0211\6\0\32\42\4\0\5\42\1\u022b\25\42"+
    "\115\0\1\u022c\40\0\7\42\6\0\32\42\4\0\2\42"+
    "\1\u022d\30\42\24\0\7\42\6\0\32\42\4\0\7\42"+
    "\1\u0211\23\42\24\0\7\42\6\0\32\42\4\0\11\42"+
    "\1\u022e\21\42\24\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u022f\16\42\5\0\1\u0230\16\0\7\42\6\0\32\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\13\42"+
    "\1\u0231\17\42\24\0\7\42\6\0\32\42\4\0\23\42"+
    "\1\u0232\7\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u0233\7\42\1\u0234\4\42\24\0\7\42\6\0\32\42"+
    "\4\0\24\42\1\u0235\6\42\24\0\7\42\6\0\32\42"+
    "\4\0\14\42\1\u0236\16\42\24\0\7\42\6\0\32\42"+
    "\4\0\23\42\1\u0237\7\42\24\0\7\42\6\0\32\42"+
    "\4\0\25\42\1\u0238\5\42\24\0\7\42\6\0\32\42"+
    "\4\0\25\42\1\u0239\5\42\24\0\7\42\6\0\32\42"+
    "\4\0\6\42\1\u023a\24\42\24\0\7\42\6\0\32\42"+
    "\4\0\22\42\1\u023b\10\42\24\0\7\42\6\0\32\42"+
    "\4\0\24\42\1\u023c\6\42\24\0\7\42\6\0\32\42"+
    "\4\0\11\42\1\u023d\21\42\24\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u023e\25\42\24\0\7\42\6\0\32\42"+
    "\4\0\24\42\1\u023f\6\42\24\0\7\42\6\0\32\42"+
    "\4\0\3\42\1\u0240\27\42\24\0\7\42\6\0\32\42"+
    "\4\0\23\42\1\u023a\7\42\24\0\7\42\6\0\32\42"+
    "\4\0\17\42\1\u0241\13\42\24\0\7\42\6\0\32\42"+
    "\4\0\16\42\1\u0242\14\42\24\0\7\42\6\0\32\42"+
    "\4\0\14\42\1\u01ec\16\42\24\0\7\42\6\0\32\42"+
    "\4\0\24\42\1\u0243\6\42\24\0\7\42\6\0\32\42"+
    "\4\0\4\42\1\u0244\26\42\24\0\7\42\6\0\32\42"+
    "\4\0\1\42\1\u0245\31\42\24\0\7\42\6\0\32\42"+
    "\4\0\14\42\1\u0246\16\42\24\0\7\42\6\0\32\42"+
    "\4\0\10\42\1\u01a3\22\42\24\0\7\42\6\0\32\42"+
    "\4\0\14\42\1\u0247\16\42\43\0\1\u0248\112\0\7\42"+
    "\6\0\21\42\1\u0249\10\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u024a\31\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u024b\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\23\42\1\u024c\7\42\24\0\7\42"+
    "\6\0\32\42\4\0\14\42\1\u024d\16\42\24\0\7\42"+
    "\6\0\32\42\4\0\31\42\1\u021a\1\42\24\0\7\42"+
    "\6\0\24\42\1\u024e\5\42\4\0\33\42\24\0\7\42"+
    "\6\0\4\42\1\u024f\25\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\6\42\1\u0141\24\42\24\0\7\42"+
    "\6\0\32\42\4\0\14\42\1\u0141\16\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u01b7\25\42\24\0\7\42"+
    "\6\0\12\42\1\u0250\17\42\4\0\33\42\24\0\7\42"+
    "\6\0\14\42\1\u0251\15\42\4\0\33\42\24\0\7\42"+
    "\6\0\23\42\1\u0252\6\42\4\0\33\42\24\0\7\42"+
    "\6\0\23\42\1\u0253\6\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\22\42\1\u0105\10\42\24\0\7\42"+
    "\6\0\1\42\1\u0254\30\42\4\0\33\42\24\0\7\42"+
    "\6\0\23\42\1\u0255\6\42\4\0\33\42\24\0\7\42"+
    "\6\0\10\42\1\u0256\21\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\7\42\1\u0257\23\42\24\0\7\42"+
    "\6\0\32\42\4\0\3\42\1\u0258\27\42\24\0\7\42"+
    "\6\0\23\42\1\u0259\6\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u0179\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\22\42\1\u025a\10\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u025b\6\42\24\0\7\42"+
    "\6\0\4\42\1\u0147\25\42\4\0\33\42\24\0\7\42"+
    "\6\0\10\42\1\u025c\21\42\4\0\33\42\5\0\1\u025d"+
    "\16\0\7\42\6\0\32\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\16\42\1\u025e\14\42\24\0\7\42"+
    "\6\0\17\42\1\u025f\12\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\31\42\1\u0260\1\42\24\0\7\42"+
    "\6\0\32\42\4\0\15\42\1\u0261\15\42\24\0\7\42"+
    "\6\0\15\42\1\u0262\14\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\14\42\1\u0263\16\42\24\0\7\42"+
    "\6\0\27\42\1\u0264\2\42\4\0\33\42\24\0\7\42"+
    "\6\0\21\42\1\u01d7\10\42\4\0\33\42\24\0\7\42"+
    "\6\0\21\42\1\u0265\10\42\4\0\33\42\5\0\1\u0266"+
    "\16\0\7\42\6\0\32\42\4\0\33\42\24\0\7\42"+
    "\6\0\23\42\1\u015a\6\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\14\42\1\u0267\16\42\24\0\7\42"+
    "\6\0\10\42\1\u0268\5\42\1\u0269\13\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\23\42\1\u026a\7\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\u026b\31\42"+
    "\24\0\7\42\6\0\16\42\1\u026c\13\42\4\0\23\42"+
    "\1\u026d\7\42\24\0\7\42\6\0\32\42\4\0\17\42"+
    "\1\u026e\13\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u026f\14\42\24\0\7\42\6\0\32\42\4\0\26\42"+
    "\1\u0270\4\42\24\0\7\42\6\0\32\42\4\0\11\42"+
    "\1\u0271\21\42\24\0\7\42\6\0\21\42\1\u025f\10\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\3\42"+
    "\1\u023b\27\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u0272\31\42\24\0\7\42\6\0\32\42\4\0\17\42"+
    "\1\u0273\13\42\24\0\7\42\6\0\32\42\4\0\23\42"+
    "\1\u0274\7\42\24\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u0275\5\42\1\u0276\10\42\24\0\7\42\6\0\1\u0277"+
    "\31\42\4\0\33\42\24\0\7\42\6\0\4\42\1\u0278"+
    "\25\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u0279\21\42\24\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u021a\25\42\24\0\7\42\6\0\24\42\1\u027a"+
    "\5\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u027b\25\42\24\0\7\42\6\0\32\42\4\0"+
    "\15\42\1\u0115\15\42\24\0\7\42\6\0\16\42\1\u027c"+
    "\13\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\26\42\1\u027d\4\42\24\0\7\42\6\0\32\42\4\0"+
    "\15\42\1\u027e\15\42\24\0\7\42\6\0\2\42\1\u027f"+
    "\27\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u0280\25\42\24\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u0170\16\42\24\0\7\42\6\0\32\42\4\0"+
    "\13\42\1\u021a\17\42\24\0\7\42\6\0\32\42\4\0"+
    "\3\42\1\u0281\27\42\24\0\7\42\6\0\4\42\1\u0282"+
    "\25\42\4\0\33\42\24\0\7\42\6\0\2\42\1\u0283"+
    "\27\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u0284\31\42\24\0\7\42\6\0\16\42\1\u0285"+
    "\13\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u0286\25\42\24\0\7\42\6\0\15\42\1\u0287"+
    "\14\42\4\0\33\42\24\0\7\42\6\0\24\42\1\u0288"+
    "\5\42\4\0\33\42\24\0\7\42\6\0\23\42\1\u0289"+
    "\6\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\7\42\1\u0223\23\42\24\0\7\42\6\0\4\42\1\u028a"+
    "\25\42\4\0\33\42\24\0\7\42\6\0\4\42\1\u028b"+
    "\25\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u028c\14\42\24\0\7\42\6\0\4\42\1\u028d"+
    "\25\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u028e\25\42\24\0\7\42\6\0\32\42\4\0"+
    "\22\42\1\u028f\10\42\24\0\7\42\6\0\32\42\4\0"+
    "\22\42\1\u0290\10\42\24\0\7\42\6\0\32\42\4\0"+
    "\3\42\1\u0291\27\42\24\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u0291\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u0292\25\42\24\0\7\42\6\0\32\42\4\0"+
    "\13\42\1\u011a\17\42\24\0\7\42\6\0\32\42\4\0"+
    "\10\42\1\u025a\22\42\24\0\7\42\6\0\32\42\4\0"+
    "\23\42\1\u0293\7\42\24\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u0294\16\42\24\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u0295\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\11\42\1\u0296\21\42\24\0\7\42\6\0\32\42\4\0"+
    "\15\42\1\u0297\15\42\24\0\7\42\6\0\32\42\4\0"+
    "\25\42\1\u0298\5\42\24\0\7\42\6\0\32\42\4\0"+
    "\20\42\1\u0299\12\42\24\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u029a\14\42\24\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u029b\16\42\24\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u029c\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\165\31\42\24\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u029d\31\42\24\0\7\42\6\0\32\42\4\0"+
    "\5\42\1\u029e\25\42\24\0\7\42\6\0\32\42\4\0"+
    "\22\42\1\u029f\10\42\24\0\7\42\6\0\32\42\4\0"+
    "\1\42\1\u02a0\31\42\24\0\5\42\1\u0211\1\42\6\0"+
    "\32\42\4\0\33\42\24\0\2\42\1\u0211\4\42\6\0"+
    "\32\42\4\0\33\42\24\0\4\42\1\u0211\2\42\6\0"+
    "\32\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\22\42\1\u02a1\10\42\116\0\1\u02a2\37\0\7\42\6\0"+
    "\32\42\4\0\4\42\1\u02a3\26\42\24\0\7\42\6\0"+
    "\32\42\4\0\26\42\1\u02a4\4\42\24\0\7\42\6\0"+
    "\32\42\4\0\17\42\1\u02a5\13\42\110\0\1\u02a6\45\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u02a7\31\42\24\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u02a8\6\42\24\0"+
    "\7\42\6\0\32\42\4\0\1\42\1\u02a9\31\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u02aa\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u02ab\21\42\24\0"+
    "\7\42\6\0\32\42\4\0\5\42\1\u025a\25\42\24\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u02ac\21\42\24\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u02ad\10\42\24\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u0211\6\42\24\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u02ae\21\42\24\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u02af\12\42\1\u018c"+
    "\14\42\24\0\7\42\6\0\32\42\4\0\22\42\1\u02b0"+
    "\10\42\24\0\7\42\6\0\32\42\4\0\3\42\1\u02b1"+
    "\27\42\24\0\7\42\6\0\32\42\4\0\10\42\1\u02b2"+
    "\22\42\24\0\7\42\6\0\32\42\4\0\27\42\1\u02b3"+
    "\3\42\24\0\7\42\6\0\32\42\4\0\23\42\1\u02b4"+
    "\7\42\24\0\1\42\1\u0228\1\42\1\u0229\1\42\1\u022a"+
    "\1\u0211\6\0\32\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\24\42\1\u02b5\6\42\24\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u02b6\25\42\24\0\7\42\6\0"+
    "\32\42\4\0\4\42\1\u02b7\26\42\57\0\1\u02b8\76\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u02b9\14\42\24\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u02ba\7\42\24\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\u02bb\7\42\24\0"+
    "\7\42\6\0\17\42\1\u02bc\12\42\4\0\33\42\24\0"+
    "\7\42\6\0\4\42\1\u02bd\25\42\4\0\33\42\24\0"+
    "\7\42\6\0\15\42\1\u02be\14\42\4\0\33\42\24\0"+
    "\7\42\6\0\21\42\1\u02bf\10\42\4\0\33\42\24\0"+
    "\7\42\6\0\4\42\1\u018e\25\42\4\0\33\42\24\0"+
    "\7\42\6\0\1\u02c0\31\42\4\0\33\42\24\0\7\42"+
    "\6\0\4\42\1\u0179\25\42\4\0\33\42\24\0\7\42"+
    "\6\0\15\42\1\u02c1\14\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u02c2\31\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u015e\6\42\24\0\7\42"+
    "\6\0\22\42\1\364\7\42\4\0\33\42\24\0\7\42"+
    "\6\0\6\42\1\u02c3\23\42\4\0\33\42\57\0\1\u02c4"+
    "\76\0\7\42\6\0\32\42\4\0\4\42\1\u0141\26\42"+
    "\5\0\1\u02c5\16\0\7\42\6\0\32\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\20\42\1\u02c6\12\42"+
    "\24\0\7\42\6\0\32\42\4\0\14\42\1\u02c7\16\42"+
    "\24\0\7\42\6\0\6\42\1\u028b\23\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u02c8\25\42"+
    "\24\0\7\42\6\0\23\42\1\u01d5\6\42\4\0\33\42"+
    "\52\0\1\u02c9\103\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u02ca\25\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u02cb\14\42\24\0\7\42\6\0\32\42\4\0\26\42"+
    "\1\u02cc\4\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u02b0\25\42\24\0\7\42\6\0\32\42\4\0\23\42"+
    "\1\u02cd\7\42\24\0\7\42\6\0\32\42\4\0\6\42"+
    "\1\u02ce\24\42\24\0\7\42\6\0\32\42\4\0\20\42"+
    "\1\u02cf\12\42\24\0\7\42\6\0\32\42\4\0\27\42"+
    "\1\u028c\3\42\24\0\7\42\6\0\32\42\4\0\10\42"+
    "\1\u02d0\22\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u02d1\25\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u02d2\14\42\24\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u02d3\6\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u02d4\14\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\332\25\42\24\0\7\42\6\0\32\42\4\0\17\42"+
    "\1\u02d5\13\42\24\0\7\42\6\0\32\42\4\0\11\42"+
    "\1\u02d6\21\42\24\0\7\42\6\0\21\42\1\u02d7\10\42"+
    "\4\0\33\42\24\0\7\42\6\0\3\42\1\u02d8\26\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u02d9\31\42\24\0\7\42\6\0\14\42\1\u015a\15\42"+
    "\4\0\33\42\24\0\7\42\6\0\4\42\1\u02da\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\16\42"+
    "\1\u02db\14\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u02dc\25\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u01fc\25\42\24\0\7\42\6\0\23\42\1\u02dd\6\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\4\42"+
    "\1\u02de\26\42\24\0\7\42\6\0\32\42\4\0\24\42"+
    "\1\u02df\6\42\24\0\7\42\6\0\1\u01bf\31\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\23\42\1\u0105"+
    "\7\42\24\0\7\42\6\0\32\42\4\0\6\42\1\u02e0"+
    "\24\42\24\0\7\42\6\0\32\42\4\0\7\42\1\u02e1"+
    "\23\42\5\0\1\u02e2\16\0\7\42\6\0\32\42\4\0"+
    "\33\42\24\0\7\42\6\0\4\42\1\u0250\25\42\4\0"+
    "\33\42\24\0\7\42\6\0\4\42\1\u0150\25\42\4\0"+
    "\33\42\24\0\7\42\6\0\22\42\1\u01d5\7\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\11\42\1\150"+
    "\21\42\24\0\7\42\6\0\32\42\4\0\26\42\1\u02e3"+
    "\4\42\24\0\7\42\6\0\16\42\1\u02e4\13\42\4\0"+
    "\33\42\24\0\7\42\6\0\32\42\4\0\1\42\1\u02e5"+
    "\31\42\24\0\7\42\6\0\32\42\4\0\24\42\1\u01a3"+
    "\6\42\24\0\7\42\6\0\32\42\4\0\1\42\1\u02e6"+
    "\31\42\24\0\7\42\6\0\32\42\4\0\5\42\1\u02e7"+
    "\25\42\24\0\7\42\6\0\32\42\4\0\16\42\1\u02e8"+
    "\14\42\24\0\7\42\6\0\32\42\4\0\1\42\1\u02e9"+
    "\31\42\24\0\7\42\6\0\32\42\4\0\14\42\1\u02ea"+
    "\16\42\24\0\7\42\6\0\32\42\4\0\24\42\1\u025a"+
    "\6\42\24\0\7\42\6\0\32\42\4\0\4\42\1\u02eb"+
    "\26\42\24\0\7\42\6\0\32\42\4\0\14\42\1\u02ec"+
    "\16\42\24\0\3\42\1\u0229\1\42\1\u022a\1\42\6\0"+
    "\32\42\4\0\33\42\24\0\7\42\6\0\32\42\4\0"+
    "\14\42\1\u02de\16\42\24\0\7\42\6\0\32\42\4\0"+
    "\15\42\1\u02ed\15\42\24\0\7\42\6\0\32\42\4\0"+
    "\24\42\1\u0223\6\42\24\0\7\42\6\0\32\42\4\0"+
    "\16\42\1\u02ee\14\42\24\0\7\42\6\0\32\42\4\0"+
    "\6\42\1\u02ef\24\42\123\0\1\u02f0\32\0\7\42\6\0"+
    "\32\42\4\0\1\42\1\u02f1\31\42\24\0\7\42\6\0"+
    "\32\42\4\0\5\42\1\u0223\25\42\24\0\7\42\6\0"+
    "\32\42\4\0\3\42\1\u0224\27\42\115\0\1\u02f2\40\0"+
    "\7\42\6\0\32\42\4\0\7\42\1\u02f3\23\42\24\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u02f4\6\42\24\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u02f5\27\42\24\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u02de\27\42\24\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u02f6\10\42\24\0"+
    "\7\42\6\0\32\42\4\0\16\42\1\u02b7\14\42\24\0"+
    "\7\42\6\0\32\42\4\0\3\42\1\u0295\27\42\24\0"+
    "\7\42\6\0\32\42\4\0\24\42\1\u02f7\6\42\24\0"+
    "\7\42\6\0\32\42\4\0\10\42\1\u02f8\22\42\24\0"+
    "\7\42\6\0\32\42\4\0\22\42\1\u02f9\10\42\24\0"+
    "\7\42\6\0\32\42\4\0\23\42\1\212\7\42\24\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u02fa\21\42\24\0"+
    "\7\42\6\0\32\42\4\0\11\42\1\u02fb\21\42\56\0"+
    "\1\u02fc\77\0\7\42\6\0\32\42\4\0\4\42\1\u02fd"+
    "\26\42\24\0\7\42\6\0\32\42\4\0\23\42\1\u02fe"+
    "\7\42\24\0\7\42\6\0\32\42\4\0\17\42\1\332"+
    "\13\42\24\0\7\42\6\0\15\42\1\u02ff\14\42\4\0"+
    "\33\42\24\0\7\42\6\0\1\u0300\31\42\4\0\33\42"+
    "\24\0\7\42\6\0\22\42\1\u0301\7\42\4\0\33\42"+
    "\24\0\7\42\6\0\2\42\1\u01d8\27\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\24\42\1\u0302\6\42"+
    "\24\0\7\42\6\0\15\42\1\u0303\14\42\4\0\33\42"+
    "\65\0\1\u0304\106\0\1\u0305\113\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u02ce\25\42\24\0\7\42\6\0\15\42"+
    "\1\u0306\14\42\4\0\33\42\24\0\7\42\6\0\32\42"+
    "\4\0\23\42\1\u0307\7\42\57\0\1\u0308\76\0\7\42"+
    "\6\0\32\42\4\0\10\42\1\u0309\22\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u030a\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u030b\31\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u030c\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\22\42\1\u030d\10\42\24\0\7\42"+
    "\6\0\32\42\4\0\7\42\1\u01df\23\42\24\0\7\42"+
    "\6\0\32\42\4\0\17\42\1\u030e\13\42\24\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u030f\31\42\24\0\7\42"+
    "\6\0\32\42\4\0\4\42\1\u0310\26\42\24\0\7\42"+
    "\6\0\30\42\1\u0303\1\42\4\0\33\42\24\0\7\42"+
    "\6\0\24\42\1\u0311\5\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\14\42\1\u0312\16\42\24\0\7\42"+
    "\6\0\32\42\4\0\26\42\1\u0313\4\42\24\0\7\42"+
    "\6\0\32\42\4\0\14\42\1\u0314\16\42\24\0\7\42"+
    "\6\0\7\42\1\u0315\22\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\25\42\1\u0316\5\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u0173\25\42\41\0\1\u0317"+
    "\114\0\7\42\6\0\32\42\4\0\5\42\1\u0318\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\16\42\1\u0319\14\42"+
    "\24\0\7\42\6\0\32\42\4\0\3\42\1\u0216\27\42"+
    "\24\0\7\42\6\0\32\42\4\0\16\42\1\u0211\14\42"+
    "\24\0\7\42\6\0\32\42\4\0\30\42\1\u031a\2\42"+
    "\24\0\7\42\6\0\32\42\4\0\25\42\1\u031b\5\42"+
    "\24\0\7\42\6\0\32\42\4\0\14\42\1\u0211\16\42"+
    "\24\0\7\42\6\0\32\42\4\0\24\42\1\u02de\6\42"+
    "\24\0\7\42\6\0\32\42\4\0\23\42\1\u031c\7\42"+
    "\24\0\7\42\6\0\32\42\4\0\31\42\1\u01fc\1\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u031d\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\3\42\1\u031e\27\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\u031f\31\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u0320\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u02de\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\24\42\1\u01f4\6\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u0321\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\6\42\1\u0322\24\42"+
    "\24\0\7\42\6\0\32\42\4\0\17\42\1\u0323\13\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u0324\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\14\42\1\u0325\16\42"+
    "\63\0\1\u0326\72\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u0327\16\42\24\0\7\42\6\0\16\42\1\u0328\13\42"+
    "\4\0\33\42\24\0\7\42\6\0\10\42\1\u0329\21\42"+
    "\4\0\33\42\24\0\7\42\6\0\4\42\1\u032a\25\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\212\25\42\5\0\1\u032b\16\0\7\42\6\0\32\42"+
    "\4\0\33\42\64\0\1\u032c\136\0\1\u032d\64\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u032e\31\42\51\0\1\u032f"+
    "\104\0\7\42\6\0\32\42\4\0\5\42\1\u0330\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\22\42\1\u0331\10\42"+
    "\24\0\7\42\6\0\32\42\4\0\3\42\1\u0332\27\42"+
    "\24\0\7\42\6\0\32\42\4\0\22\42\1\u0333\10\42"+
    "\24\0\7\42\6\0\32\42\4\0\22\42\1\u0334\10\42"+
    "\24\0\7\42\6\0\32\42\4\0\22\42\1\u0335\10\42"+
    "\24\0\7\42\6\0\32\42\4\0\4\42\1\u0336\26\42"+
    "\24\0\7\42\6\0\32\42\4\0\1\42\1\u0337\3\42"+
    "\1\u0338\25\42\24\0\7\42\6\0\21\42\1\u0339\10\42"+
    "\4\0\33\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u033a\25\42\24\0\7\42\6\0\32\42\4\0\31\42"+
    "\1\u0295\1\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u033b\31\42\24\0\7\42\6\0\32\42\4\0\22\42"+
    "\1\u033c\10\42\54\0\1\u033d\101\0\7\42\6\0\32\42"+
    "\4\0\16\42\1\u033e\14\42\24\0\7\42\6\0\32\42"+
    "\4\0\14\42\1\u033f\16\42\24\0\1\42\1\u0340\3\42"+
    "\1\u022a\1\42\6\0\32\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u0341\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\16\42\1\u0342\14\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u0343\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\3\42\1\u0344\27\42\24\0\7\42"+
    "\6\0\32\42\4\0\23\42\1\u0223\7\42\24\0\7\42"+
    "\6\0\32\42\4\0\20\42\1\u0141\12\42\24\0\7\42"+
    "\6\0\32\42\4\0\16\42\1\u0345\14\42\24\0\7\42"+
    "\6\0\32\42\4\0\16\42\1\u0216\14\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u0295\25\42\64\0\1\u0346"+
    "\71\0\7\42\6\0\32\42\4\0\5\42\1\u0347\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\6\42\1\212\24\42"+
    "\24\0\7\42\6\0\15\42\1\u0348\14\42\4\0\33\42"+
    "\53\0\1\u0349\123\0\1\u034a\110\0\7\42\6\0\32\42"+
    "\4\0\15\42\1\u034b\15\42\56\0\1\u034c\77\0\7\42"+
    "\6\0\32\42\4\0\22\42\1\u034d\10\42\24\0\7\42"+
    "\6\0\32\42\4\0\22\42\1\u034e\10\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u034f\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u0350\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u0351\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\23\42\1\u0141\7\42\24\0\7\42"+
    "\6\0\32\42\4\0\2\42\1\u02fb\30\42\24\0\7\42"+
    "\6\0\32\42\4\0\23\42\1\u0295\7\42\24\0\7\42"+
    "\6\0\4\42\1\u0157\25\42\4\0\33\42\24\0\7\42"+
    "\6\0\32\42\4\0\16\42\1\u0299\14\42\24\0\7\42"+
    "\6\0\32\42\4\0\16\42\1\u0352\14\42\24\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u0353\25\42\54\0\1\u0354"+
    "\101\0\7\42\6\0\32\42\4\0\24\42\1\u0336\6\42"+
    "\24\0\7\42\6\0\32\42\4\0\31\42\1\u0141\1\42"+
    "\24\0\2\42\1\u0355\4\42\6\0\32\42\4\0\33\42"+
    "\24\0\7\42\6\0\32\42\4\0\24\42\1\u0356\6\42"+
    "\24\0\7\42\6\0\32\42\4\0\17\42\1\u0357\13\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u0358\25\42"+
    "\24\0\7\42\6\0\32\42\4\0\11\42\1\u0359\21\42"+
    "\62\0\1\u035a\73\0\7\42\6\0\32\42\4\0\22\42"+
    "\1\u0307\10\42\24\0\7\42\6\0\23\42\1\u0250\6\42"+
    "\4\0\33\42\45\0\1\u035b\146\0\1\u035c\73\0\7\42"+
    "\6\0\32\42\4\0\5\42\1\u035d\25\42\24\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u0216\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\11\42\1\u035e\21\42\24\0\7\42"+
    "\6\0\32\42\4\0\24\42\1\u035f\6\42\24\0\7\42"+
    "\6\0\32\42\4\0\4\42\1\u035f\26\42\24\0\7\42"+
    "\6\0\32\42\4\0\4\42\1\u0360\26\42\24\0\6\42"+
    "\1\u0211\6\0\32\42\4\0\33\42\24\0\7\42\6\0"+
    "\32\42\4\0\23\42\1\u0361\7\42\24\0\7\42\6\0"+
    "\32\42\4\0\6\42\1\u0362\24\42\24\0\7\42\6\0"+
    "\32\42\4\0\32\42\1\u0363\41\0\1\u0364\161\0\1\u0365"+
    "\45\0\1\u0266\150\0\7\42\6\0\32\42\4\0\23\42"+
    "\1\u0366\7\42\24\0\7\42\6\0\32\42\4\0\4\42"+
    "\1\u0325\26\42\24\0\7\42\6\0\32\42\4\0\1\42"+
    "\1\u0367\31\42\24\0\7\42\6\0\32\42\4\0\14\42"+
    "\1\u0368\16\42\24\0\7\42\6\0\32\42\4\0\5\42"+
    "\1\u0369\25\42\51\0\1\u036a\104\0\7\42\6\0\32\42"+
    "\4\0\20\42\1\u036b\12\42\24\0\7\42\6\0\32\42"+
    "\4\0\2\42\1\u036c\30\42\24\0\7\42\6\0\32\42"+
    "\4\0\5\42\1\u036d\25\42\24\0\7\42\6\0\32\42"+
    "\4\0\4\42\1\u0295\26\42\56\0\1\u036e\77\0\7\42"+
    "\6\0\32\42\4\0\1\42\1\u036f\31\42\24\0\7\42"+
    "\6\0\32\42\4\0\14\42\1\u0370\16\42\24\0\7\42"+
    "\6\0\32\42\4\0\22\42\1\u0179\10\42\64\0\1\u0371"+
    "\71\0\7\42\6\0\32\42\4\0\3\42\1\u02c6\27\42"+
    "\24\0\7\42\6\0\32\42\4\0\5\42\1\u0141\25\42"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[69390];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\2\11\2\1\1\11"+
    "\1\1\1\11\2\1\2\11\34\1\2\11\24\1\1\11"+
    "\1\1\3\11\1\0\3\11\1\0\4\11\2\0\2\11"+
    "\231\1\1\0\230\1\1\0\40\1\1\0\200\1\1\0"+
    "\3\1\1\0\27\1\1\0\24\1\1\0\10\1\1\0"+
    "\73\1\1\0\3\1\1\0\21\1\1\0\13\1\2\0"+
    "\3\1\1\0\30\1\1\0\15\1\1\11\1\1\1\11"+
    "\11\1\1\0\7\1\2\0\2\1\1\0\16\1\1\0"+
    "\16\1\1\0\4\1\2\0\1\11\1\1\1\0\15\1"+
    "\1\0\10\1\1\0\2\1\2\0\1\1\1\11\7\1"+
    "\1\11\5\1\3\0\7\1\1\0\1\11\4\1\1\0"+
    "\3\1\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[881];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int _numberTokens = 0;
    private boolean _thereIsTokens = false;
    private HashMap<String, Integer> identifiers = new HashMap<String, Integer>();
    
    public boolean thereIsTokens() {return this._thereIsTokens;}
    public int numberTokens() {return this._numberTokens;}
    public HashMap<String, Integer> getIdentifiers() {return this.identifiers;}

    // Creates and returns a Token Object
    private Token foundSymbol(String token, String lexeme, int line, int column) {
        this._thereIsTokens = true;
        this._numberTokens++;

        // value given lexeme as a key
        Integer value = identifiers.get(lexeme);
        Integer size = identifiers.size();
        
        // Logic for storing identifiers in the Hashmap
        if (token == "Identificador") {
            if (value == null) {
                identifiers.put(lexeme, size);
                lexeme = size.toString();
            } else {
                lexeme = value.toString();
            }
        }   

        Token t = new Token(token, lexeme, line, column);
        return t;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    this._thereIsTokens = false;
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignore unmatched characters */
            }
          // fall through
          case 111: break;
          case 2:
            { return foundSymbol("Negacion", "", yyline, yycolumn);
            }
          // fall through
          case 112: break;
          case 3:
            { return foundSymbol("Comentario en linea", yytext(), yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 4:
            { return foundSymbol("Operador Aritmetico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 114: break;
          case 5:
            { return foundSymbol("Operador de Bits", yytext(), yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 6:
            { return foundSymbol("Parentesis Izquierdo", "", yyline, yycolumn);
            }
          // fall through
          case 116: break;
          case 7:
            { return foundSymbol("Parentesis Derecho", "", yyline, yycolumn);
            }
          // fall through
          case 117: break;
          case 8:
            { return foundSymbol("Coma", "", yyline, yycolumn);
            }
          // fall through
          case 118: break;
          case 9:
            { return foundSymbol("Punto", "", yyline, yycolumn);
            }
          // fall through
          case 119: break;
          case 10:
            { return foundSymbol("Entero", yytext(), yyline, yycolumn);
            }
          // fall through
          case 120: break;
          case 11:
            { return foundSymbol("Dos puntos", "", yyline, yycolumn);
            }
          // fall through
          case 121: break;
          case 12:
            { return foundSymbol("Punto y coma", "", yyline, yycolumn);
            }
          // fall through
          case 122: break;
          case 13:
            { return foundSymbol("Comparador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 123: break;
          case 14:
            { return foundSymbol("Asignador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 124: break;
          case 15:
            { return foundSymbol("Operador Ternario", "", yyline, yycolumn);
            }
          // fall through
          case 125: break;
          case 16:
            { return foundSymbol("Identificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 126: break;
          case 17:
            { return foundSymbol("Corchete Izquierdo", "", yyline, yycolumn);
            }
          // fall through
          case 127: break;
          case 18:
            { return foundSymbol("Corchete Derecho", "", yyline, yycolumn);
            }
          // fall through
          case 128: break;
          case 19:
            { return foundSymbol("Llave Izquierda", "", yyline, yycolumn);
            }
          // fall through
          case 129: break;
          case 20:
            { return foundSymbol("Llave Derecha", "yytext", yyline, yycolumn);
            }
          // fall through
          case 130: break;
          case 21:
            { return foundSymbol("Cadena", yytext(), yyline, yycolumn);
            }
          // fall through
          case 131: break;
          case 22:
            { return foundSymbol("Operador Logico", yytext(), yyline, yycolumn);
            }
          // fall through
          case 132: break;
          case 23:
            { return foundSymbol("Caracter", yytext(), yyline, yycolumn);
            }
          // fall through
          case 133: break;
          case 24:
            { return foundSymbol("Termina comentario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 134: break;
          case 25:
            { return foundSymbol("Inicia comentario", yytext(), yyline, yycolumn);
            }
          // fall through
          case 135: break;
          case 26:
            { return foundSymbol("Complejo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 136: break;
          case 27:
            { return foundSymbol("Operador Nulo", "", yyline, yycolumn);
            }
          // fall through
          case 137: break;
          case 28:
            { return foundSymbol("Referencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 138: break;
          case 29:
            { return foundSymbol("Of", "", yyline, yycolumn);
            }
          // fall through
          case 139: break;
          case 30:
            { return foundSymbol("Renombrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 140: break;
          case 31:
            { return foundSymbol("Ciclo Do", "", yyline, yycolumn);
            }
          // fall through
          case 141: break;
          case 32:
            { return foundSymbol("Condicional", "", yyline, yycolumn);
            }
          // fall through
          case 142: break;
          case 33:
            { return foundSymbol("Operador de Pertenencia", yytext(), yyline, yycolumn);
            }
          // fall through
          case 143: break;
          case 34:
            { return foundSymbol("Operador de identidad", yytext(), yyline, yycolumn);
            }
          // fall through
          case 144: break;
          case 35:
            { return foundSymbol("Decimal", yytext(), yyline, yycolumn);
            }
          // fall through
          case 145: break;
          case 36:
            { return foundSymbol("Añadir", yytext(), yyline, yycolumn);
            }
          // fall through
          case 146: break;
          case 37:
            { return foundSymbol("Condiciones Query", yytext(), yyline, yycolumn);
            }
          // fall through
          case 147: break;
          case 38:
            { return foundSymbol("Ordenar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 148: break;
          case 39:
            { return foundSymbol("Almacenamiento", yytext(), yyline, yycolumn);
            }
          // fall through
          case 149: break;
          case 40:
            { return foundSymbol("Salida", yytext(), yyline, yycolumn);
            }
          // fall through
          case 150: break;
          case 41:
            { return foundSymbol("Get", yytext(), yyline, yycolumn);
            }
          // fall through
          case 151: break;
          case 42:
            { return foundSymbol("Variable", yytext(), yyline, yycolumn);
            }
          // fall through
          case 152: break;
          case 43:
            { return foundSymbol("Modificador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 153: break;
          case 44:
            { return foundSymbol("Comentario especial", yytext(), yyline, yycolumn);
            }
          // fall through
          case 154: break;
          case 45:
            { return foundSymbol("Update", yytext(), yyline, yycolumn);
            }
          // fall through
          case 155: break;
          case 46:
            { return foundSymbol("Funcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 156: break;
          case 47:
            { return foundSymbol("Limite", yytext(), yyline, yycolumn);
            }
          // fall through
          case 157: break;
          case 48:
            { return foundSymbol("Borrar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 158: break;
          case 49:
            { return foundSymbol("Ciclo For", "", yyline, yycolumn);
            }
          // fall through
          case 159: break;
          case 50:
            { return foundSymbol("Tipo de dato", yytext(), yyline, yycolumn);
            }
          // fall through
          case 160: break;
          case 51:
            { return foundSymbol("Crear", yytext(), yyline, yycolumn);
            }
          // fall through
          case 161: break;
          case 52:
            { return foundSymbol("Intentar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 162: break;
          case 53:
            { return foundSymbol("Cast", yytext(), yyline, yycolumn);
            }
          // fall through
          case 163: break;
          case 54:
            { return foundSymbol("Ejecutar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 164: break;
          case 55:
            { return foundSymbol("Iterador", yytext(), yyline, yycolumn);
            }
          // fall through
          case 165: break;
          case 56:
            { return foundSymbol("GoTo", "", yyline, yycolumn);
            }
          // fall through
          case 166: break;
          case 57:
            { return foundSymbol("Insertar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 167: break;
          case 58:
            { return foundSymbol("Join", yytext(), yyline, yycolumn);
            }
          // fall through
          case 168: break;
          case 59:
            { return foundSymbol("Valor nulo", yytext(), yyline, yycolumn);
            }
          // fall through
          case 169: break;
          case 60:
            { return foundSymbol("Incremento", "", yyline, yycolumn);
            }
          // fall through
          case 170: break;
          case 61:
            { return foundSymbol("Debug", "", yyline, yycolumn);
            }
          // fall through
          case 171: break;
          case 62:
            { return foundSymbol("Consecuencia Itentar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 172: break;
          case 63:
            { return foundSymbol("Booleano", yytext(), yyline, yycolumn);
            }
          // fall through
          case 173: break;
          case 64:
            { return foundSymbol("Vista", "", yyline, yycolumn);
            }
          // fall through
          case 174: break;
          case 65:
            { return foundSymbol("Case", "", yyline, yycolumn);
            }
          // fall through
          case 175: break;
          case 66:
            { return foundSymbol("Estructura de datos", yytext(), yyline, yycolumn);
            }
          // fall through
          case 176: break;
          case 67:
            { return foundSymbol("Consecuencia Condicional", "", yyline, yycolumn);
            }
          // fall through
          case 177: break;
          case 68:
            { return foundSymbol("Consequencia", "", yyline, yycolumn);
            }
          // fall through
          case 178: break;
          case 69:
            { return foundSymbol("Enum", "", yyline, yycolumn);
            }
          // fall through
          case 179: break;
          case 70:
            { return foundSymbol("Importar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 180: break;
          case 71:
            { return foundSymbol("Pass", "", yyline, yycolumn);
            }
          // fall through
          case 181: break;
          case 72:
            { return foundSymbol("This", yytext(), yyline, yycolumn);
            }
          // fall through
          case 182: break;
          case 73:
            { return foundSymbol("Void", "", yyline, yycolumn);
            }
          // fall through
          case 183: break;
          case 74:
            { return foundSymbol("Alterar", "", yyline, yycolumn);
            }
          // fall through
          case 184: break;
          case 75:
            { return foundSymbol("Restriccion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 185: break;
          case 76:
            { return foundSymbol("Excepcion", yytext(), yyline, yycolumn);
            }
          // fall through
          case 186: break;
          case 77:
            { return foundSymbol("Evento", "", yyline, yycolumn);
            }
          // fall through
          case 187: break;
          case 78:
            { return foundSymbol("Indice", "", yyline, yycolumn);
            }
          // fall through
          case 188: break;
          case 79:
            { return foundSymbol("Tabla", "", yyline, yycolumn);
            }
          // fall through
          case 189: break;
          case 80:
            { return foundSymbol("Union", yytext(), yyline, yycolumn);
            }
          // fall through
          case 190: break;
          case 81:
            { return foundSymbol("Query Condicional", yytext(), yyline, yycolumn);
            }
          // fall through
          case 191: break;
          case 82:
            { return foundSymbol("Asyncrono", yytext(), yyline, yycolumn);
            }
          // fall through
          case 192: break;
          case 83:
            { return foundSymbol("Clase", "", yyline, yycolumn);
            }
          // fall through
          case 193: break;
          case 84:
            { return foundSymbol("Modificador de No Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 194: break;
          case 85:
            { return foundSymbol("Imprimir", "", yyline, yycolumn);
            }
          // fall through
          case 195: break;
          case 86:
            { return foundSymbol("Clase Padre", yytext(), yyline, yycolumn);
            }
          // fall through
          case 196: break;
          case 87:
            { return foundSymbol("Ciclo While", "", yyline, yycolumn);
            }
          // fall through
          case 197: break;
          case 88:
            { return foundSymbol("Regresar", yytext(), yyline, yycolumn);
            }
          // fall through
          case 198: break;
          case 89:
            { return foundSymbol("Backup", "", yyline, yycolumn);
            }
          // fall through
          case 199: break;
          case 90:
            { return foundSymbol("Columna", "", yyline, yycolumn);
            }
          // fall through
          case 200: break;
          case 91:
            { return foundSymbol("Module", "", yyline, yycolumn);
            }
          // fall through
          case 201: break;
          case 92:
            { return foundSymbol("Opcion", "", yyline, yycolumn);
            }
          // fall through
          case 202: break;
          case 93:
            { return foundSymbol("Select", "", yyline, yycolumn);
            }
          // fall through
          case 203: break;
          case 94:
            { return foundSymbol("Modificador de Acceso", yytext(), yyline, yycolumn);
            }
          // fall through
          case 204: break;
          case 95:
            { return foundSymbol("Operador de typo", "", yyline, yycolumn);
            }
          // fall through
          case 205: break;
          case 96:
            { return foundSymbol("Lamda", "", yyline, yycolumn);
            }
          // fall through
          case 206: break;
          case 97:
            { return foundSymbol("Switch", "", yyline, yycolumn);
            }
          // fall through
          case 207: break;
          case 98:
            { return foundSymbol("Rango", "", yyline, yycolumn);
            }
          // fall through
          case 208: break;
          case 99:
            { return foundSymbol("AddHandler", yytext(), yyline, yycolumn);
            }
          // fall through
          case 209: break;
          case 100:
            { return foundSymbol("Parcial", "", yyline, yycolumn);
            }
          // fall through
          case 210: break;
          case 101:
            { return foundSymbol("Extiende", "", yyline, yycolumn);
            }
          // fall through
          case 211: break;
          case 102:
            { return foundSymbol("Paquete", "", yyline, yycolumn);
            }
          // fall through
          case 212: break;
          case 103:
            { return foundSymbol("Database", "", yyline, yycolumn);
            }
          // fall through
          case 213: break;
          case 104:
            { return foundSymbol("Operador de VB", "", yyline, yycolumn);
            }
          // fall through
          case 214: break;
          case 105:
            { return foundSymbol("Continuar", "", yyline, yycolumn);
            }
          // fall through
          case 215: break;
          case 106:
            { return foundSymbol("Namespace", "", yyline, yycolumn);
            }
          // fall through
          case 216: break;
          case 107:
            { return foundSymbol("Estructura", "", yyline, yycolumn);
            }
          // fall through
          case 217: break;
          case 108:
            { return foundSymbol("Interface", "", yyline, yycolumn);
            }
          // fall through
          case 218: break;
          case 109:
            { return foundSymbol("Implementa", "", yyline, yycolumn);
            }
          // fall through
          case 219: break;
          case 110:
            { return foundSymbol("Operador de instancia", "", yyline, yycolumn);
            }
          // fall through
          case 220: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
