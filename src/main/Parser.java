
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\002\000\002\004\005\000\002\005\004" +
    "\000\002\005\006\000\002\006\003\000\002\006\002\000" +
    "\002\007\004\000\002\010\010\000\002\011\003\000\002" +
    "\011\002\000\002\012\004\000\002\013\003\000\002\013" +
    "\002\000\002\014\004\000\002\015\006\000\002\016\012" +
    "\000\002\016\005\000\002\017\005\000\002\020\003\000" +
    "\002\020\002\000\002\021\005\000\002\022\004\000\002" +
    "\022\002\000\002\023\005\000\002\024\004\000\002\025" +
    "\006\000\002\026\005\000\002\027\012\000\002\030\003" +
    "\000\002\030\003\000\002\031\003\000\002\031\003\000" +
    "\002\037\012\000\002\040\007\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\042\003\000\002\042\002\000\002\043\005" +
    "\000\002\044\007\000\002\032\011\000\002\033\003\000" +
    "\002\033\002\000\002\034\010\000\002\035\004\000\002" +
    "\035\002\000\002\056\007\000\002\056\007\000\002\056" +
    "\007\000\002\056\007\000\002\056\007\000\002\056\007" +
    "\000\002\036\010\000\002\045\010\000\002\046\004\000" +
    "\002\047\004\000\002\047\002\000\002\050\011\000\002" +
    "\051\011\000\002\052\004\000\002\053\004\000\002\053" +
    "\002\000\002\054\004\000\002\055\012\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\062\005\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\004\000\002\063\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\061\005\000\002" +
    "\064\004\000\002\071\007\000\002\065\005\000\002\067" +
    "\003\000\002\067\002\000\002\066\004\000\002\070\003" +
    "\000\002\070\004\000\002\070\004\000\002\070\004\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\005\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\072\004\000" +
    "\002\072\004\000\002\072\004\000\002\073\003\000\002" +
    "\073\003\000\002\074\004\000\002\075\003\000\002\075" +
    "\003\000\002\076\004\000\002\076\002\000\002\077\003" +
    "\000\002\077\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\101\004\000\002" +
    "\102\004\000\002\102\002\000\002\103\004\000\002\104" +
    "\005\000\002\104\005\000\002\104\005\000\002\104\005" +
    "\000\002\104\005\000\002\104\005\000\002\104\002\000" +
    "\002\105\005\000\002\105\003\000\002\105\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\062\002\ufffe\006\ufffe\016\004\017\005\026" +
    "\ufffe\027\ufffe\071\ufffe\074\ufffe\102\ufffe\122\ufffe\125\ufffe" +
    "\131\ufffe\134\ufffe\137\ufffe\153\ufffe\154\ufffe\155\ufffe\157" +
    "\ufffe\160\ufffe\161\ufffe\162\ufffe\163\ufffe\164\ufffe\177\ufffe" +
    "\001\002\000\004\177\u0132\001\002\000\004\177\u012f\001" +
    "\002\000\056\002\ufff9\006\016\026\ufff9\027\ufff9\071\ufff9" +
    "\074\ufff9\102\ufff9\122\ufff9\125\ufff9\131\ufff9\134\ufff9\137" +
    "\ufff9\153\ufff9\154\ufff9\155\ufff9\157\ufff9\160\ufff9\161\ufff9" +
    "\162\ufff9\163\ufff9\164\ufff9\177\ufff9\001\002\000\004\152" +
    "\013\001\002\000\056\002\uffff\006\uffff\026\uffff\027\uffff" +
    "\071\uffff\074\uffff\102\uffff\122\uffff\125\uffff\131\uffff\134" +
    "\uffff\137\uffff\153\uffff\154\uffff\155\uffff\157\uffff\160\uffff" +
    "\161\uffff\162\uffff\163\uffff\164\uffff\177\uffff\001\002\000" +
    "\004\002\012\001\002\000\004\002\001\001\002\000\062" +
    "\002\ufffe\006\ufffe\016\004\017\005\026\ufffe\027\ufffe\071" +
    "\ufffe\074\ufffe\102\ufffe\122\ufffe\125\ufffe\131\ufffe\134\ufffe" +
    "\137\ufffe\153\ufffe\154\ufffe\155\ufffe\157\ufffe\160\ufffe\161" +
    "\ufffe\162\ufffe\163\ufffe\164\ufffe\177\ufffe\001\002\000\056" +
    "\002\ufffd\006\ufffd\026\ufffd\027\ufffd\071\ufffd\074\ufffd\102" +
    "\ufffd\122\ufffd\125\ufffd\131\ufffd\134\ufffd\137\ufffd\153\ufffd" +
    "\154\ufffd\155\ufffd\157\ufffd\160\ufffd\161\ufffd\162\ufffd\163" +
    "\ufffd\164\ufffd\177\ufffd\001\002\000\054\002\ufffa\026\ufffa" +
    "\027\ufffa\071\ufffa\074\ufffa\102\ufffa\122\ufffa\125\ufffa\131" +
    "\ufffa\134\ufffa\137\ufffa\153\ufffa\154\ufffa\155\ufffa\157\ufffa" +
    "\160\ufffa\161\ufffa\162\ufffa\163\ufffa\164\ufffa\177\ufffa\001" +
    "\002\000\004\177\u0127\001\002\000\056\002\ufff9\006\016" +
    "\026\ufff9\027\ufff9\071\ufff9\074\ufff9\102\ufff9\122\ufff9\125" +
    "\ufff9\131\ufff9\134\ufff9\137\ufff9\153\ufff9\154\ufff9\155\ufff9" +
    "\157\ufff9\160\ufff9\161\ufff9\162\ufff9\163\ufff9\164\ufff9\177" +
    "\ufff9\001\002\000\054\002\ufff2\026\ufff2\027\ufff2\071\ufff2" +
    "\074\ufff2\102\ufff2\122\ufff2\125\ufff2\131\ufff2\134\024\137" +
    "\ufff2\153\ufff2\154\ufff2\155\ufff2\157\ufff2\160\ufff2\161\ufff2" +
    "\162\ufff2\163\ufff2\164\ufff2\177\ufff2\001\002\000\052\002" +
    "\uffa3\026\107\027\121\071\106\074\103\102\070\122\066" +
    "\125\102\131\074\137\062\153\065\154\064\155\104\157" +
    "\112\160\073\161\122\162\117\163\076\164\071\177\067" +
    "\001\002\000\056\002\ufff2\026\ufff2\027\ufff2\071\ufff2\074" +
    "\ufff2\102\ufff2\122\ufff2\125\ufff2\131\ufff2\134\024\137\ufff2" +
    "\144\ufff2\153\ufff2\154\ufff2\155\ufff2\157\ufff2\160\ufff2\161" +
    "\ufff2\162\ufff2\163\ufff2\164\ufff2\177\ufff2\001\002\000\054" +
    "\002\ufff3\026\ufff3\027\ufff3\071\ufff3\074\ufff3\102\ufff3\122" +
    "\ufff3\125\ufff3\131\ufff3\137\ufff3\144\ufff3\153\ufff3\154\ufff3" +
    "\155\ufff3\157\ufff3\160\ufff3\161\ufff3\162\ufff3\163\ufff3\164" +
    "\ufff3\177\ufff3\001\002\000\004\177\025\001\002\000\004" +
    "\151\026\001\002\000\024\135\030\157\027\160\037\161" +
    "\041\162\032\163\033\164\036\165\040\166\035\001\002" +
    "\000\006\141\uffbb\177\uffbb\001\002\000\004\141\043\001" +
    "\002\000\056\002\ufff0\026\ufff0\027\ufff0\071\ufff0\074\ufff0" +
    "\102\ufff0\122\ufff0\125\ufff0\131\ufff0\134\ufff0\137\ufff0\144" +
    "\ufff0\153\ufff0\154\ufff0\155\ufff0\157\ufff0\160\ufff0\161\ufff0" +
    "\162\ufff0\163\ufff0\164\ufff0\177\ufff0\001\002\000\006\141" +
    "\uffb8\177\uffb8\001\002\000\006\141\uffb7\177\uffb7\001\002" +
    "\000\004\141\043\001\002\000\006\141\uffb4\177\uffb4\001" +
    "\002\000\006\141\uffb6\177\uffb6\001\002\000\006\141\uffba" +
    "\177\uffba\001\002\000\006\141\uffb5\177\uffb5\001\002\000" +
    "\006\141\uffb9\177\uffb9\001\002\000\004\143\054\001\002" +
    "\000\024\142\uffeb\157\027\160\037\161\041\162\032\163" +
    "\033\164\036\165\040\166\035\001\002\000\004\142\053" +
    "\001\002\000\004\142\uffec\001\002\000\004\177\047\001" +
    "\002\000\006\142\uffe8\150\050\001\002\000\022\157\027" +
    "\160\037\161\041\162\032\163\033\164\036\165\040\166" +
    "\035\001\002\000\004\142\uffea\001\002\000\004\142\uffe9" +
    "\001\002\000\004\143\uffed\001\002\000\052\026\107\027" +
    "\121\071\106\074\103\102\070\122\066\125\102\131\074" +
    "\137\062\140\uffa3\153\065\154\064\155\104\157\112\160" +
    "\073\161\122\162\117\163\076\164\071\177\067\001\002" +
    "\000\004\140\u011e\001\002\000\060\002\uff96\026\uff96\027" +
    "\uff96\071\uff96\074\uff96\102\uff96\122\uff96\125\uff96\127\uff96" +
    "\131\uff96\137\uff96\140\uff96\144\uff96\153\uff96\154\uff96\155" +
    "\uff96\157\uff96\160\uff96\161\uff96\162\uff96\163\uff96\164\uff96" +
    "\177\uff96\001\002\000\004\152\u011d\001\002\000\012\002" +
    "\uffa4\127\uffa4\140\uffa4\144\uffa4\001\002\000\060\002\uffa1" +
    "\026\uffa1\027\uffa1\071\uffa1\074\uffa1\102\uffa1\122\uffa1\125" +
    "\uffa1\127\uffa1\131\uffa1\137\uffa1\140\uffa1\144\uffa1\153\uffa1" +
    "\154\uffa1\155\uffa1\157\uffa1\160\uffa1\161\uffa1\162\uffa1\163" +
    "\uffa1\164\uffa1\177\uffa1\001\002\000\004\177\234\001\002" +
    "\000\060\002\uff98\026\uff98\027\uff98\071\uff98\074\uff98\102" +
    "\uff98\122\uff98\125\uff98\127\uff98\131\uff98\137\uff98\140\uff98" +
    "\144\uff98\153\uff98\154\uff98\155\uff98\157\uff98\160\uff98\161" +
    "\uff98\162\uff98\163\uff98\164\uff98\177\uff98\001\002\000\004" +
    "\143\250\001\002\000\004\141\u010d\001\002\000\004\141" +
    "\376\001\002\000\010\037\360\040\357\041\361\001\002" +
    "\000\004\151\350\001\002\000\004\177\344\001\002\000" +
    "\004\143\250\001\002\000\004\177\337\001\002\000\004" +
    "\151\332\001\002\000\060\002\uff92\026\uff92\027\uff92\071" +
    "\uff92\074\uff92\102\uff92\122\uff92\125\uff92\127\uff92\131\uff92" +
    "\137\uff92\140\uff92\144\uff92\153\uff92\154\uff92\155\uff92\157" +
    "\uff92\160\uff92\161\uff92\162\uff92\163\uff92\164\uff92\177\uff92" +
    "\001\002\000\004\177\326\001\002\000\060\002\uff9c\026" +
    "\uff9c\027\uff9c\071\uff9c\074\uff9c\102\uff9c\122\uff9c\125\uff9c" +
    "\127\uff9c\131\uff9c\137\uff9c\140\uff9c\144\uff9c\153\uff9c\154" +
    "\uff9c\155\uff9c\157\uff9c\160\uff9c\161\uff9c\162\uff9c\163\uff9c" +
    "\164\uff9c\177\uff9c\001\002\000\060\002\uff9d\026\uff9d\027" +
    "\uff9d\071\uff9d\074\uff9d\102\uff9d\122\uff9d\125\uff9d\127\uff9d" +
    "\131\uff9d\137\uff9d\140\uff9d\144\uff9d\153\uff9d\154\uff9d\155" +
    "\uff9d\157\uff9d\160\uff9d\161\uff9d\162\uff9d\163\uff9d\164\uff9d" +
    "\177\uff9d\001\002\000\060\002\uff9a\026\uff9a\027\uff9a\071" +
    "\uff9a\074\uff9a\102\uff9a\122\uff9a\125\uff9a\127\uff9a\131\uff9a" +
    "\137\uff9a\140\uff9a\144\uff9a\153\uff9a\154\uff9a\155\uff9a\157" +
    "\uff9a\160\uff9a\161\uff9a\162\uff9a\163\uff9a\164\uff9a\177\uff9a" +
    "\001\002\000\004\141\274\001\002\000\004\177\262\001" +
    "\002\000\004\141\257\001\002\000\004\152\256\001\002" +
    "\000\004\145\245\001\002\000\004\137\231\001\002\000" +
    "\060\002\uff95\026\uff95\027\uff95\071\uff95\074\uff95\102\uff95" +
    "\122\uff95\125\uff95\127\uff95\131\uff95\137\uff95\140\uff95\144" +
    "\uff95\153\uff95\154\uff95\155\uff95\157\uff95\160\uff95\161\uff95" +
    "\162\uff95\163\uff95\164\uff95\177\uff95\001\002\000\060\002" +
    "\uff9b\026\uff9b\027\uff9b\071\uff9b\074\uff9b\102\uff9b\122\uff9b" +
    "\125\uff9b\127\uff9b\131\uff9b\137\uff9b\140\uff9b\144\uff9b\153" +
    "\uff9b\154\uff9b\155\uff9b\157\uff9b\160\uff9b\161\uff9b\162\uff9b" +
    "\163\uff9b\164\uff9b\177\uff9b\001\002\000\004\177\201\001" +
    "\002\000\060\002\uff94\026\uff94\027\uff94\071\uff94\074\uff94" +
    "\102\uff94\122\uff94\125\uff94\127\uff94\131\uff94\137\uff94\140" +
    "\uff94\144\uff94\153\uff94\154\uff94\155\uff94\157\uff94\160\uff94" +
    "\161\uff94\162\uff94\163\uff94\164\uff94\177\uff94\001\002\000" +
    "\060\002\uffa3\026\107\027\121\071\106\074\103\102\070" +
    "\122\066\125\102\127\uffa3\131\074\137\062\140\uffa3\144" +
    "\uffa3\153\065\154\064\155\104\157\112\160\073\161\122" +
    "\162\117\163\076\164\071\177\067\001\002\000\004\152" +
    "\177\001\002\000\060\002\uff93\026\uff93\027\uff93\071\uff93" +
    "\074\uff93\102\uff93\122\uff93\125\uff93\127\uff93\131\uff93\137" +
    "\uff93\140\uff93\144\uff93\153\uff93\154\uff93\155\uff93\157\uff93" +
    "\160\uff93\161\uff93\162\uff93\163\uff93\164\uff93\177\uff93\001" +
    "\002\000\004\177\173\001\002\000\060\002\uff99\026\uff99" +
    "\027\uff99\071\uff99\074\uff99\102\uff99\122\uff99\125\uff99\127" +
    "\uff99\131\uff99\137\uff99\140\uff99\144\uff99\153\uff99\154\uff99" +
    "\155\uff99\157\uff99\160\uff99\161\uff99\162\uff99\163\uff99\164" +
    "\uff99\177\uff99\001\002\000\004\141\167\001\002\000\004" +
    "\177\123\001\002\000\004\040\124\001\002\000\014\141" +
    "\127\174\126\175\125\176\132\177\133\001\002\000\036" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\141\uffaa\142\uffaa\152\uffaa\174\uffaa\175\uffaa\176\uffaa" +
    "\177\uffaa\001\002\000\036\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\141\uffab\142\uffab\152\uffab" +
    "\174\uffab\175\uffab\176\uffab\177\uffab\001\002\000\014\141" +
    "\127\174\126\175\125\176\132\177\133\001\002\000\020" +
    "\141\127\142\uff7f\152\uff7f\174\126\175\125\176\132\177" +
    "\133\001\002\000\034\031\uff75\032\uff75\033\uff75\034\uff75" +
    "\035\uff75\036\uff75\141\uff75\142\uff75\152\uff75\174\uff75\175" +
    "\uff75\176\uff75\177\uff75\001\002\000\036\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\141\uffa9\142" +
    "\uffa9\152\uffa9\174\uffa9\175\uffa9\176\uffa9\177\uffa9\001\002" +
    "\000\034\031\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036" +
    "\uff74\141\uff74\142\uff74\152\uff74\174\uff74\175\uff74\176\uff74" +
    "\177\uff74\001\002\000\034\031\142\032\137\033\144\034" +
    "\143\035\140\036\141\141\uff77\142\uff77\152\uff77\174\uff77" +
    "\175\uff77\176\uff77\177\uff77\001\002\000\004\152\136\001" +
    "\002\000\100\002\uffcb\026\uffcb\027\uffcb\071\uffcb\074\uffcb" +
    "\102\uffcb\122\uffcb\125\uffcb\127\uffcb\131\uffcb\134\uffcb\137" +
    "\uffcb\140\uffcb\144\uffcb\153\uffcb\154\uffcb\155\uffcb\157\uffcb" +
    "\160\uffcb\161\uffcb\162\uffcb\163\uffcb\164\uffcb\170\uffcb\171" +
    "\uffcb\172\uffcb\173\uffcb\174\uffcb\175\uffcb\176\uffcb\177\uffcb" +
    "\001\002\000\014\141\127\174\126\175\125\176\132\177" +
    "\133\001\002\000\014\141\127\174\126\175\125\176\132" +
    "\177\133\001\002\000\014\141\127\174\126\175\125\176" +
    "\132\177\133\001\002\000\014\141\127\174\126\175\125" +
    "\176\132\177\133\001\002\000\014\141\127\174\126\175" +
    "\125\176\132\177\133\001\002\000\014\141\127\174\126" +
    "\175\125\176\132\177\133\001\002\000\020\141\uff7e\142" +
    "\uff7e\152\uff7e\174\uff7e\175\uff7e\176\uff7e\177\uff7e\001\002" +
    "\000\034\031\142\032\137\033\144\034\143\035\140\036" +
    "\141\141\uff77\142\uff77\152\uff77\174\uff77\175\uff77\176\uff77" +
    "\177\uff77\001\002\000\020\141\uff7a\142\uff7a\152\uff7a\174" +
    "\uff7a\175\uff7a\176\uff7a\177\uff7a\001\002\000\034\031\142" +
    "\032\137\033\144\034\143\035\140\036\141\141\uff77\142" +
    "\uff77\152\uff77\174\uff77\175\uff77\176\uff77\177\uff77\001\002" +
    "\000\020\141\uff7b\142\uff7b\152\uff7b\174\uff7b\175\uff7b\176" +
    "\uff7b\177\uff7b\001\002\000\034\031\142\032\137\033\144" +
    "\034\143\035\140\036\141\141\uff77\142\uff77\152\uff77\174" +
    "\uff77\175\uff77\176\uff77\177\uff77\001\002\000\020\141\uff7d" +
    "\142\uff7d\152\uff7d\174\uff7d\175\uff7d\176\uff7d\177\uff7d\001" +
    "\002\000\034\031\142\032\137\033\144\034\143\035\140" +
    "\036\141\141\uff77\142\uff77\152\uff77\174\uff77\175\uff77\176" +
    "\uff77\177\uff77\001\002\000\020\141\uff78\142\uff78\152\uff78" +
    "\174\uff78\175\uff78\176\uff78\177\uff78\001\002\000\034\031" +
    "\142\032\137\033\144\034\143\035\140\036\141\141\uff77" +
    "\142\uff77\152\uff77\174\uff77\175\uff77\176\uff77\177\uff77\001" +
    "\002\000\020\141\uff79\142\uff79\152\uff79\174\uff79\175\uff79" +
    "\176\uff79\177\uff79\001\002\000\034\031\142\032\137\033" +
    "\144\034\143\035\140\036\141\141\uff77\142\uff77\152\uff77" +
    "\174\uff77\175\uff77\176\uff77\177\uff77\001\002\000\020\141" +
    "\uff7c\142\uff7c\152\uff7c\174\uff7c\175\uff7c\176\uff7c\177\uff7c" +
    "\001\002\000\006\142\uff81\152\uff81\001\002\000\020\141" +
    "\127\142\uff7f\152\uff7f\174\126\175\125\176\132\177\133" +
    "\001\002\000\006\142\uff80\152\uff80\001\002\000\004\142" +
    "\166\001\002\000\034\031\uff76\032\uff76\033\uff76\034\uff76" +
    "\035\uff76\036\uff76\141\uff76\142\uff76\152\uff76\174\uff76\175" +
    "\uff76\176\uff76\177\uff76\001\002\000\004\172\170\001\002" +
    "\000\004\142\171\001\002\000\004\152\172\001\002\000" +
    "\060\002\uffa6\026\uffa6\027\uffa6\071\uffa6\074\uffa6\102\uffa6" +
    "\122\uffa6\125\uffa6\127\uffa6\131\uffa6\137\uffa6\140\uffa6\144" +
    "\uffa6\153\uffa6\154\uffa6\155\uffa6\157\uffa6\160\uffa6\161\uffa6" +
    "\162\uffa6\163\uffa6\164\uffa6\177\uffa6\001\002\000\004\040" +
    "\174\001\002\000\014\141\127\174\126\175\125\176\132" +
    "\177\133\001\002\000\004\152\176\001\002\000\100\002" +
    "\uffca\026\uffca\027\uffca\071\uffca\074\uffca\102\uffca\122\uffca" +
    "\125\uffca\127\uffca\131\uffca\134\uffca\137\uffca\140\uffca\144" +
    "\uffca\153\uffca\154\uffca\155\uffca\157\uffca\160\uffca\161\uffca" +
    "\162\uffca\163\uffca\164\uffca\170\uffca\171\uffca\172\uffca\173" +
    "\uffca\174\uffca\175\uffca\176\uffca\177\uffca\001\002\000\060" +
    "\002\uff9f\026\uff9f\027\uff9f\071\uff9f\074\uff9f\102\uff9f\122" +
    "\uff9f\125\uff9f\127\uff9f\131\uff9f\137\uff9f\140\uff9f\144\uff9f" +
    "\153\uff9f\154\uff9f\155\uff9f\157\uff9f\160\uff9f\161\uff9f\162" +
    "\uff9f\163\uff9f\164\uff9f\177\uff9f\001\002\000\012\002\uffa2" +
    "\127\uffa2\140\uffa2\144\uffa2\001\002\000\004\040\202\001" +
    "\002\000\022\170\205\171\206\172\210\173\203\174\126" +
    "\175\125\176\132\177\212\001\002\000\010\030\uff83\142" +
    "\uff83\152\uff83\001\002\000\010\030\uff85\142\uff85\152\uff85" +
    "\001\002\000\010\042\216\142\uff88\152\uff88\001\002\000" +
    "\010\030\uff82\142\uff82\152\uff82\001\002\000\004\030\217" +
    "\001\002\000\010\030\uff84\142\uff84\152\uff84\001\002\000" +
    "\004\152\226\001\002\000\012\030\217\042\216\142\uff88" +
    "\152\uff88\001\002\000\006\142\uff8e\152\uff8e\001\002\000" +
    "\006\142\uff91\152\uff91\001\002\000\006\142\uff8d\152\uff8d" +
    "\001\002\000\006\170\225\177\223\001\002\000\020\171" +
    "\206\172\210\173\203\174\126\175\125\176\132\177\222" +
    "\001\002\000\006\142\uff8c\152\uff8c\001\002\000\006\142" +
    "\uff8a\152\uff8a\001\002\000\006\142\uff8b\152\uff8b\001\002" +
    "\000\006\142\uff87\152\uff87\001\002\000\006\142\uff89\152" +
    "\uff89\001\002\000\006\142\uff86\152\uff86\001\002\000\100" +
    "\002\uffcd\026\uffcd\027\uffcd\071\uffcd\074\uffcd\102\uffcd\122" +
    "\uffcd\125\uffcd\127\uffcd\131\uffcd\134\uffcd\137\uffcd\140\uffcd" +
    "\144\uffcd\153\uffcd\154\uffcd\155\uffcd\157\uffcd\160\uffcd\161" +
    "\uffcd\162\uffcd\163\uffcd\164\uffcd\170\uffcd\171\uffcd\172\uffcd" +
    "\173\uffcd\174\uffcd\175\uffcd\176\uffcd\177\uffcd\001\002\000" +
    "\006\142\uff8f\152\uff8f\001\002\000\006\142\uff90\152\uff90" +
    "\001\002\000\004\151\232\001\002\000\004\145\233\001" +
    "\002\000\004\177\234\001\002\000\004\141\243\001\002" +
    "\000\004\146\242\001\002\000\006\146\uffc3\150\237\001" +
    "\002\000\004\177\234\001\002\000\004\146\uffc5\001\002" +
    "\000\004\146\uffc4\001\002\000\060\002\uffc6\026\uffc6\027" +
    "\uffc6\071\uffc6\074\uffc6\102\uffc6\122\uffc6\125\uffc6\127\uffc6" +
    "\131\uffc6\137\uffc6\140\uffc6\144\uffc6\153\uffc6\154\uffc6\155" +
    "\uffc6\157\uffc6\160\uffc6\161\uffc6\162\uffc6\163\uffc6\164\uffc6" +
    "\177\uffc6\001\002\000\004\142\244\001\002\000\010\146" +
    "\uffe7\150\uffe7\152\uffe7\001\002\000\004\174\246\001\002" +
    "\000\004\146\247\001\002\000\004\143\250\001\002\000" +
    "\052\026\107\027\121\071\106\074\103\102\070\122\066" +
    "\125\102\131\074\137\062\144\uffa3\153\065\154\064\155" +
    "\104\157\112\160\073\161\122\162\117\163\076\164\071" +
    "\177\067\001\002\000\004\124\252\001\002\000\004\143" +
    "\250\001\002\000\060\002\uffc2\026\uffc2\027\uffc2\071\uffc2" +
    "\074\uffc2\102\uffc2\122\uffc2\125\uffc2\127\uffc2\131\uffc2\137" +
    "\uffc2\140\uffc2\144\uffc2\153\uffc2\154\uffc2\155\uffc2\157\uffc2" +
    "\160\uffc2\161\uffc2\162\uffc2\163\uffc2\164\uffc2\177\uffc2\001" +
    "\002\000\004\144\255\001\002\000\070\002\uffa5\026\uffa5" +
    "\027\uffa5\071\uffa5\074\uffa5\102\uffa5\122\uffa5\123\uffa5\124" +
    "\uffa5\125\uffa5\127\uffa5\131\uffa5\133\uffa5\134\uffa5\137\uffa5" +
    "\140\uffa5\144\uffa5\153\uffa5\154\uffa5\155\uffa5\157\uffa5\160" +
    "\uffa5\161\uffa5\162\uffa5\163\uffa5\164\uffa5\177\uffa5\001\002" +
    "\000\060\002\uffa0\026\uffa0\027\uffa0\071\uffa0\074\uffa0\102" +
    "\uffa0\122\uffa0\125\uffa0\127\uffa0\131\uffa0\137\uffa0\140\uffa0" +
    "\144\uffa0\153\uffa0\154\uffa0\155\uffa0\157\uffa0\160\uffa0\161" +
    "\uffa0\162\uffa0\163\uffa0\164\uffa0\177\uffa0\001\002\000\022" +
    "\170\205\171\206\172\210\173\203\174\126\175\125\176" +
    "\132\177\212\001\002\000\004\142\261\001\002\000\062" +
    "\002\uffe5\026\uffe5\027\uffe5\071\uffe5\074\uffe5\102\uffe5\122" +
    "\uffe5\125\uffe5\127\uffe5\131\uffe5\137\uffe5\140\uffe5\143\uffe5" +
    "\144\uffe5\153\uffe5\154\uffe5\155\uffe5\157\uffe5\160\uffe5\161" +
    "\uffe5\162\uffe5\163\uffe5\164\uffe5\177\uffe5\001\002\000\004" +
    "\151\263\001\002\000\004\145\264\001\002\000\004\177" +
    "\265\001\002\000\006\146\uffbe\150\271\001\002\000\004" +
    "\146\267\001\002\000\004\152\270\001\002\000\060\002" +
    "\uffc1\026\uffc1\027\uffc1\071\uffc1\074\uffc1\102\uffc1\122\uffc1" +
    "\125\uffc1\127\uffc1\131\uffc1\137\uffc1\140\uffc1\144\uffc1\153" +
    "\uffc1\154\uffc1\155\uffc1\157\uffc1\160\uffc1\161\uffc1\162\uffc1" +
    "\163\uffc1\164\uffc1\177\uffc1\001\002\000\004\177\265\001" +
    "\002\000\004\146\uffc0\001\002\000\004\146\uffbf\001\002" +
    "\000\004\177\275\001\002\000\004\142\276\001\002\000" +
    "\004\143\277\001\002\000\004\126\301\001\002\000\004" +
    "\130\321\001\002\000\004\151\302\001\002\000\014\172" +
    "\305\173\307\174\303\175\310\176\304\001\002\000\004" +
    "\143\uffda\001\002\000\004\143\uffd8\001\002\000\004\143" +
    "\uffdb\001\002\000\004\143\311\001\002\000\004\143\uffdc" +
    "\001\002\000\004\143\uffd9\001\002\000\052\026\107\027" +
    "\121\071\106\074\103\102\070\122\066\125\102\127\uffa3" +
    "\131\074\137\062\153\065\154\064\155\104\157\112\160" +
    "\073\161\122\162\117\163\076\164\071\177\067\001\002" +
    "\000\006\126\301\130\uffd6\001\002\000\004\130\uffdd\001" +
    "\002\000\004\130\uffd7\001\002\000\004\127\316\001\002" +
    "\000\004\152\317\001\002\000\004\144\320\001\002\000" +
    "\010\126\uffd4\130\uffd4\144\uffd4\001\002\000\004\151\324" +
    "\001\002\000\004\144\323\001\002\000\060\002\uffde\026" +
    "\uffde\027\uffde\071\uffde\074\uffde\102\uffde\122\uffde\125\uffde" +
    "\127\uffde\131\uffde\137\uffde\140\uffde\144\uffde\153\uffde\154" +
    "\uffde\155\uffde\157\uffde\160\uffde\161\uffde\162\uffde\163\uffde" +
    "\164\uffde\177\uffde\001\002\000\004\143\311\001\002\000" +
    "\004\144\uffd5\001\002\000\004\040\327\001\002\000\004" +
    "\172\330\001\002\000\004\152\331\001\002\000\100\002" +
    "\uffc9\026\uffc9\027\uffc9\071\uffc9\074\uffc9\102\uffc9\122\uffc9" +
    "\125\uffc9\127\uffc9\131\uffc9\134\uffc9\137\uffc9\140\uffc9\144" +
    "\uffc9\153\uffc9\154\uffc9\155\uffc9\157\uffc9\160\uffc9\161\uffc9" +
    "\162\uffc9\163\uffc9\164\uffc9\170\uffc9\171\uffc9\172\uffc9\173" +
    "\uffc9\174\uffc9\175\uffc9\176\uffc9\177\uffc9\001\002\000\004" +
    "\143\250\001\002\000\004\133\334\001\002\000\004\151" +
    "\335\001\002\000\004\143\250\001\002\000\060\002\uffc7" +
    "\026\uffc7\027\uffc7\071\uffc7\074\uffc7\102\uffc7\122\uffc7\125" +
    "\uffc7\127\uffc7\131\uffc7\137\uffc7\140\uffc7\144\uffc7\153\uffc7" +
    "\154\uffc7\155\uffc7\157\uffc7\160\uffc7\161\uffc7\162\uffc7\163" +
    "\uffc7\164\uffc7\177\uffc7\001\002\000\004\040\340\001\002" +
    "\000\014\141\127\174\126\175\125\176\132\177\133\001" +
    "\002\000\004\152\342\001\002\000\100\002\uffcc\026\uffcc" +
    "\027\uffcc\071\uffcc\074\uffcc\102\uffcc\122\uffcc\125\uffcc\127" +
    "\uffcc\131\uffcc\134\uffcc\137\uffcc\140\uffcc\144\uffcc\153\uffcc" +
    "\154\uffcc\155\uffcc\157\uffcc\160\uffcc\161\uffcc\162\uffcc\163" +
    "\uffcc\164\uffcc\170\uffcc\171\uffcc\172\uffcc\173\uffcc\174\uffcc" +
    "\175\uffcc\176\uffcc\177\uffcc\001\002\000\060\002\uffe6\026" +
    "\uffe6\027\uffe6\071\uffe6\074\uffe6\102\uffe6\122\uffe6\125\uffe6" +
    "\127\uffe6\131\uffe6\137\uffe6\140\uffe6\144\uffe6\153\uffe6\154" +
    "\uffe6\155\uffe6\157\uffe6\160\uffe6\161\uffe6\162\uffe6\163\uffe6" +
    "\164\uffe6\177\uffe6\001\002\000\004\040\345\001\002\000" +
    "\004\173\346\001\002\000\004\152\347\001\002\000\100" +
    "\002\uffc8\026\uffc8\027\uffc8\071\uffc8\074\uffc8\102\uffc8\122" +
    "\uffc8\125\uffc8\127\uffc8\131\uffc8\134\uffc8\137\uffc8\140\uffc8" +
    "\144\uffc8\153\uffc8\154\uffc8\155\uffc8\157\uffc8\160\uffc8\161" +
    "\uffc8\162\uffc8\163\uffc8\164\uffc8\170\uffc8\171\uffc8\172\uffc8" +
    "\173\uffc8\174\uffc8\175\uffc8\176\uffc8\177\uffc8\001\002\000" +
    "\004\145\351\001\002\000\004\177\265\001\002\000\004" +
    "\146\353\001\002\000\004\201\354\001\002\000\004\172" +
    "\355\001\002\000\004\152\356\001\002\000\060\002\uffbc" +
    "\026\uffbc\027\uffbc\071\uffbc\074\uffbc\102\uffbc\122\uffbc\125" +
    "\uffbc\127\uffbc\131\uffbc\137\uffbc\140\uffbc\144\uffbc\153\uffbc" +
    "\154\uffbc\155\uffbc\157\uffbc\160\uffbc\161\uffbc\162\uffbc\163" +
    "\uffbc\164\uffbc\177\uffbc\001\002\000\030\074\371\137\363" +
    "\141\127\170\366\171\367\172\370\173\364\174\126\175" +
    "\125\176\132\177\133\001\002\000\006\142\uffa7\152\uffa7" +
    "\001\002\000\014\141\127\174\126\175\125\176\132\177" +
    "\133\001\002\000\006\142\uffa8\152\uffa8\001\002\000\004" +
    "\177\234\001\002\000\004\152\uffaf\001\002\000\004\152" +
    "\uffb3\001\002\000\004\152\uffae\001\002\000\004\152\uffb1" +
    "\001\002\000\004\152\uffb0\001\002\000\004\177\374\001" +
    "\002\000\004\152\uffac\001\002\000\004\152\uffb2\001\002" +
    "\000\004\152\uffbd\001\002\000\004\152\uffad\001\002\000" +
    "\022\170\205\171\206\172\210\173\203\174\126\175\125" +
    "\176\132\177\212\001\002\000\004\142\u0100\001\002\000" +
    "\004\143\250\001\002\000\064\002\uffd1\026\uffd1\027\uffd1" +
    "\071\uffd1\074\uffd1\102\uffd1\122\uffd1\123\u0102\124\uffd1\125" +
    "\uffd1\127\uffd1\131\uffd1\137\uffd1\140\uffd1\144\uffd1\153\uffd1" +
    "\154\uffd1\155\uffd1\157\uffd1\160\uffd1\161\uffd1\162\uffd1\163" +
    "\uffd1\164\uffd1\177\uffd1\001\002\000\004\141\u0108\001\002" +
    "\000\062\002\uffd2\026\uffd2\027\uffd2\071\uffd2\074\uffd2\102" +
    "\uffd2\122\uffd2\124\uffd2\125\uffd2\127\uffd2\131\uffd2\137\uffd2" +
    "\140\uffd2\144\uffd2\153\uffd2\154\uffd2\155\uffd2\157\uffd2\160" +
    "\uffd2\161\uffd2\162\uffd2\163\uffd2\164\uffd2\177\uffd2\001\002" +
    "\000\062\002\uffce\026\uffce\027\uffce\071\uffce\074\uffce\102" +
    "\uffce\122\uffce\124\u0105\125\uffce\127\uffce\131\uffce\137\uffce" +
    "\140\uffce\144\uffce\153\uffce\154\uffce\155\uffce\157\uffce\160" +
    "\uffce\161\uffce\162\uffce\163\uffce\164\uffce\177\uffce\001\002" +
    "\000\004\143\250\001\002\000\060\002\uffd3\026\uffd3\027" +
    "\uffd3\071\uffd3\074\uffd3\102\uffd3\122\uffd3\125\uffd3\127\uffd3" +
    "\131\uffd3\137\uffd3\140\uffd3\144\uffd3\153\uffd3\154\uffd3\155" +
    "\uffd3\157\uffd3\160\uffd3\161\uffd3\162\uffd3\163\uffd3\164\uffd3" +
    "\177\uffd3\001\002\000\060\002\uffcf\026\uffcf\027\uffcf\071" +
    "\uffcf\074\uffcf\102\uffcf\122\uffcf\125\uffcf\127\uffcf\131\uffcf" +
    "\137\uffcf\140\uffcf\144\uffcf\153\uffcf\154\uffcf\155\uffcf\157" +
    "\uffcf\160\uffcf\161\uffcf\162\uffcf\163\uffcf\164\uffcf\177\uffcf" +
    "\001\002\000\022\170\205\171\206\172\210\173\203\174" +
    "\126\175\125\176\132\177\212\001\002\000\004\142\u010a" +
    "\001\002\000\004\143\250\001\002\000\064\002\uffd1\026" +
    "\uffd1\027\uffd1\071\uffd1\074\uffd1\102\uffd1\122\uffd1\123\u0102" +
    "\124\uffd1\125\uffd1\127\uffd1\131\uffd1\137\uffd1\140\uffd1\144" +
    "\uffd1\153\uffd1\154\uffd1\155\uffd1\157\uffd1\160\uffd1\161\uffd1" +
    "\162\uffd1\163\uffd1\164\uffd1\177\uffd1\001\002\000\062\002" +
    "\uffd0\026\uffd0\027\uffd0\071\uffd0\074\uffd0\102\uffd0\122\uffd0" +
    "\124\uffd0\125\uffd0\127\uffd0\131\uffd0\137\uffd0\140\uffd0\144" +
    "\uffd0\153\uffd0\154\uffd0\155\uffd0\157\uffd0\160\uffd0\161\uffd0" +
    "\162\uffd0\163\uffd0\164\uffd0\177\uffd0\001\002\000\020\157" +
    "\112\160\073\161\122\162\117\163\076\164\071\177\u010f" +
    "\001\002\000\022\170\uffe2\171\uffe2\172\uffe2\173\uffe2\174" +
    "\uffe2\175\uffe2\176\uffe2\177\uffe2\001\002\000\022\170\uffe1" +
    "\171\uffe1\172\uffe1\173\uffe1\174\uffe1\175\uffe1\176\uffe1\177" +
    "\uffe1\001\002\000\022\170\205\171\206\172\210\173\203" +
    "\174\126\175\125\176\132\177\212\001\002\000\004\152" +
    "\u0112\001\002\000\004\177\u0113\001\002\000\006\037\360" +
    "\041\361\001\002\000\004\142\u0117\001\002\000\004\142" +
    "\uffdf\001\002\000\004\142\uffe0\001\002\000\004\143\250" +
    "\001\002\000\060\002\uffe3\026\uffe3\027\uffe3\071\uffe3\074" +
    "\uffe3\102\uffe3\122\uffe3\125\uffe3\127\uffe3\131\uffe3\137\uffe3" +
    "\140\uffe3\144\uffe3\153\uffe3\154\uffe3\155\uffe3\157\uffe3\160" +
    "\uffe3\161\uffe3\162\uffe3\163\uffe3\164\uffe3\177\uffe3\001\002" +
    "\000\004\155\104\001\002\000\060\002\uffe4\026\uffe4\027" +
    "\uffe4\071\uffe4\074\uffe4\102\uffe4\122\uffe4\125\uffe4\127\uffe4" +
    "\131\uffe4\137\uffe4\140\uffe4\144\uffe4\153\uffe4\154\uffe4\155" +
    "\uffe4\157\uffe4\160\uffe4\161\uffe4\162\uffe4\163\uffe4\164\uffe4" +
    "\177\uffe4\001\002\000\004\152\u011c\001\002\000\060\002" +
    "\uff97\026\uff97\027\uff97\071\uff97\074\uff97\102\uff97\122\uff97" +
    "\125\uff97\127\uff97\131\uff97\137\uff97\140\uff97\144\uff97\153" +
    "\uff97\154\uff97\155\uff97\157\uff97\160\uff97\161\uff97\162\uff97" +
    "\163\uff97\164\uff97\177\uff97\001\002\000\060\002\uff9e\026" +
    "\uff9e\027\uff9e\071\uff9e\074\uff9e\102\uff9e\122\uff9e\125\uff9e" +
    "\127\uff9e\131\uff9e\137\uff9e\140\uff9e\144\uff9e\153\uff9e\154" +
    "\uff9e\155\uff9e\157\uff9e\160\uff9e\161\uff9e\162\uff9e\163\uff9e" +
    "\164\uff9e\177\uff9e\001\002\000\030\074\371\137\363\141" +
    "\127\170\366\171\367\172\370\173\364\174\126\175\125" +
    "\176\132\177\133\001\002\000\004\152\u0120\001\002\000" +
    "\004\144\u0121\001\002\000\056\002\uffef\026\uffef\027\uffef" +
    "\071\uffef\074\uffef\102\uffef\122\uffef\125\uffef\131\uffef\134" +
    "\uffef\137\uffef\144\uffef\153\uffef\154\uffef\155\uffef\157\uffef" +
    "\160\uffef\161\uffef\162\uffef\163\uffef\164\uffef\177\uffef\001" +
    "\002\000\004\143\250\001\002\000\056\002\uffee\026\uffee" +
    "\027\uffee\071\uffee\074\uffee\102\uffee\122\uffee\125\uffee\131" +
    "\uffee\134\uffee\137\uffee\144\uffee\153\uffee\154\uffee\155\uffee" +
    "\157\uffee\160\uffee\161\uffee\162\uffee\163\uffee\164\uffee\177" +
    "\uffee\001\002\000\054\002\ufff1\026\ufff1\027\ufff1\071\ufff1" +
    "\074\ufff1\102\ufff1\122\ufff1\125\ufff1\131\ufff1\137\ufff1\144" +
    "\ufff1\153\ufff1\154\ufff1\155\ufff1\157\ufff1\160\ufff1\161\ufff1" +
    "\162\ufff1\163\ufff1\164\ufff1\177\ufff1\001\002\000\004\002" +
    "\000\001\002\000\054\002\ufff8\026\ufff8\027\ufff8\071\ufff8" +
    "\074\ufff8\102\ufff8\122\ufff8\125\ufff8\131\ufff8\134\ufff8\137" +
    "\ufff8\153\ufff8\154\ufff8\155\ufff8\157\ufff8\160\ufff8\161\ufff8" +
    "\162\ufff8\163\ufff8\164\ufff8\177\ufff8\001\002\000\004\143" +
    "\u0128\001\002\000\022\134\ufff5\144\ufff5\157\112\160\073" +
    "\161\122\162\117\163\076\164\071\001\002\000\006\134" +
    "\024\144\ufff2\001\002\000\022\134\ufff5\144\ufff5\157\112" +
    "\160\073\161\122\162\117\163\076\164\071\001\002\000" +
    "\006\134\ufff6\144\ufff6\001\002\000\006\134\ufff4\144\ufff4" +
    "\001\002\000\004\144\u012e\001\002\000\056\002\ufff7\006" +
    "\ufff7\026\ufff7\027\ufff7\071\ufff7\074\ufff7\102\ufff7\122\ufff7" +
    "\125\ufff7\131\ufff7\134\ufff7\137\ufff7\153\ufff7\154\ufff7\155" +
    "\ufff7\157\ufff7\160\ufff7\161\ufff7\162\ufff7\163\ufff7\164\ufff7" +
    "\177\ufff7\001\002\000\004\016\u0130\001\002\000\004\177" +
    "\u0131\001\002\000\004\152\ufffb\001\002\000\004\152\ufffc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\012\002\010\003\005\004\007\005\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\017" +
    "\007\014\010\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\013" +
    "\004\007\005\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\u0125\007\014\010\016" +
    "\001\001\000\010\013\020\014\022\015\021\001\001\000" +
    "\050\024\077\025\071\026\076\027\110\032\100\036\062" +
    "\037\117\045\107\050\112\051\115\055\074\056\060\061" +
    "\114\062\104\064\056\066\057\067\u0124\070\113\071\055" +
    "\001\001\000\010\013\u0123\014\022\015\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\030\060\033\001\001\000\002\001\001\000\004\017" +
    "\u0121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\043\021\044\060" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\050\001\001\000\006\021\051\060" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\024\077\025\071\026\076\027\110\032" +
    "\100\036\062\037\117\045\107\050\112\051\115\055\074" +
    "\056\060\061\114\062\104\064\056\066\057\067\054\070" +
    "\113\071\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u011a\001\001\000\002\001\001\000\004\065\u0118" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\342" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\024\077\025\071\026\076" +
    "\027\110\032\100\036\062\037\117\045\107\050\112\051" +
    "\115\055\074\056\060\061\114\062\104\064\056\066\057" +
    "\067\177\070\113\071\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\057" +
    "\130\101\134\103\127\105\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\057\130\101\164\103\127\105" +
    "\133\001\001\000\012\057\130\102\161\103\162\105\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\104\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\057\130\105\157\001\001\000\006\057" +
    "\130\105\155\001\001\000\006\057\130\105\153\001\001" +
    "\000\006\057\130\105\151\001\001\000\006\057\130\105" +
    "\147\001\001\000\006\057\130\105\145\001\001\000\002" +
    "\001\001\000\004\104\146\001\001\000\002\001\001\000" +
    "\004\104\150\001\001\000\002\001\001\000\004\104\152" +
    "\001\001\000\002\001\001\000\004\104\154\001\001\000" +
    "\002\001\001\000\004\104\156\001\001\000\002\001\001" +
    "\000\004\104\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\057\130\102\163\103\162\105\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\057\130\101\174\103" +
    "\127\105\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\057\203\072\210\100\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\227\001\001\000\002\001" +
    "\001\000\004\074\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\073\213\074\212\076\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\077\223\001\001\000\010\057\203\075\217\100\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\235\046\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\237" +
    "\001\001\000\006\023\235\046\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\250\001\001\000\050\024\077\025\071\026\076" +
    "\027\110\032\100\036\062\037\117\045\107\050\112\051" +
    "\115\055\074\056\060\061\114\062\104\064\056\066\057" +
    "\067\253\070\113\071\055\001\001\000\002\001\001\000" +
    "\004\065\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\057\203\072" +
    "\257\100\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\265\001" +
    "\001\000\004\053\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\277\001\001\000" +
    "\004\043\321\001\001\000\002\001\001\000\004\041\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\024\077\025\071\026\076\027\110\032" +
    "\100\036\062\037\117\045\107\050\112\051\115\055\074" +
    "\056\060\061\114\062\104\064\056\066\057\067\314\070" +
    "\113\071\055\001\001\000\006\040\313\042\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\332\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\057\130\101\340\103\127\105\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\054\371\057\130\063\364\101" +
    "\372\103\127\105\133\001\001\000\002\001\001\000\012" +
    "\057\130\101\361\103\127\105\133\001\001\000\002\001" +
    "\001\000\004\023\374\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\057\203\072" +
    "\376\100\206\001\001\000\002\001\001\000\004\065\u0100" +
    "\001\001\000\006\033\u0103\034\u0102\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u0105\001\001\000\004" +
    "\065\u0106\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\057\203\072\u0108\100\206\001\001\000\002\001\001" +
    "\000\004\065\u010a\001\001\000\006\033\u010b\034\u0102\001" +
    "\001\000\002\001\001\000\006\030\u010f\056\u010d\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\057\203\072" +
    "\u0110\100\206\001\001\000\002\001\001\000\010\031\u0113" +
    "\061\u0115\064\u0114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\u0117" +
    "\001\001\000\002\001\001\000\004\025\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\054\371\057\130\063\u011e\101\372\103" +
    "\127\105\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\u0128\012\u012a\056\u0129\001" +
    "\001\000\010\013\u012c\014\022\015\021\001\001\000\010" +
    "\011\u012b\012\u012a\056\u0129\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= importar_opcional clases_opcionales funciones_opcionales instrucciones_opcionales 
            {
              Object RESULT =null;
		
    System.out.println("-----------------------------");
    System.out.println("Escaneo completado con exito.");
    System.out.println("-----------------------------");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // importar_opcional ::= importar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("importar_opcional",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // importar_opcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("importar_opcional",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importar ::= declara_importacion SEMI importar_opcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("importar",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declara_importacion ::= IMPORT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_importacion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declara_importacion ::= FROM ID IMPORT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_importacion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // clases_opcionales ::= clases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases_opcionales",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // clases_opcionales ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases_opcionales",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // clases ::= clase clases_opcionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // clase ::= CLASS ID LLAVE_IZQ atributos_opcionales funciones_opcionales LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atributos_opcionales ::= atributos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos_opcionales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atributos_opcionales ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos_opcionales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atributos ::= declara_variable atributos_opcionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funciones_opcionales ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_opcionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funciones_opcionales ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_opcionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funciones ::= funcion funciones_opcionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion ::= FUNCTION ID COLON tipo_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_funcion ::= tipo_dato parametros LLAVE_IZQ instrucciones_opcionales RETURN valor SEMI LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_funcion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_funcion ::= VOID parametros bloque_codigo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_funcion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros ::= PAR_IZQ parametros_opcionales PAR_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros_opcionales ::= declara_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_opcionales",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros_opcionales ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_opcionales",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declara_parametros ::= tipo_dato ID mas_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_parametros",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // mas_parametros ::= COMMA declara_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // mas_parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ejecutar_funcion ::= ID PAR_IZQ PAR_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejecutar_funcion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ciclo_while ::= evaluar_while bloque_codigo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // evaluar_while ::= WHILE_LOOP PAR_IZQ exp_logica PAR_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluar_while",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ciclo_do_while ::= DO_LOOP bloque_codigo evaluar_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo_do_while",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ciclo_for ::= FOR_LOOP PAR_IZQ iterador exp_logica SEMI incremento PAR_DER bloque_codigo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iterador ::= declara_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iterador ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // incremento ::= agregar_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // incremento ::= variable_opr_unario 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estructura_switch ::= SWITCH PAR_IZQ ID PAR_DER LLAVE_IZQ switch_opciones default_opcion LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_switch",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // switch_opciones ::= CASE COLON switch_literal bloque_codigo_switch mas_switch_opciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_opciones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // switch_literal ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // switch_literal ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // switch_literal ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // switch_literal ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // switch_literal ::= COMPLEX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mas_switch_opciones ::= switch_opciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_switch_opciones",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mas_switch_opciones ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_switch_opciones",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // default_opcion ::= DEFAULT COLON bloque_codigo_switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_opcion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bloque_codigo_switch ::= LLAVE_IZQ instrucciones_opcionales BREAK SEMI LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo_switch",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // estructura_if ::= IF PAR_IZQ exp_logica PAR_DER bloque_codigo condicion_opcional condicion_else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_if",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion_opcional ::= condicion_elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_opcional",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion_opcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_opcional",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion_elif ::= ELIF PAR_IZQ exp_logica PAR_DER bloque_codigo condicion_opcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_elif",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion_else ::= ELSE bloque_codigo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_else",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicion_else ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_else",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declara_variable ::= DATATYPE_BOOL ID ASSIGNMENT exp_logica SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_variable",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declara_variable ::= DATATYPE_INT ID ASSIGNMENT exp_aritmetica SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_variable",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declara_variable ::= DATATYPE_DECIMAL ID ASSIGNMENT exp_aritmetica SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_variable",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declara_variable ::= DATATYPE_COMPLEX ID ASSIGNMENT exp_aritmetica SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_variable",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declara_variable ::= DATATYPE_STRING ID ASSIGNMENT STRING SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_variable",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declara_variable ::= DATATYPE_CHAR ID ASSIGNMENT CHARACTER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_variable",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // estrucura_try ::= TRY COLON bloque_codigo EXCEPTION COLON bloque_codigo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estrucura_try",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ejecuta_paralelo ::= PACKAGE EXECUTE COLON COR_IZQ lista_funciones COR_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejecuta_paralelo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_funciones ::= ejecutar_funcion otra_funcion_paralela 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // otra_funcion_paralela ::= COMMA lista_funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otra_funcion_paralela",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // otra_funcion_paralela ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otra_funcion_paralela",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // timeout ::= STOP COR_IZQ INTEGER COR_DER bloque_codigo ELSE bloque_codigo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("timeout",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // revisa ::= CONSTRAINT ID COLON COR_IZQ lista_id COR_DER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("revisa",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_id ::= ID mas_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_id",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // mas_id ::= COMMA lista_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_id",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // mas_id ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_id",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // regresa_revision ::= CONSTRAINT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("regresa_revision",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // haz_backup ::= BACKUP COLON COR_IZQ lista_id COR_DER ARROW STRING SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("haz_backup",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_dato ::= DATATYPE_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_dato ::= DATATYPE_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo_dato ::= DATATYPE_DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo_dato ::= DATATYPE_COMPLEX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_dato ::= DATATYPE_STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo_dato ::= DATATYPE_CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_dato ::= DATATYPE_MISC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo_dato ::= DATA_STRUCTURE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // asigna_variable ::= ID ASSIGNMENT valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asigna_variable",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor ::= exp_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor ::= EXECUTE ejecutar_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor ::= regresa_revision 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal_numerico ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal_numerico ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal_numerico ::= COMPLEX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // agregar_variable ::= ID ASSIGN_OPT exp_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agregar_variable",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // variable_opr_unario ::= ID UNARY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_opr_unario",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // imprime_consola ::= PRINT PAR_IZQ STRING PAR_DER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprime_consola",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // bloque_codigo ::= LLAVE_IZQ instrucciones_opcionales LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // instrucciones_opcionales ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_opcionales",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // instrucciones_opcionales ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_opcionales",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // instrucciones ::= declara_instruccion instrucciones_opcionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declara_instruccion ::= declara_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declara_instruccion ::= asigna_variable SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declara_instruccion ::= agregar_variable SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declara_instruccion ::= variable_opr_unario SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declara_instruccion ::= ciclo_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declara_instruccion ::= ciclo_do_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declara_instruccion ::= ciclo_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declara_instruccion ::= estructura_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // declara_instruccion ::= estructura_switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // declara_instruccion ::= estrucura_try 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declara_instruccion ::= EXECUTE ejecutar_funcion SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declara_instruccion ::= imprime_consola 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declara_instruccion ::= ejecuta_paralelo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declara_instruccion ::= timeout 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declara_instruccion ::= revisa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declara_instruccion ::= haz_backup 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // exp_logica ::= ID exp_logica_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_logica",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // exp_logica ::= BOOLEAN operacion_logica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_logica",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // exp_logica ::= valor_comp comparacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_logica",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exp_logica_p ::= comparacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_logica_p",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exp_logica_p ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_logica_p",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // comparacion ::= COMPARISON comparacion_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // comparacion_p ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_p",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // comparacion_p ::= valor_comp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_p",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operacion_logica ::= LOGICAL operacion_logica_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_logica",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operacion_logica ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_logica",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operacion_logica_p ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_logica_p",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operacion_logica_p ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_logica_p",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valor_comp ::= literal_numerico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_comp",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valor_comp ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_comp",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valor_comp ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_comp",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valor_comp ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_comp",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // exp_aritmetica ::= termino exp_a_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // exp_a_p ::= termino exp_a_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_a_p",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // exp_a_p ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_a_p",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // termino ::= factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // termino_p ::= SUMA factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // termino_p ::= RESTA factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // termino_p ::= DIVISION factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // termino_p ::= PRODUCTO factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // termino_p ::= MOD factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // termino_p ::= POTENCIA factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // termino_p ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // factor ::= PAR_IZQ exp_aritmetica PAR_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // factor ::= literal_numerico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
