
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\002\000\002\004\005\000\002\005\004" +
    "\000\002\005\006\000\002\006\003\000\002\006\002\000" +
    "\002\007\004\000\002\010\010\000\002\011\003\000\002" +
    "\011\002\000\002\012\004\000\002\013\003\000\002\013" +
    "\002\000\002\014\004\000\002\015\006\000\002\016\012" +
    "\000\002\016\005\000\002\017\005\000\002\020\003\000" +
    "\002\020\002\000\002\021\005\000\002\022\004\000\002" +
    "\022\002\000\002\023\007\000\002\024\004\000\002\025" +
    "\006\000\002\026\005\000\002\027\012\000\002\030\003" +
    "\000\002\030\003\000\002\031\003\000\002\031\003\000" +
    "\002\037\012\000\002\040\007\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\042\003\000\002\042\002\000\002\043\005" +
    "\000\002\044\007\000\002\032\011\000\002\033\003\000" +
    "\002\033\002\000\002\034\010\000\002\035\004\000\002" +
    "\035\002\000\002\045\007\000\002\045\007\000\002\045" +
    "\007\000\002\045\007\000\002\045\007\000\002\045\007" +
    "\000\002\036\010\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\051" +
    "\005\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\050\005\000\002" +
    "\053\004\000\002\060\007\000\002\054\005\000\002\056" +
    "\003\000\002\056\002\000\002\055\004\000\002\057\003" +
    "\000\002\057\004\000\002\057\004\000\002\057\004\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\061\004\000\002\061\004" +
    "\000\002\061\004\000\002\062\003\000\002\062\003\000" +
    "\002\063\004\000\002\064\003\000\002\064\003\000\002" +
    "\065\004\000\002\065\002\000\002\066\003\000\002\066" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\070\004\000\002\071\004\000" +
    "\002\071\002\000\002\072\004\000\002\073\005\000\002" +
    "\073\005\000\002\073\005\000\002\073\005\000\002\073" +
    "\005\000\002\073\005\000\002\073\002\000\002\074\005" +
    "\000\002\074\003\000\002\074\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\052\002\ufffe\006\ufffe\016\004\017\005\027" +
    "\ufffe\122\ufffe\125\ufffe\131\ufffe\134\ufffe\137\ufffe\153\ufffe" +
    "\154\ufffe\155\ufffe\157\ufffe\160\ufffe\161\ufffe\162\ufffe\163" +
    "\ufffe\164\ufffe\177\ufffe\001\002\000\004\177\u0105\001\002" +
    "\000\004\177\u0102\001\002\000\046\002\ufff9\006\016\027" +
    "\ufff9\122\ufff9\125\ufff9\131\ufff9\134\ufff9\137\ufff9\153\ufff9" +
    "\154\ufff9\155\ufff9\157\ufff9\160\ufff9\161\ufff9\162\ufff9\163" +
    "\ufff9\164\ufff9\177\ufff9\001\002\000\004\152\013\001\002" +
    "\000\046\002\uffff\006\uffff\027\uffff\122\uffff\125\uffff\131" +
    "\uffff\134\uffff\137\uffff\153\uffff\154\uffff\155\uffff\157\uffff" +
    "\160\uffff\161\uffff\162\uffff\163\uffff\164\uffff\177\uffff\001" +
    "\002\000\004\002\012\001\002\000\004\002\001\001\002" +
    "\000\052\002\ufffe\006\ufffe\016\004\017\005\027\ufffe\122" +
    "\ufffe\125\ufffe\131\ufffe\134\ufffe\137\ufffe\153\ufffe\154\ufffe" +
    "\155\ufffe\157\ufffe\160\ufffe\161\ufffe\162\ufffe\163\ufffe\164" +
    "\ufffe\177\ufffe\001\002\000\046\002\ufffd\006\ufffd\027\ufffd" +
    "\122\ufffd\125\ufffd\131\ufffd\134\ufffd\137\ufffd\153\ufffd\154" +
    "\ufffd\155\ufffd\157\ufffd\160\ufffd\161\ufffd\162\ufffd\163\ufffd" +
    "\164\ufffd\177\ufffd\001\002\000\044\002\ufffa\027\ufffa\122" +
    "\ufffa\125\ufffa\131\ufffa\134\ufffa\137\ufffa\153\ufffa\154\ufffa" +
    "\155\ufffa\157\ufffa\160\ufffa\161\ufffa\162\ufffa\163\ufffa\164" +
    "\ufffa\177\ufffa\001\002\000\004\177\372\001\002\000\046" +
    "\002\ufff9\006\016\027\ufff9\122\ufff9\125\ufff9\131\ufff9\134" +
    "\ufff9\137\ufff9\153\ufff9\154\ufff9\155\ufff9\157\ufff9\160\ufff9" +
    "\161\ufff9\162\ufff9\163\ufff9\164\ufff9\177\ufff9\001\002\000" +
    "\044\002\ufff2\027\ufff2\122\ufff2\125\ufff2\131\ufff2\134\024" +
    "\137\ufff2\153\ufff2\154\ufff2\155\ufff2\157\ufff2\160\ufff2\161" +
    "\ufff2\162\ufff2\163\ufff2\164\ufff2\177\ufff2\001\002\000\042" +
    "\002\uffb0\027\104\122\067\125\066\131\076\137\112\153" +
    "\057\154\113\155\070\157\105\160\101\161\110\162\100" +
    "\163\111\164\060\177\072\001\002\000\046\002\ufff2\027" +
    "\ufff2\122\ufff2\125\ufff2\131\ufff2\134\024\137\ufff2\144\ufff2" +
    "\153\ufff2\154\ufff2\155\ufff2\157\ufff2\160\ufff2\161\ufff2\162" +
    "\ufff2\163\ufff2\164\ufff2\177\ufff2\001\002\000\044\002\ufff3" +
    "\027\ufff3\122\ufff3\125\ufff3\131\ufff3\137\ufff3\144\ufff3\153" +
    "\ufff3\154\ufff3\155\ufff3\157\ufff3\160\ufff3\161\ufff3\162\ufff3" +
    "\163\ufff3\164\ufff3\177\ufff3\001\002\000\004\177\025\001" +
    "\002\000\004\151\026\001\002\000\024\135\030\157\027" +
    "\160\036\161\041\162\032\163\033\164\037\165\040\166" +
    "\035\001\002\000\006\141\uffc6\177\uffc6\001\002\000\004" +
    "\141\043\001\002\000\046\002\ufff0\027\ufff0\122\ufff0\125" +
    "\ufff0\131\ufff0\134\ufff0\137\ufff0\144\ufff0\153\ufff0\154\ufff0" +
    "\155\ufff0\157\ufff0\160\ufff0\161\ufff0\162\ufff0\163\ufff0\164" +
    "\ufff0\177\ufff0\001\002\000\006\141\uffc3\177\uffc3\001\002" +
    "\000\006\141\uffc2\177\uffc2\001\002\000\004\141\043\001" +
    "\002\000\006\141\uffbf\177\uffbf\001\002\000\006\141\uffc5" +
    "\177\uffc5\001\002\000\006\141\uffc1\177\uffc1\001\002\000" +
    "\006\141\uffc0\177\uffc0\001\002\000\006\141\uffc4\177\uffc4" +
    "\001\002\000\004\143\054\001\002\000\024\142\uffeb\157" +
    "\027\160\036\161\041\162\032\163\033\164\037\165\040" +
    "\166\035\001\002\000\004\142\053\001\002\000\004\142" +
    "\uffec\001\002\000\004\177\047\001\002\000\006\142\uffe8" +
    "\150\050\001\002\000\022\157\027\160\036\161\041\162" +
    "\032\163\033\164\037\165\040\166\035\001\002\000\004" +
    "\142\uffea\001\002\000\004\142\uffe9\001\002\000\004\143" +
    "\uffed\001\002\000\042\027\104\122\067\125\066\131\076" +
    "\137\112\140\uffb0\153\057\154\113\155\070\157\105\160" +
    "\101\161\110\162\100\163\111\164\060\177\072\001\002" +
    "\000\012\002\uffb1\127\uffb1\140\uffb1\144\uffb1\001\002\000" +
    "\004\143\114\001\002\000\004\141\350\001\002\000\004" +
    "\177\344\001\002\000\004\152\343\001\002\000\050\002" +
    "\uffb0\027\104\122\067\125\066\127\uffb0\131\076\137\112" +
    "\140\uffb0\144\uffb0\153\057\154\113\155\070\157\105\160" +
    "\101\161\110\162\100\163\111\164\060\177\072\001\002" +
    "\000\004\152\341\001\002\000\050\002\uffa6\027\uffa6\122" +
    "\uffa6\125\uffa6\127\uffa6\131\uffa6\137\uffa6\140\uffa6\144\uffa6" +
    "\153\uffa6\154\uffa6\155\uffa6\157\uffa6\160\uffa6\161\uffa6\162" +
    "\uffa6\163\uffa6\164\uffa6\177\uffa6\001\002\000\004\140\335" +
    "\001\002\000\004\141\303\001\002\000\004\141\264\001" +
    "\002\000\004\141\261\001\002\000\050\002\uffa3\027\uffa3" +
    "\122\uffa3\125\uffa3\127\uffa3\131\uffa3\137\uffa3\140\uffa3\144" +
    "\uffa3\153\uffa3\154\uffa3\155\uffa3\157\uffa3\160\uffa3\161\uffa3" +
    "\162\uffa3\163\uffa3\164\uffa3\177\uffa3\001\002\000\010\037" +
    "\250\040\247\041\251\001\002\000\004\152\246\001\002" +
    "\000\050\002\uffae\027\uffae\122\uffae\125\uffae\127\uffae\131" +
    "\uffae\137\uffae\140\uffae\144\uffae\153\uffae\154\uffae\155\uffae" +
    "\157\uffae\160\uffae\161\uffae\162\uffae\163\uffae\164\uffae\177" +
    "\uffae\001\002\000\050\002\uffa7\027\uffa7\122\uffa7\125\uffa7" +
    "\127\uffa7\131\uffa7\137\uffa7\140\uffa7\144\uffa7\153\uffa7\154" +
    "\uffa7\155\uffa7\157\uffa7\160\uffa7\161\uffa7\162\uffa7\163\uffa7" +
    "\164\uffa7\177\uffa7\001\002\000\004\151\241\001\002\000" +
    "\050\002\uffa5\027\uffa5\122\uffa5\125\uffa5\127\uffa5\131\uffa5" +
    "\137\uffa5\140\uffa5\144\uffa5\153\uffa5\154\uffa5\155\uffa5\157" +
    "\uffa5\160\uffa5\161\uffa5\162\uffa5\163\uffa5\164\uffa5\177\uffa5" +
    "\001\002\000\004\177\235\001\002\000\004\177\231\001" +
    "\002\000\050\002\uffaa\027\uffaa\122\uffaa\125\uffaa\127\uffaa" +
    "\131\uffaa\137\uffaa\140\uffaa\144\uffaa\153\uffaa\154\uffaa\155" +
    "\uffaa\157\uffaa\160\uffaa\161\uffaa\162\uffaa\163\uffaa\164\uffaa" +
    "\177\uffaa\001\002\000\050\002\uffa9\027\uffa9\122\uffa9\125" +
    "\uffa9\127\uffa9\131\uffa9\137\uffa9\140\uffa9\144\uffa9\153\uffa9" +
    "\154\uffa9\155\uffa9\157\uffa9\160\uffa9\161\uffa9\162\uffa9\163" +
    "\uffa9\164\uffa9\177\uffa9\001\002\000\004\141\225\001\002" +
    "\000\004\177\175\001\002\000\050\002\uffa8\027\uffa8\122" +
    "\uffa8\125\uffa8\127\uffa8\131\uffa8\137\uffa8\140\uffa8\144\uffa8" +
    "\153\uffa8\154\uffa8\155\uffa8\157\uffa8\160\uffa8\161\uffa8\162" +
    "\uffa8\163\uffa8\164\uffa8\177\uffa8\001\002\000\050\002\uffa4" +
    "\027\uffa4\122\uffa4\125\uffa4\127\uffa4\131\uffa4\137\uffa4\140" +
    "\uffa4\144\uffa4\153\uffa4\154\uffa4\155\uffa4\157\uffa4\160\uffa4" +
    "\161\uffa4\162\uffa4\163\uffa4\164\uffa4\177\uffa4\001\002\000" +
    "\004\177\131\001\002\000\004\177\125\001\002\000\004" +
    "\177\121\001\002\000\004\143\114\001\002\000\042\027" +
    "\104\122\067\125\066\131\076\137\112\144\uffb0\153\057" +
    "\154\113\155\070\157\105\160\101\161\110\162\100\163" +
    "\111\164\060\177\072\001\002\000\004\155\070\001\002" +
    "\000\050\002\uffe4\027\uffe4\122\uffe4\125\uffe4\127\uffe4\131" +
    "\uffe4\137\uffe4\140\uffe4\144\uffe4\153\uffe4\154\uffe4\155\uffe4" +
    "\157\uffe4\160\uffe4\161\uffe4\162\uffe4\163\uffe4\164\uffe4\177" +
    "\uffe4\001\002\000\004\144\120\001\002\000\060\002\uffb2" +
    "\027\uffb2\122\uffb2\123\uffb2\124\uffb2\125\uffb2\127\uffb2\131" +
    "\uffb2\133\uffb2\134\uffb2\137\uffb2\140\uffb2\144\uffb2\153\uffb2" +
    "\154\uffb2\155\uffb2\157\uffb2\160\uffb2\161\uffb2\162\uffb2\163" +
    "\uffb2\164\uffb2\177\uffb2\001\002\000\004\141\122\001\002" +
    "\000\004\142\123\001\002\000\004\152\124\001\002\000" +
    "\050\002\uffe7\027\uffe7\122\uffe7\125\uffe7\127\uffe7\131\uffe7" +
    "\137\uffe7\140\uffe7\144\uffe7\153\uffe7\154\uffe7\155\uffe7\157" +
    "\uffe7\160\uffe7\161\uffe7\162\uffe7\163\uffe7\164\uffe7\177\uffe7" +
    "\001\002\000\004\040\126\001\002\000\004\172\127\001" +
    "\002\000\004\152\130\001\002\000\070\002\uffc9\027\uffc9" +
    "\122\uffc9\125\uffc9\127\uffc9\131\uffc9\134\uffc9\137\uffc9\140" +
    "\uffc9\144\uffc9\153\uffc9\154\uffc9\155\uffc9\157\uffc9\160\uffc9" +
    "\161\uffc9\162\uffc9\163\uffc9\164\uffc9\170\uffc9\171\uffc9\172" +
    "\uffc9\173\uffc9\174\uffc9\175\uffc9\176\uffc9\177\uffc9\001\002" +
    "\000\004\040\132\001\002\000\014\141\135\174\134\175" +
    "\133\176\140\177\141\001\002\000\036\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\141\uffb7\142" +
    "\uffb7\152\uffb7\174\uffb7\175\uffb7\176\uffb7\177\uffb7\001\002" +
    "\000\036\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\141\uffb8\142\uffb8\152\uffb8\174\uffb8\175\uffb8" +
    "\176\uffb8\177\uffb8\001\002\000\014\141\135\174\134\175" +
    "\133\176\140\177\141\001\002\000\020\141\135\142\uff90" +
    "\152\uff90\174\134\175\133\176\140\177\141\001\002\000" +
    "\034\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86" +
    "\141\uff86\142\uff86\152\uff86\174\uff86\175\uff86\176\uff86\177" +
    "\uff86\001\002\000\036\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\141\uffb6\142\uffb6\152\uffb6\174" +
    "\uffb6\175\uffb6\176\uffb6\177\uffb6\001\002\000\034\031\uff85" +
    "\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\141\uff85\142" +
    "\uff85\152\uff85\174\uff85\175\uff85\176\uff85\177\uff85\001\002" +
    "\000\034\031\150\032\145\033\153\034\151\035\146\036" +
    "\147\141\uff88\142\uff88\152\uff88\174\uff88\175\uff88\176\uff88" +
    "\177\uff88\001\002\000\004\152\144\001\002\000\070\002" +
    "\uffcb\027\uffcb\122\uffcb\125\uffcb\127\uffcb\131\uffcb\134\uffcb" +
    "\137\uffcb\140\uffcb\144\uffcb\153\uffcb\154\uffcb\155\uffcb\157" +
    "\uffcb\160\uffcb\161\uffcb\162\uffcb\163\uffcb\164\uffcb\170\uffcb" +
    "\171\uffcb\172\uffcb\173\uffcb\174\uffcb\175\uffcb\176\uffcb\177" +
    "\uffcb\001\002\000\014\141\135\174\134\175\133\176\140" +
    "\177\141\001\002\000\014\141\135\174\134\175\133\176" +
    "\140\177\141\001\002\000\014\141\135\174\134\175\133" +
    "\176\140\177\141\001\002\000\014\141\135\174\134\175" +
    "\133\176\140\177\141\001\002\000\014\141\135\174\134" +
    "\175\133\176\140\177\141\001\002\000\020\141\uff8f\142" +
    "\uff8f\152\uff8f\174\uff8f\175\uff8f\176\uff8f\177\uff8f\001\002" +
    "\000\014\141\135\174\134\175\133\176\140\177\141\001" +
    "\002\000\034\031\150\032\145\033\153\034\151\035\146" +
    "\036\147\141\uff88\142\uff88\152\uff88\174\uff88\175\uff88\176" +
    "\uff88\177\uff88\001\002\000\020\141\uff8b\142\uff8b\152\uff8b" +
    "\174\uff8b\175\uff8b\176\uff8b\177\uff8b\001\002\000\034\031" +
    "\150\032\145\033\153\034\151\035\146\036\147\141\uff88" +
    "\142\uff88\152\uff88\174\uff88\175\uff88\176\uff88\177\uff88\001" +
    "\002\000\020\141\uff8c\142\uff8c\152\uff8c\174\uff8c\175\uff8c" +
    "\176\uff8c\177\uff8c\001\002\000\034\031\150\032\145\033" +
    "\153\034\151\035\146\036\147\141\uff88\142\uff88\152\uff88" +
    "\174\uff88\175\uff88\176\uff88\177\uff88\001\002\000\020\141" +
    "\uff8e\142\uff8e\152\uff8e\174\uff8e\175\uff8e\176\uff8e\177\uff8e" +
    "\001\002\000\034\031\150\032\145\033\153\034\151\035" +
    "\146\036\147\141\uff88\142\uff88\152\uff88\174\uff88\175\uff88" +
    "\176\uff88\177\uff88\001\002\000\020\141\uff89\142\uff89\152" +
    "\uff89\174\uff89\175\uff89\176\uff89\177\uff89\001\002\000\034" +
    "\031\150\032\145\033\153\034\151\035\146\036\147\141" +
    "\uff88\142\uff88\152\uff88\174\uff88\175\uff88\176\uff88\177\uff88" +
    "\001\002\000\020\141\uff8a\142\uff8a\152\uff8a\174\uff8a\175" +
    "\uff8a\176\uff8a\177\uff8a\001\002\000\034\031\150\032\145" +
    "\033\153\034\151\035\146\036\147\141\uff88\142\uff88\152" +
    "\uff88\174\uff88\175\uff88\176\uff88\177\uff88\001\002\000\020" +
    "\141\uff8d\142\uff8d\152\uff8d\174\uff8d\175\uff8d\176\uff8d\177" +
    "\uff8d\001\002\000\006\142\uff92\152\uff92\001\002\000\020" +
    "\141\135\142\uff90\152\uff90\174\134\175\133\176\140\177" +
    "\141\001\002\000\006\142\uff91\152\uff91\001\002\000\004" +
    "\142\174\001\002\000\034\031\uff87\032\uff87\033\uff87\034" +
    "\uff87\035\uff87\036\uff87\141\uff87\142\uff87\152\uff87\174\uff87" +
    "\175\uff87\176\uff87\177\uff87\001\002\000\004\040\176\001" +
    "\002\000\022\170\201\171\202\172\204\173\177\174\134" +
    "\175\133\176\140\177\205\001\002\000\010\030\uff94\142" +
    "\uff94\152\uff94\001\002\000\010\030\uff96\142\uff96\152\uff96" +
    "\001\002\000\010\042\213\142\uff99\152\uff99\001\002\000" +
    "\010\030\uff93\142\uff93\152\uff93\001\002\000\004\030\214" +
    "\001\002\000\010\030\uff95\142\uff95\152\uff95\001\002\000" +
    "\012\030\214\042\213\142\uff99\152\uff99\001\002\000\004" +
    "\152\207\001\002\000\070\002\uffcd\027\uffcd\122\uffcd\125" +
    "\uffcd\127\uffcd\131\uffcd\134\uffcd\137\uffcd\140\uffcd\144\uffcd" +
    "\153\uffcd\154\uffcd\155\uffcd\157\uffcd\160\uffcd\161\uffcd\162" +
    "\uffcd\163\uffcd\164\uffcd\170\uffcd\171\uffcd\172\uffcd\173\uffcd" +
    "\174\uffcd\175\uffcd\176\uffcd\177\uffcd\001\002\000\006\142" +
    "\uff9f\152\uff9f\001\002\000\006\142\uffa2\152\uffa2\001\002" +
    "\000\006\142\uff9e\152\uff9e\001\002\000\006\170\222\177" +
    "\220\001\002\000\020\171\202\172\204\173\177\174\134" +
    "\175\133\176\140\177\217\001\002\000\006\142\uff9d\152" +
    "\uff9d\001\002\000\006\142\uff9b\152\uff9b\001\002\000\006" +
    "\142\uff9c\152\uff9c\001\002\000\006\142\uff98\152\uff98\001" +
    "\002\000\006\142\uff9a\152\uff9a\001\002\000\006\142\uff97" +
    "\152\uff97\001\002\000\006\142\uffa0\152\uffa0\001\002\000" +
    "\006\142\uffa1\152\uffa1\001\002\000\004\172\226\001\002" +
    "\000\004\142\227\001\002\000\004\152\230\001\002\000" +
    "\050\002\uffb3\027\uffb3\122\uffb3\125\uffb3\127\uffb3\131\uffb3" +
    "\137\uffb3\140\uffb3\144\uffb3\153\uffb3\154\uffb3\155\uffb3\157" +
    "\uffb3\160\uffb3\161\uffb3\162\uffb3\163\uffb3\164\uffb3\177\uffb3" +
    "\001\002\000\004\040\232\001\002\000\014\141\135\174" +
    "\134\175\133\176\140\177\141\001\002\000\004\152\234" +
    "\001\002\000\070\002\uffcc\027\uffcc\122\uffcc\125\uffcc\127" +
    "\uffcc\131\uffcc\134\uffcc\137\uffcc\140\uffcc\144\uffcc\153\uffcc" +
    "\154\uffcc\155\uffcc\157\uffcc\160\uffcc\161\uffcc\162\uffcc\163" +
    "\uffcc\164\uffcc\170\uffcc\171\uffcc\172\uffcc\173\uffcc\174\uffcc" +
    "\175\uffcc\176\uffcc\177\uffcc\001\002\000\004\040\236\001" +
    "\002\000\014\141\135\174\134\175\133\176\140\177\141" +
    "\001\002\000\004\152\240\001\002\000\070\002\uffca\027" +
    "\uffca\122\uffca\125\uffca\127\uffca\131\uffca\134\uffca\137\uffca" +
    "\140\uffca\144\uffca\153\uffca\154\uffca\155\uffca\157\uffca\160" +
    "\uffca\161\uffca\162\uffca\163\uffca\164\uffca\170\uffca\171\uffca" +
    "\172\uffca\173\uffca\174\uffca\175\uffca\176\uffca\177\uffca\001" +
    "\002\000\004\143\114\001\002\000\004\133\243\001\002" +
    "\000\004\151\244\001\002\000\004\143\114\001\002\000" +
    "\050\002\uffc7\027\uffc7\122\uffc7\125\uffc7\127\uffc7\131\uffc7" +
    "\137\uffc7\140\uffc7\144\uffc7\153\uffc7\154\uffc7\155\uffc7\157" +
    "\uffc7\160\uffc7\161\uffc7\162\uffc7\163\uffc7\164\uffc7\177\uffc7" +
    "\001\002\000\050\002\uffad\027\uffad\122\uffad\125\uffad\127" +
    "\uffad\131\uffad\137\uffad\140\uffad\144\uffad\153\uffad\154\uffad" +
    "\155\uffad\157\uffad\160\uffad\161\uffad\162\uffad\163\uffad\164" +
    "\uffad\177\uffad\001\002\000\024\141\135\170\254\171\256" +
    "\172\257\173\253\174\134\175\133\176\140\177\141\001" +
    "\002\000\006\142\uffb4\152\uffb4\001\002\000\014\141\135" +
    "\174\134\175\133\176\140\177\141\001\002\000\006\142" +
    "\uffb5\152\uffb5\001\002\000\004\152\uffba\001\002\000\004" +
    "\152\uffb9\001\002\000\004\152\uffbe\001\002\000\004\152" +
    "\uffbc\001\002\000\004\152\uffbb\001\002\000\004\152\uffbd" +
    "\001\002\000\022\170\201\171\202\172\204\173\177\174" +
    "\134\175\133\176\140\177\205\001\002\000\004\142\263" +
    "\001\002\000\052\002\uffe5\027\uffe5\122\uffe5\125\uffe5\127" +
    "\uffe5\131\uffe5\137\uffe5\140\uffe5\143\uffe5\144\uffe5\153\uffe5" +
    "\154\uffe5\155\uffe5\157\uffe5\160\uffe5\161\uffe5\162\uffe5\163" +
    "\uffe5\164\uffe5\177\uffe5\001\002\000\022\170\201\171\202" +
    "\172\204\173\177\174\134\175\133\176\140\177\205\001" +
    "\002\000\004\142\266\001\002\000\004\143\114\001\002" +
    "\000\054\002\uffd1\027\uffd1\122\uffd1\123\270\124\uffd1\125" +
    "\uffd1\127\uffd1\131\uffd1\137\uffd1\140\uffd1\144\uffd1\153\uffd1" +
    "\154\uffd1\155\uffd1\157\uffd1\160\uffd1\161\uffd1\162\uffd1\163" +
    "\uffd1\164\uffd1\177\uffd1\001\002\000\004\141\276\001\002" +
    "\000\052\002\uffd2\027\uffd2\122\uffd2\124\uffd2\125\uffd2\127" +
    "\uffd2\131\uffd2\137\uffd2\140\uffd2\144\uffd2\153\uffd2\154\uffd2" +
    "\155\uffd2\157\uffd2\160\uffd2\161\uffd2\162\uffd2\163\uffd2\164" +
    "\uffd2\177\uffd2\001\002\000\052\002\uffce\027\uffce\122\uffce" +
    "\124\273\125\uffce\127\uffce\131\uffce\137\uffce\140\uffce\144" +
    "\uffce\153\uffce\154\uffce\155\uffce\157\uffce\160\uffce\161\uffce" +
    "\162\uffce\163\uffce\164\uffce\177\uffce\001\002\000\004\143" +
    "\114\001\002\000\050\002\uffd3\027\uffd3\122\uffd3\125\uffd3" +
    "\127\uffd3\131\uffd3\137\uffd3\140\uffd3\144\uffd3\153\uffd3\154" +
    "\uffd3\155\uffd3\157\uffd3\160\uffd3\161\uffd3\162\uffd3\163\uffd3" +
    "\164\uffd3\177\uffd3\001\002\000\050\002\uffcf\027\uffcf\122" +
    "\uffcf\125\uffcf\127\uffcf\131\uffcf\137\uffcf\140\uffcf\144\uffcf" +
    "\153\uffcf\154\uffcf\155\uffcf\157\uffcf\160\uffcf\161\uffcf\162" +
    "\uffcf\163\uffcf\164\uffcf\177\uffcf\001\002\000\022\170\201" +
    "\171\202\172\204\173\177\174\134\175\133\176\140\177" +
    "\205\001\002\000\004\142\300\001\002\000\004\143\114" +
    "\001\002\000\054\002\uffd1\027\uffd1\122\uffd1\123\270\124" +
    "\uffd1\125\uffd1\127\uffd1\131\uffd1\137\uffd1\140\uffd1\144\uffd1" +
    "\153\uffd1\154\uffd1\155\uffd1\157\uffd1\160\uffd1\161\uffd1\162" +
    "\uffd1\163\uffd1\164\uffd1\177\uffd1\001\002\000\052\002\uffd0" +
    "\027\uffd0\122\uffd0\124\uffd0\125\uffd0\127\uffd0\131\uffd0\137" +
    "\uffd0\140\uffd0\144\uffd0\153\uffd0\154\uffd0\155\uffd0\157\uffd0" +
    "\160\uffd0\161\uffd0\162\uffd0\163\uffd0\164\uffd0\177\uffd0\001" +
    "\002\000\004\177\304\001\002\000\004\142\305\001\002" +
    "\000\004\143\306\001\002\000\004\126\310\001\002\000" +
    "\004\130\330\001\002\000\004\151\311\001\002\000\014" +
    "\172\314\173\316\174\312\175\317\176\313\001\002\000" +
    "\004\143\uffda\001\002\000\004\143\uffd8\001\002\000\004" +
    "\143\uffdb\001\002\000\004\143\320\001\002\000\004\143" +
    "\uffdc\001\002\000\004\143\uffd9\001\002\000\042\027\104" +
    "\122\067\125\066\127\uffb0\131\076\137\112\153\057\154" +
    "\113\155\070\157\105\160\101\161\110\162\100\163\111" +
    "\164\060\177\072\001\002\000\006\126\310\130\uffd6\001" +
    "\002\000\004\130\uffdd\001\002\000\004\130\uffd7\001\002" +
    "\000\004\127\325\001\002\000\004\152\326\001\002\000" +
    "\004\144\327\001\002\000\010\126\uffd4\130\uffd4\144\uffd4" +
    "\001\002\000\004\151\333\001\002\000\004\144\332\001" +
    "\002\000\050\002\uffde\027\uffde\122\uffde\125\uffde\127\uffde" +
    "\131\uffde\137\uffde\140\uffde\144\uffde\153\uffde\154\uffde\155" +
    "\uffde\157\uffde\160\uffde\161\uffde\162\uffde\163\uffde\164\uffde" +
    "\177\uffde\001\002\000\004\143\320\001\002\000\004\144" +
    "\uffd5\001\002\000\024\141\135\170\254\171\256\172\257" +
    "\173\253\174\134\175\133\176\140\177\141\001\002\000" +
    "\004\152\337\001\002\000\004\144\340\001\002\000\046" +
    "\002\uffef\027\uffef\122\uffef\125\uffef\131\uffef\134\uffef\137" +
    "\uffef\144\uffef\153\uffef\154\uffef\155\uffef\157\uffef\160\uffef" +
    "\161\uffef\162\uffef\163\uffef\164\uffef\177\uffef\001\002\000" +
    "\050\002\uffac\027\uffac\122\uffac\125\uffac\127\uffac\131\uffac" +
    "\137\uffac\140\uffac\144\uffac\153\uffac\154\uffac\155\uffac\157" +
    "\uffac\160\uffac\161\uffac\162\uffac\163\uffac\164\uffac\177\uffac" +
    "\001\002\000\012\002\uffaf\127\uffaf\140\uffaf\144\uffaf\001" +
    "\002\000\050\002\uffab\027\uffab\122\uffab\125\uffab\127\uffab" +
    "\131\uffab\137\uffab\140\uffab\144\uffab\153\uffab\154\uffab\155" +
    "\uffab\157\uffab\160\uffab\161\uffab\162\uffab\163\uffab\164\uffab" +
    "\177\uffab\001\002\000\004\040\345\001\002\000\004\173" +
    "\346\001\002\000\004\152\347\001\002\000\070\002\uffc8" +
    "\027\uffc8\122\uffc8\125\uffc8\127\uffc8\131\uffc8\134\uffc8\137" +
    "\uffc8\140\uffc8\144\uffc8\153\uffc8\154\uffc8\155\uffc8\157\uffc8" +
    "\160\uffc8\161\uffc8\162\uffc8\163\uffc8\164\uffc8\170\uffc8\171" +
    "\uffc8\172\uffc8\173\uffc8\174\uffc8\175\uffc8\176\uffc8\177\uffc8" +
    "\001\002\000\020\157\105\160\101\161\110\162\100\163" +
    "\111\164\060\177\352\001\002\000\022\170\uffe2\171\uffe2" +
    "\172\uffe2\173\uffe2\174\uffe2\175\uffe2\176\uffe2\177\uffe2\001" +
    "\002\000\022\170\uffe1\171\uffe1\172\uffe1\173\uffe1\174\uffe1" +
    "\175\uffe1\176\uffe1\177\uffe1\001\002\000\022\170\201\171" +
    "\202\172\204\173\177\174\134\175\133\176\140\177\205" +
    "\001\002\000\004\152\355\001\002\000\004\177\356\001" +
    "\002\000\006\037\250\041\251\001\002\000\004\142\362" +
    "\001\002\000\004\142\uffdf\001\002\000\004\142\uffe0\001" +
    "\002\000\004\143\114\001\002\000\050\002\uffe3\027\uffe3" +
    "\122\uffe3\125\uffe3\127\uffe3\131\uffe3\137\uffe3\140\uffe3\144" +
    "\uffe3\153\uffe3\154\uffe3\155\uffe3\157\uffe3\160\uffe3\161\uffe3" +
    "\162\uffe3\163\uffe3\164\uffe3\177\uffe3\001\002\000\050\002" +
    "\uffe6\027\uffe6\122\uffe6\125\uffe6\127\uffe6\131\uffe6\137\uffe6" +
    "\140\uffe6\144\uffe6\153\uffe6\154\uffe6\155\uffe6\157\uffe6\160" +
    "\uffe6\161\uffe6\162\uffe6\163\uffe6\164\uffe6\177\uffe6\001\002" +
    "\000\004\143\114\001\002\000\046\002\uffee\027\uffee\122" +
    "\uffee\125\uffee\131\uffee\134\uffee\137\uffee\144\uffee\153\uffee" +
    "\154\uffee\155\uffee\157\uffee\160\uffee\161\uffee\162\uffee\163" +
    "\uffee\164\uffee\177\uffee\001\002\000\044\002\ufff1\027\ufff1" +
    "\122\ufff1\125\ufff1\131\ufff1\137\ufff1\144\ufff1\153\ufff1\154" +
    "\ufff1\155\ufff1\157\ufff1\160\ufff1\161\ufff1\162\ufff1\163\ufff1" +
    "\164\ufff1\177\ufff1\001\002\000\004\002\000\001\002\000" +
    "\044\002\ufff8\027\ufff8\122\ufff8\125\ufff8\131\ufff8\134\ufff8" +
    "\137\ufff8\153\ufff8\154\ufff8\155\ufff8\157\ufff8\160\ufff8\161" +
    "\ufff8\162\ufff8\163\ufff8\164\ufff8\177\ufff8\001\002\000\004" +
    "\143\373\001\002\000\022\134\ufff5\144\ufff5\157\105\160" +
    "\101\161\110\162\100\163\111\164\060\001\002\000\006" +
    "\134\024\144\ufff2\001\002\000\022\134\ufff5\144\ufff5\157" +
    "\105\160\101\161\110\162\100\163\111\164\060\001\002" +
    "\000\006\134\ufff6\144\ufff6\001\002\000\006\134\ufff4\144" +
    "\ufff4\001\002\000\004\144\u0101\001\002\000\046\002\ufff7" +
    "\006\ufff7\027\ufff7\122\ufff7\125\ufff7\131\ufff7\134\ufff7\137" +
    "\ufff7\153\ufff7\154\ufff7\155\ufff7\157\ufff7\160\ufff7\161\ufff7" +
    "\162\ufff7\163\ufff7\164\ufff7\177\ufff7\001\002\000\004\016" +
    "\u0103\001\002\000\004\177\u0104\001\002\000\004\152\ufffb" +
    "\001\002\000\004\152\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\012\002\010\003\005\004\007\005\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\017" +
    "\007\014\010\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\013" +
    "\004\007\005\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\370\007\014\010\016" +
    "\001\001\000\010\013\020\014\022\015\021\001\001\000" +
    "\042\023\106\024\101\025\055\026\102\027\105\032\074" +
    "\036\076\037\063\045\073\050\062\051\072\053\060\055" +
    "\054\056\367\057\061\060\070\001\001\000\010\013\366" +
    "\014\022\015\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\030\047\033\001\001" +
    "\000\002\001\001\000\004\017\364\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\043\021\044\047\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\050" +
    "\001\001\000\006\021\051\047\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\023\106" +
    "\024\101\025\055\026\102\027\105\032\074\036\076\037" +
    "\063\045\073\050\062\051\072\053\060\055\054\056\064" +
    "\057\061\060\070\001\001\000\002\001\001\000\004\054" +
    "\363\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\023\106\024\101\025\055\026\102\027" +
    "\105\032\074\036\076\037\063\045\073\050\062\051\072" +
    "\053\060\055\054\056\341\057\061\060\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\114\001\001\000\042\023" +
    "\106\024\101\025\055\026\102\027\105\032\074\036\076" +
    "\037\063\045\073\050\062\051\072\053\060\055\054\056" +
    "\116\057\061\060\070\001\001\000\004\025\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\046\136" +
    "\070\142\072\135\074\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\046\136\070\172\072\135\074\141" +
    "\001\001\000\012\046\136\071\167\072\170\074\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\073\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\046\136\074\165\001\001\000\006\046\136" +
    "\074\163\001\001\000\006\046\136\074\161\001\001\000" +
    "\006\046\136\074\157\001\001\000\006\046\136\074\155" +
    "\001\001\000\002\001\001\000\006\046\136\074\153\001" +
    "\001\000\004\073\154\001\001\000\002\001\001\000\004" +
    "\073\156\001\001\000\002\001\001\000\004\073\160\001" +
    "\001\000\002\001\001\000\004\073\162\001\001\000\002" +
    "\001\001\000\004\073\164\001\001\000\002\001\001\000" +
    "\004\073\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\046\136\071\171\072\170\074\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\177\061\205\067\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\223\001\001" +
    "\000\002\001\001\000\004\063\222\001\001\000\002\001" +
    "\001\000\010\062\210\063\207\065\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\220\001\001\000\010" +
    "\046\177\064\214\067\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\046\136\070" +
    "\232\072\135\074\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\046\136\070\236\072" +
    "\135\074\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\046\136\052\254\070\257\072\135\074" +
    "\141\001\001\000\002\001\001\000\012\046\136\070\251" +
    "\072\135\074\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\046\177\061" +
    "\261\067\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\046\177\061\264\067\202\001\001\000\002\001" +
    "\001\000\004\054\266\001\001\000\006\033\271\034\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\273\001\001\000\004\054\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\177\061\276\067\202\001" +
    "\001\000\002\001\001\000\004\054\300\001\001\000\006" +
    "\033\301\034\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\306" +
    "\001\001\000\004\043\330\001\001\000\002\001\001\000" +
    "\004\041\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\320\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\023\106\024\101\025\055" +
    "\026\102\027\105\032\074\036\076\037\063\045\073\050" +
    "\062\051\072\053\060\055\054\056\323\057\061\060\070" +
    "\001\001\000\006\040\322\042\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\333\001\001" +
    "\000\002\001\001\000\014\046\136\052\335\070\257\072" +
    "\135\074\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\352\045\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\046\177" +
    "\061\353\067\202\001\001\000\002\001\001\000\010\031" +
    "\356\050\360\053\357\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\362\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\365\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\373\012\375\045\374\001\001\000\010\013\377\014" +
    "\022\015\021\001\001\000\010\011\376\012\375\045\374" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= importar_opcional clases_opcionales funciones_opcionales instrucciones_opcionales 
            {
              Object RESULT =null;
		
    System.out.println("-----------------------------");
    System.out.println("Escaneo completado con exito.");
    System.out.println("-----------------------------");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // importar_opcional ::= importar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("importar_opcional",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // importar_opcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("importar_opcional",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importar ::= declara_importacion SEMI importar_opcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("importar",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declara_importacion ::= IMPORT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_importacion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declara_importacion ::= FROM ID IMPORT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_importacion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // clases_opcionales ::= clases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases_opcionales",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // clases_opcionales ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases_opcionales",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // clases ::= clase clases_opcionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // clase ::= CLASS ID LLAVE_IZQ atributos_opcionales funciones_opcionales LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atributos_opcionales ::= atributos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos_opcionales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atributos_opcionales ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos_opcionales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atributos ::= declara_variable atributos_opcionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funciones_opcionales ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_opcionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funciones_opcionales ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones_opcionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funciones ::= funcion funciones_opcionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion ::= FUNCTION ID COLON tipo_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_funcion ::= tipo_dato parametros LLAVE_IZQ instrucciones_opcionales RETURN valor SEMI LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_funcion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_funcion ::= VOID parametros bloque_codigo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_funcion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros ::= PAR_IZQ parametros_opcionales PAR_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros_opcionales ::= declara_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_opcionales",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros_opcionales ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_opcionales",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declara_parametros ::= tipo_dato ID mas_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_parametros",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // mas_parametros ::= COMMA declara_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // mas_parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ejecutar_funcion ::= EXECUTE ID PAR_IZQ PAR_DER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejecutar_funcion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ciclo_while ::= evaluar_while bloque_codigo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // evaluar_while ::= WHILE_LOOP PAR_IZQ exp_logica PAR_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluar_while",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ciclo_do_while ::= DO_LOOP bloque_codigo evaluar_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo_do_while",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ciclo_for ::= FOR_LOOP PAR_IZQ iterador exp_logica SEMI incremento PAR_DER bloque_codigo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iterador ::= declara_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iterador ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // incremento ::= agregar_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // incremento ::= variable_opr_unario 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estructura_switch ::= SWITCH PAR_IZQ ID PAR_DER LLAVE_IZQ switch_opciones default_opcion LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_switch",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // switch_opciones ::= CASE COLON switch_literal bloque_codigo_switch mas_switch_opciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_opciones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // switch_literal ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // switch_literal ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // switch_literal ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // switch_literal ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // switch_literal ::= COMPLEX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mas_switch_opciones ::= switch_opciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_switch_opciones",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mas_switch_opciones ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_switch_opciones",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // default_opcion ::= DEFAULT COLON bloque_codigo_switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_opcion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bloque_codigo_switch ::= LLAVE_IZQ instrucciones_opcionales BREAK SEMI LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo_switch",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // estructura_if ::= IF PAR_IZQ exp_logica PAR_DER bloque_codigo condicion_opcional condicion_else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_if",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion_opcional ::= condicion_elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_opcional",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion_opcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_opcional",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion_elif ::= ELIF PAR_IZQ exp_logica PAR_DER bloque_codigo condicion_opcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_elif",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion_else ::= ELSE bloque_codigo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_else",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicion_else ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_else",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declara_variable ::= DATATYPE_BOOL ID ASSIGNMENT exp_logica SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_variable",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declara_variable ::= DATATYPE_INT ID ASSIGNMENT exp_aritmetica SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_variable",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declara_variable ::= DATATYPE_DECIMAL ID ASSIGNMENT exp_aritmetica SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_variable",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declara_variable ::= DATATYPE_COMPLEX ID ASSIGNMENT exp_aritmetica SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_variable",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declara_variable ::= DATATYPE_STRING ID ASSIGNMENT STRING SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_variable",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declara_variable ::= DATATYPE_CHAR ID ASSIGNMENT CHARACTER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_variable",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // estrucura_try ::= TRY COLON bloque_codigo EXCEPTION COLON bloque_codigo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estrucura_try",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo_dato ::= DATATYPE_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo_dato ::= DATATYPE_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo_dato ::= DATATYPE_DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo_dato ::= DATATYPE_COMPLEX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo_dato ::= DATATYPE_STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo_dato ::= DATATYPE_CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_dato ::= DATATYPE_MISC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_dato ::= DATA_STRUCTURE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // asigna_variable ::= ID ASSIGNMENT valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asigna_variable",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor ::= exp_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literal_numerico ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // literal_numerico ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literal_numerico ::= COMPLEX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // agregar_variable ::= ID ASSIGN_OPT exp_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agregar_variable",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variable_opr_unario ::= ID UNARY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_opr_unario",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // imprime_consola ::= PRINT PAR_IZQ STRING PAR_DER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprime_consola",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bloque_codigo ::= LLAVE_IZQ instrucciones_opcionales LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // instrucciones_opcionales ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_opcionales",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instrucciones_opcionales ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_opcionales",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // instrucciones ::= declara_instruccion instrucciones_opcionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declara_instruccion ::= declara_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declara_instruccion ::= asigna_variable SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declara_instruccion ::= agregar_variable SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declara_instruccion ::= variable_opr_unario SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declara_instruccion ::= ciclo_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declara_instruccion ::= ciclo_do_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declara_instruccion ::= ciclo_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declara_instruccion ::= estructura_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declara_instruccion ::= estructura_switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declara_instruccion ::= estrucura_try 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // declara_instruccion ::= ejecutar_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declara_instruccion ::= imprime_consola 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declara_instruccion",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exp_logica ::= ID exp_logica_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_logica",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exp_logica ::= BOOLEAN operacion_logica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_logica",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // exp_logica ::= valor_comp comparacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_logica",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // exp_logica_p ::= comparacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_logica_p",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // exp_logica_p ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_logica_p",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // comparacion ::= COMPARISON comparacion_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // comparacion_p ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_p",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // comparacion_p ::= valor_comp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_p",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operacion_logica ::= LOGICAL operacion_logica_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_logica",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operacion_logica ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_logica",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operacion_logica_p ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_logica_p",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operacion_logica_p ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_logica_p",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valor_comp ::= literal_numerico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_comp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valor_comp ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_comp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valor_comp ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_comp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valor_comp ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_comp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // exp_aritmetica ::= termino exp_a_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // exp_a_p ::= termino exp_a_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_a_p",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // exp_a_p ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_a_p",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // termino ::= factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // termino_p ::= SUMA factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // termino_p ::= RESTA factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // termino_p ::= DIVISION factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // termino_p ::= PRODUCTO factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // termino_p ::= MOD factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // termino_p ::= POTENCIA factor termino_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // termino_p ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino_p",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // factor ::= PAR_IZQ exp_aritmetica PAR_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // factor ::= literal_numerico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
