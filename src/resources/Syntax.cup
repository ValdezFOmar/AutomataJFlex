import java_cup.runtime.*;


parser code {:
    private Symbol s;

    public void syntax_error(Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }
:}


terminal        COMPARISON, ARITHMETIC, UNARY, ASSIGNMENT, ASSIGN_OPT, LOGICAL, NEGATION, NULLISH, TERNARY,
                IDENTITY, INSTANCE, TYPE, MEMBERSHIP, BITWISE, BOOLEAN, NULL, STRING, CHARACTER, INTEGER, DECIMAL,
                COMPLEX, FOR_LOOP, DO_LOOP, WHILE_LOOP, ITERATE, DATATYPE_INT, DATATYPE_DECIMAL, DATATYPE_COMPLEX,
                DATATYPE_BOOL, DATATYPE_STRING, DATATYPE_CHAR, DATATYPE_MISC, DATA_STRUCTURE, VARIABLE, CONDITIONAL,
                CONDITION_CONSEQ, CONSEQUENCE, SWITCH, CASE, FUNCTION, VOID, LAMBDA, EXECUTE, TRY, TRY_CONSEQUENCE,
                EXCEPTION, LINE_COMMENT, START_COMMENT, END_COMMENT, SPECIAL_COMMENT, ACCESMOD, NONACCESMOD, PAR_IZQ,
                PAR_DER, LLAVE_IZQ, LLAVE_DER, COR_IZQ, COR_DER, POINT, COMMA, COLON, SEMICOLON, CLASS, PARENT,
                INTERFACE, ENUM, EXTENDS, IMPLEMENTS, BREAK, CONTINUE, PASS, IMPORTING, RETURN, CREATE, DELETE,
                THIS, REFERENCE, ALIAS, ASYNCHRONOUS, PACKAGE, PRINT, HANDLER, MODIFIER, STORAGE, CAST, EVENT,
                GET, GOTO, MODULE, NAMESPACE, OF, OPERATOR, OPTION, PARTIAL, INCREMENT, DEBUG, STRUCTURE, ADD,
                CONSTRAINT, CONDITIONALQUERY, QUERY_CONDITIONS, ALTER, INSERT, SORT, BACKUP, RANGE, VIEW, COLUMN,
                TABLE, DATABASE, SELECT, JOIN, INDEX, LIMIT, UPDATE, UNION, IDENTIFIER, ERROR;

non terminal    incio, declara_funcion, sentencia;


start with incio;


incio ::= declara_funcion | sentencia {: System.out.println("Función"); :}
;
declara_funcion ::= FUNCTION IDENTIFIER PAR_IZQ PAR_DER LLAVE_IZQ sentencia LLAVE_DER
                {: System.out.println("Función"); :}
;
sentencia ::= DATATYPE_INT IDENTIFIER ASSIGNMENT INTEGER SEMICOLON
                {: System.out.println("sentencia"); :}
;