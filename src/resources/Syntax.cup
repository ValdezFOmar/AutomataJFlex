import java_cup.runtime.Symbol;


parser code {:
    private Symbol s;

    public void syntax_error(Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }
:}


// ======== TERMINALES ========
// Palabras Reservadas 
terminal        ACCESMOD, NONACCESMOD, CLASS, PARENT, INTERFACE, ENUM, EXTENDS, IMPLEMENTS, CONTINUE,
                PASS, IMPORT, FROM, CREATE, DELETE, THIS, REFERENCE, ALIAS, ASYNCHRONOUS, PACKAGE, PRINT;
// Operadores
terminal        COMPARISON, ARITHMETIC, UNARY, ASSIGNMENT, ASSIGN_OPT, LOGICAL, NEGATION, NULLISH,
                TERNARY, IDENTITY, INSTANCE, TYPE, MEMBERSHIP, BITWISE;
// Visual Basic
terminal        HANDLER, MODIFIER, STORAGE, CAST, EVENT, GET, GOTO, MODULE, NAMESPACE, OF, OPERATOR, OPTION,
                PARTIAL, INCREMENT, DEBUG, STRUCTURE;
// SQL
terminal        ADD, CONSTRAINT, CONDITIONALQUERY, QUERY_CONDITIONS, ALTER, INSERT, SORT, BACKUP, RANGE,
                VIEW, COLUMN, TABLE, DATABASE, SELECT, JOIN, INDEX, LIMIT, UPDATE, UNION;
// Comentarios
terminal        LINE_COMMENT, START_COMMENT, END_COMMENT, SPECIAL_COMMENT;
// Condicional
terminal        CONDITIONAL, CONDITION_CONSEQ, CONSEQUENCE, SWITCH, CASE, BREAK,DEFAULT, TRY, TRY_CONSEQUENCE, EXCEPTION;
// Funciones
terminal        FUNCTION, VOID, LAMBDA, EXECUTE, RETURN;
// Separadores
terminal        PAR_IZQ, PAR_DER, LLAVE_IZQ, LLAVE_DER, COR_IZQ, COR_DER, POINT, COMMA, COLON, SEMI;
// Ciclos
terminal        FOR_LOOP, DO_LOOP, WHILE_LOOP, ITERATE;
// Tipos de dato
terminal        DATATYPE_BOOL, DATATYPE_INT, DATATYPE_DECIMAL, DATATYPE_COMPLEX,
                DATATYPE_STRING, DATATYPE_CHAR, DATATYPE_MISC, DATA_STRUCTURE, VARIABLE;
// Literales
terminal        BOOLEAN, NULL, STRING, CHARACTER, INTEGER, DECIMAL, COMPLEX;
// Otro
terminal        ID, ERROR;


// ======== NO TERMINALES ========
non terminal    inicio, importar, declara_clase, declara_funcion, sentencia, otra_sentencia;


// ======== GRAMATICA ========
// Estructura del lenguaje
//incio ::= importar declara_clase declara_funcion sentencia 
start with inicio;
inicio ::= declara_funcion sentencia otra_sentencia
;

otra_sentencia ::= DATATYPE_BOOL ID ASSIGNMENT BOOLEAN SEMI | /* empty */
;
// Funciones
declara_funcion ::= FUNCTION ID PAR_IZQ PAR_DER LLAVE_IZQ sentencia LLAVE_DER
                {: System.out.println("Funci√≥n"); :}
;
sentencia ::= DATATYPE_INT ID ASSIGNMENT INTEGER SEMI |
                {: System.out.println("sentencia"); :}
;